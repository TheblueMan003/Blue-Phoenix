{"projectName":"array","datapackDirectory":null,"offuscate":false,"files":[{"name":"import","content":"import vector\nimport exception","index":0},{"name":"intarray","content":"package array\n\nstruct intarray16{\n\tint a0, a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15\n\tint size\n\t\n\tdef __init__(int size, int defVal = 0){\n\t\texception.intArgCheck(size, 0, 17)\n\t\tthis.size = size\n\t\ta0, a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15 = defVal\n\t}\n\t\n\tdef get(int index):int{\n\t\tif (index < 0){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tif (index >= size){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tswitch(index){\n\t\t\t0 -> return(a0)\n\t\t\t1 -> return(a1)\n\t\t\t2 -> return(a2)\n\t\t\t3 -> return(a3)\n\t\t\t4 -> return(a4)\n\t\t\t5 -> return(a5)\n\t\t\t6 -> return(a6)\n\t\t\t7 -> return(a7)\n\t\t\t8 -> return(a8)\n\t\t\t9 -> return(a9)\n\t\t\t10 -> return(a10)\n\t\t\t11 -> return(a11)\n\t\t\t12 -> return(a12)\n\t\t\t13 -> return(a13)\n\t\t\t14 -> return(a14)\n\t\t\t15 -> return(a15)\n\t\t}\n\t}\n\t\n\tdef set(int index, int value){\n\t\tif (index < 0){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tif (index >= size){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tswitch(index){\n\t\t\t0 -> a0 = value\n\t\t\t1 -> a1 = value\n\t\t\t2 -> a2 = value\n\t\t\t3 -> a3 = value\n\t\t\t4 -> a4 = value\n\t\t\t5 -> a5 = value\n\t\t\t6 -> a6 = value\n\t\t\t7 -> a7 = value\n\t\t\t8 -> a8 = value\n\t\t\t9 -> a9 = value\n\t\t\t10 -> a10 = value\n\t\t\t11 -> a11 = value\n\t\t\t12 -> a12 = value\n\t\t\t13 -> a13 = value\n\t\t\t14 -> a14 = value\n\t\t\t15 -> a15 = value\n\t\t}\n\t}\n\n\tdef add(int value){\n\t\tif (size >= 16){\n\t\t\texception.illegalOperation(\"Cannot add to an intarray of size 16\")\n\t\t}\n\t\tset(size, value)\n\t\tsize ++\n\t}\n\t\n\tdef map(function<(int),(int)> func){\n\t\tfor(int i = 0;i < size;i++){\n\t\t\tint cur = get(i)\n\t\t\tset(i, func(cur))\n\t\t}\n\t}\n\tdef filter(function<(int),(bool)> func){\n\t\tint nsize = size\n\t\tint j = 0\n\t\tfor(int i = 0;i < size;i++){\n\t\t\tint cur = get(i)\n\t\t\tbool val = func(cur)\n\t\t\tif (val){\n\t\t\t\tset(j, func(cur))\n\t\t\t\tj++\n\t\t\t}\n\t\t\tif(!val){\n\t\t\t\tnsize-=1\n\t\t\t}\n\t\t}\n\t\tsize = nsize\n\t}\n\n\tdef clear(){\n\t\tsize = 0\n\t}\n\t\n\tdef isEmpty():bool{\n\t\tif (size == 0){\n\t\t\treturn(true)\n\t\t}\n\t\tif (size > 0){\n\t\t\treturn(false)\n\t\t}\n\t}\n\t\n\tdef contain(int value):bool{\n\t\tbool ret = false\n\t\tif (a0 == value && size >= 1){\n\t\t\tret = true\n\t\t}\n\t\tif (a1 == value && size >= 2){\n\t\t\tret = true\n\t\t}\n\t\tif (a2 == value && size >= 3){\n\t\t\tret = true\n\t\t}\n\t\tif (a3 == value && size >= 4){\n\t\t\tret = true\n\t\t}\n\t\tif (a4 == value && size >= 5){\n\t\t\tret = true\n\t\t}\n\t\tif (a5 == value && size >= 6){\n\t\t\tret = true\n\t\t}\n\t\tif (a6 == value && size >= 7){\n\t\t\tret = true\n\t\t}\n\t\tif (a7 == value && size >= 8){\n\t\t\tret = true\n\t\t}\n\t\tif (a8 == value && size >= 9){\n\t\t\tret = true\n\t\t}\n\t\tif (a9 == value && size >= 10){\n\t\t\tret = true\n\t\t}\n\t\tif (a10 == value && size >= 11){\n\t\t\tret = true\n\t\t}\n\t\tif (a11 == value && size >= 12){\n\t\t\tret = true\n\t\t}\n\t\tif (a12 == value && size >= 13){\n\t\t\tret = true\n\t\t}\n\t\tif (a13 == value && size >= 14){\n\t\t\tret = true\n\t\t}\n\t\tif (a14 == value && size >= 15){\n\t\t\tret = true\n\t\t}\n\t\tif (a15 == value && size == 16){\n\t\t\tret = true\n\t\t}\n\t\treturn(ret)\n\t}\n}","index":0},{"name":"intarray2d","content":"package array\n\nstruct intarray2d16{\n\tintarray16 a0, a1,a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15\n\tint size\n\tint size2\n\t\n\tdef __init__(int size, int size2, intarray16 defVal = intarray16(16)){\n\t\texception.intArgCheck(size, 0, 17)\n\t\texception.intArgCheck(size2, 0, 17)\n\t\tthis.size = size\n\t\tthis.size2 = size2\n\t\ta0, a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15 = defVal\n\t}\n\t\n\tdef get(int i, int j):int{\n\t\tif (i < 0){\n\t\t\texception.indexOutOfBound(i, size)\n\t\t}\n\t\tif (i >= size){\n\t\t\texception.indexOutOfBound(i, size)\n\t\t}\n\t\tswitch(i){\n\t\t\t0 -> return(a0.get(j))\n\t\t\t1 -> return(a1.get(j))\n\t\t\t2 -> return(a2.get(j))\n\t\t\t3 -> return(a3.get(j))\n\t\t\t4 -> return(a4.get(j))\n\t\t\t5 -> return(a5.get(j))\n\t\t\t6 -> return(a6.get(j))\n\t\t\t7 -> return(a7.get(j))\n\t\t\t8 -> return(a8.get(j))\n\t\t\t9 -> return(a9.get(j))\n\t\t\t10 -> return(a10.get(j))\n\t\t\t11 -> return(a11.get(j))\n\t\t\t12 -> return(a12.get(j))\n\t\t\t13 -> return(a13.get(j))\n\t\t\t14 -> return(a14.get(j))\n\t\t\t15 -> return(a15.get(j))\n\t\t}\n\t}\n\t\n\tdef set(int i, int j, int value){\n\t\tif (i < 0){\n\t\t\texception.indexOutOfBound(i, size)\n\t\t}\n\t\tif (i >= size){\n\t\t\texception.indexOutOfBound(i, size)\n\t\t}\n\t\tswitch(i){\n\t\t\t0 -> a0.set(j,value)\n\t\t\t1 -> a1.set(j,value)\n\t\t\t2 -> a2.set(j,value)\n\t\t\t3 -> a3.set(j,value)\n\t\t\t4 -> a4.set(j,value)\n\t\t\t5 -> a5.set(j,value)\n\t\t\t6 -> a6.set(j,value)\n\t\t\t7 -> a7.set(j,value)\n\t\t\t8 -> a8.set(j,value)\n\t\t\t9 -> a9.set(j,value)\n\t\t\t10 -> a10.set(j,value)\n\t\t\t11 -> a11.set(j,value)\n\t\t\t12 -> a12.set(j,value)\n\t\t\t13 -> a13.set(j,value)\n\t\t\t14 -> a14.set(j,value)\n\t\t\t15 -> a15.set(j,value)\n\t\t}\n\t}\n\t\n\tdef map(function<(int),(int)> func){\n\t\tfor(int i = 0;i < size;i++){\n\t\t\tfor(int j = 0;j < size;j++){\n\t\t\t\tint cur = get(i, j)\n\t\t\t\tint output = func(cur)\n\t\t\t\tset(i, j, output)\n\t\t\t}\n\t\t}\n\t}\n\n\tdef clear(){\n\t\tsize = 0\n\t}\n\t\n\tdef isEmpty():bool{\n\t\tif (size == 0){\n\t\t\treturn(true)\n\t\t}\n\t\tif (size > 0){\n\t\t\treturn(false)\n\t\t}\n\t}\n}","index":0},{"name":"intarray256","content":"package array\n\nstruct intarray256{\n\tintarray16 a0, a1,a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15\n\tint size\n\t\n\tdef __init__(int size, intarray16 defVal = intarray16(16)){\n\t\texception.intArgCheck(size, 0, 257)\n\t\tthis.size = size\n\t\ta0, a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15 = defVal\n\t}\n\t\n\tdef get(int index):int{\n\t\tif (index < 0){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tif (index >= size){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\n\t\tint i = index / 16\n\t\tint j = index % 16\n\t\tswitch(i){\n\t\t\t0 -> return(a0.get(j))\n\t\t\t1 -> return(a1.get(j))\n\t\t\t2 -> return(a2.get(j))\n\t\t\t3 -> return(a3.get(j))\n\t\t\t4 -> return(a4.get(j))\n\t\t\t5 -> return(a5.get(j))\n\t\t\t6 -> return(a6.get(j))\n\t\t\t7 -> return(a7.get(j))\n\t\t\t8 -> return(a8.get(j))\n\t\t\t9 -> return(a9.get(j))\n\t\t\t10 -> return(a10.get(j))\n\t\t\t11 -> return(a11.get(j))\n\t\t\t12 -> return(a12.get(j))\n\t\t\t13 -> return(a13.get(j))\n\t\t\t14 -> return(a14.get(j))\n\t\t\t15 -> return(a15.get(j))\n\t\t}\n\t}\n\t\n\tdef set(int index, int value){\n\t\tif (index < 0){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tif (index >= size){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\n\t\tint i = index / 16\n\t\tint j = index % 16\n\t\tswitch(i){\n\t\t\t0 -> a0.set(j,value)\n\t\t\t1 -> a1.set(j,value)\n\t\t\t2 -> a2.set(j,value)\n\t\t\t3 -> a3.set(j,value)\n\t\t\t4 -> a4.set(j,value)\n\t\t\t5 -> a5.set(j,value)\n\t\t\t6 -> a6.set(j,value)\n\t\t\t7 -> a7.set(j,value)\n\t\t\t8 -> a8.set(j,value)\n\t\t\t9 -> a9.set(j,value)\n\t\t\t10 -> a10.set(j,value)\n\t\t\t11 -> a11.set(j,value)\n\t\t\t12 -> a12.set(j,value)\n\t\t\t13 -> a13.set(j,value)\n\t\t\t14 -> a14.set(j,value)\n\t\t\t15 -> a15.set(j,value)\n\t\t}\n\t}\n\n\tdef add(int value){\n\t\tif (size >= 256){\n\t\t\texception.illegalOperation(\"Cannot add to an intarray256 of size 256\")\n\t\t}\n\t\tset(size, value)\n\t\tsize ++\n\t}\n\n\tdef clear(){\n\t\tsize = 0\n\t}\n\t\n\tdef isEmpty():bool{\n\t\tif (size == 0){\n\t\t\treturn(true)\n\t\t}\n\t\tif (size > 0){\n\t\t\treturn(false)\n\t\t}\n\t}\n\t\n\tdef map(function<(int),(int)> func){\n\t\tfor(int i = 0;i < size;i++){\n\t\t\t\tint cur = get(i)\n\t\t\t\tint output = func(cur)\n\t\t\t\tset(i, output)\n\t\t}\n\t}\n}\n","index":0},{"name":"floatarray","content":"package array\n\nstruct floatarray16{\n\tfloat a0, a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15\n\tint size\n\n\tdef __init__(int size, float defVal = 0){\n\t\texception.intArgCheck(size, 0, 17)\n\t\tthis.size = size\n\t\ta0, a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15 = defVal\n\t}\n\t\n\tdef get(int index):float{\n\t\tif (index < 0){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tif (index >= size){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\n\t\tswitch(index){\n\t\t\t0 -> return(a0)\n\t\t\t1 -> return(a1)\n\t\t\t2 -> return(a2)\n\t\t\t3 -> return(a3)\n\t\t\t4 -> return(a4)\n\t\t\t5 -> return(a5)\n\t\t\t6 -> return(a6)\n\t\t\t7 -> return(a7)\n\t\t\t8 -> return(a8)\n\t\t\t9 -> return(a9)\n\t\t\t10 -> return(a10)\n\t\t\t11 -> return(a11)\n\t\t\t12 -> return(a12)\n\t\t\t13 -> return(a13)\n\t\t\t14 -> return(a14)\n\t\t\t15 -> return(a15)\n\t\t}\n\t}\n\t\n\tdef set(int index, float value){\n\t\tif (index < 0){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tif (index >= size){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\n\t\tswitch(index){\n\t\t\t0 -> a0 = value\n\t\t\t1 -> a1 = value\n\t\t\t2 -> a2 = value\n\t\t\t3 -> a3 = value\n\t\t\t4 -> a4 = value\n\t\t\t5 -> a5 = value\n\t\t\t6 -> a6 = value\n\t\t\t7 -> a7 = value\n\t\t\t8 -> a8 = value\n\t\t\t9 -> a9 = value\n\t\t\t10 -> a10 = value\n\t\t\t11 -> a11 = value\n\t\t\t12 -> a12 = value\n\t\t\t13 -> a13 = value\n\t\t\t14 -> a14 = value\n\t\t\t15 -> a15 = value\n\t\t}\n\t}\n\n\tdef add(float value){\n\t\tif (size >= 16){\n\t\t\texception.illegalOperation(\"Cannot add to an floatarray of size 16\")\n\t\t}\n\t\tset(size, value)\n\t\tsize ++\n\t}\n\n\tdef map(function<(float),(float)> func){\n\t\tfor(int i = 0;i < size;i++){\n\t\t\tfloat cur = get(i)\n\t\t\tset(i, func(cur))\n\t\t}\n\t}\n\tdef filter(function<(float),(bool)> func){\n\t\tint nsize = size\n\t\tint j = 0\n\t\tfor(int i = 0;i < size;i++){\n\t\t\tfloat cur = get(i)\n\t\t\tbool val = func(cur)\n\t\t\tif (val){\n\t\t\t\tset(j, func(cur))\n\t\t\t\tj++\n\t\t\t}\n\t\t\tif(!val){\n\t\t\t\tnsize-=1\n\t\t\t}\n\t\t}\n\t\tsize = nsize\n\t}\n\t\n\tdef clear(){\n\t\tsize = 0\n\t}\n\t\n\tdef isEmpty():bool{\n\t\tif (size == 0){\n\t\t\treturn(true)\n\t\t}\n\t\tif (size > 0){\n\t\t\treturn(false)\n\t\t}\n\t}\n\t\n\tdef contain(float value):bool{\n\t\tbool ret = false\n\t\tif (a0 == value && size >= 1){\n\t\t\tret = true\n\t\t}\n\t\tif (a1 == value && size >= 2){\n\t\t\tret = true\n\t\t}\n\t\tif (a2 == value && size >= 3){\n\t\t\tret = true\n\t\t}\n\t\tif (a3 == value && size >= 4){\n\t\t\tret = true\n\t\t}\n\t\tif (a4 == value && size >= 5){\n\t\t\tret = true\n\t\t}\n\t\tif (a5 == value && size >= 6){\n\t\t\tret = true\n\t\t}\n\t\tif (a6 == value && size >= 7){\n\t\t\tret = true\n\t\t}\n\t\tif (a7 == value && size >= 8){\n\t\t\tret = true\n\t\t}\n\t\tif (a8 == value && size >= 9){\n\t\t\tret = true\n\t\t}\n\t\tif (a9 == value && size >= 10){\n\t\t\tret = true\n\t\t}\n\t\tif (a10 == value && size >= 11){\n\t\t\tret = true\n\t\t}\n\t\tif (a11 == value && size >= 12){\n\t\t\tret = true\n\t\t}\n\t\tif (a12 == value && size >= 13){\n\t\t\tret = true\n\t\t}\n\t\tif (a13 == value && size >= 14){\n\t\t\tret = true\n\t\t}\n\t\tif (a14 == value && size >= 15){\n\t\t\tret = true\n\t\t}\n\t\tif (a15 == value && size == 16){\n\t\t\tret = true\n\t\t}\n\t\treturn(ret)\n\t}\n\n}","index":0},{"name":"floatarray2d","content":"package array\n\nstruct floatarray2d16{\n\tfloatarray16 a0, a1,a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15\n\tint size\n\tint size2\n\t\n\tdef __init__(int size, int size2, floatarray16 defVal = floatarray16(16)){\n\t\texception.intArgCheck(size, 0, 17)\n\t\texception.intArgCheck(size2, 0, 17)\n\t\tthis.size = size\n\t\tthis.size2 = size2\n\t\ta0, a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15 = defVal\n\t}\n\t\n\tdef get(int i, int j):float{\n\t\tif (i < 0){\n\t\t\texception.indexOutOfBound(i, size)\n\t\t}\n\t\tif (i >= size){\n\t\t\texception.indexOutOfBound(i, size)\n\t\t}\n\n\t\tswitch(i){\n\t\t\t0 -> return(a0.get(j))\n\t\t\t1 -> return(a1.get(j))\n\t\t\t2 -> return(a2.get(j))\n\t\t\t3 -> return(a3.get(j))\n\t\t\t4 -> return(a4.get(j))\n\t\t\t5 -> return(a5.get(j))\n\t\t\t6 -> return(a6.get(j))\n\t\t\t7 -> return(a7.get(j))\n\t\t\t8 -> return(a8.get(j))\n\t\t\t9 -> return(a9.get(j))\n\t\t\t10 -> return(a10.get(j))\n\t\t\t11 -> return(a11.get(j))\n\t\t\t12 -> return(a12.get(j))\n\t\t\t13 -> return(a13.get(j))\n\t\t\t14 -> return(a14.get(j))\n\t\t\t15 -> return(a15.get(j))\n\t\t}\n\t}\n\t\n\tdef set(int i, int j, float value){\n\t\tif (i < 0){\n\t\t\texception.indexOutOfBound(i, size)\n\t\t}\n\t\tif (i >= size){\n\t\t\texception.indexOutOfBound(i, size)\n\t\t}\n\n\t\tswitch(i){\n\t\t\t0 -> a0.set(j,value)\n\t\t\t1 -> a1.set(j,value)\n\t\t\t2 -> a2.set(j,value)\n\t\t\t3 -> a3.set(j,value)\n\t\t\t4 -> a4.set(j,value)\n\t\t\t5 -> a5.set(j,value)\n\t\t\t6 -> a6.set(j,value)\n\t\t\t7 -> a7.set(j,value)\n\t\t\t8 -> a8.set(j,value)\n\t\t\t9 -> a9.set(j,value)\n\t\t\t10 -> a10.set(j,value)\n\t\t\t11 -> a11.set(j,value)\n\t\t\t12 -> a12.set(j,value)\n\t\t\t13 -> a13.set(j,value)\n\t\t\t14 -> a14.set(j,value)\n\t\t\t15 -> a15.set(j,value)\n\t\t}\n\t}\n\t\n\tdef clear(){\n\t\tsize = 0\n\t}\n\t\n\tdef isEmpty():bool{\n\t\tif (size == 0){\n\t\t\treturn(true)\n\t\t}\n\t\tif (size > 0){\n\t\t\treturn(false)\n\t\t}\n\t}\n\t\n\tdef map(function<(float),(float)> func){\n\t\tfor(int i = 0;i < size;i++){\n\t\t\tfor(int j = 0;j < size;j++){\n\t\t\t\tfloat cur = get(i, j)\n\t\t\t\tfloat output = func(cur)\n\t\t\t\tset(i, j, output)\n\t\t\t}\n\t\t}\n\t}\n}\n","index":0},{"name":"floatarray256","content":"package array\n\nstruct floatarray256{\n\tfloatarray16 a0, a1,a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15\n\tint size\n\t\n\tdef __init__(int size, floatarray16 defVal = floatarray16(16)){\n\t\texception.intArgCheck(size, 0, 17)\n\t\texception.intArgCheck(size, 0, 17)\n\t\tthis.size = size\n\t\ta0, a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15 = defVal\n\t}\n\t\n\tdef get(int index):float{\n\t\tif (index < 0){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tif (index >= size){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\n\t\tint i = index / 16\n\t\tint j = index % 16\n\t\tswitch(i){\n\t\t\t0 -> return(a0.get(j))\n\t\t\t1 -> return(a1.get(j))\n\t\t\t2 -> return(a2.get(j))\n\t\t\t3 -> return(a3.get(j))\n\t\t\t4 -> return(a4.get(j))\n\t\t\t5 -> return(a5.get(j))\n\t\t\t6 -> return(a6.get(j))\n\t\t\t7 -> return(a7.get(j))\n\t\t\t8 -> return(a8.get(j))\n\t\t\t9 -> return(a9.get(j))\n\t\t\t10 -> return(a10.get(j))\n\t\t\t11 -> return(a11.get(j))\n\t\t\t12 -> return(a12.get(j))\n\t\t\t13 -> return(a13.get(j))\n\t\t\t14 -> return(a14.get(j))\n\t\t\t15 -> return(a15.get(j))\n\t\t}\n\t}\n\t\n\tdef set(int index, float value){\n\t\tif (index < 0){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tif (index >= size){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\n\t\tint i = index / 16\n\t\tint j = index % 16\n\t\tswitch(i){\n\t\t\t0 -> a0.set(j,value)\n\t\t\t1 -> a1.set(j,value)\n\t\t\t2 -> a2.set(j,value)\n\t\t\t3 -> a3.set(j,value)\n\t\t\t4 -> a4.set(j,value)\n\t\t\t5 -> a5.set(j,value)\n\t\t\t6 -> a6.set(j,value)\n\t\t\t7 -> a7.set(j,value)\n\t\t\t8 -> a8.set(j,value)\n\t\t\t9 -> a9.set(j,value)\n\t\t\t10 -> a10.set(j,value)\n\t\t\t11 -> a11.set(j,value)\n\t\t\t12 -> a12.set(j,value)\n\t\t\t13 -> a13.set(j,value)\n\t\t\t14 -> a14.set(j,value)\n\t\t\t15 -> a15.set(j,value)\n\t\t}\n\t}\n\n\tdef add(float value){\n\t\tif (size >= 256){\n\t\t\texception.illegalOperation(\"Cannot add to an floatarray256 of size 256\")\n\t\t}\n\t\tset(size, value)\n\t\tsize ++\n\t}\n\n\tdef clear(){\n\t\tsize = 0\n\t}\n\t\n\tdef isEmpty():bool{\n\t\tif (size == 0){\n\t\t\treturn(true)\n\t\t}\n\t\tif (size > 0){\n\t\t\treturn(false)\n\t\t}\n\t}\n\t\n\tdef map(function<(float),(float)> func){\n\t\tfor(int i = 0;i < size;i++){\n\t\t\t\tfloat cur = get(i)\n\t\t\t\tfloat output = func(cur)\n\t\t\t\tset(i, output)\n\t\t}\n\t}\n}\n\n","index":0},{"name":"vectorarray","content":"package array\n\nstruct vector3array16{\n\tvector3 a0, a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15\n\tint size\n\n\tdef __init__(int size, vector3 defVal = vector3(0,0,0)){\n\t\texception.intArgCheck(size, 0, 17)\n\t\tthis.size = size\n\t\ta0, a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15 = defVal\n\t}\n\t\n\tdef get(int index):vector3{\n\t\tif (index < 0){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tif (index >= size){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\n\t\tswitch(index){\n\t\t\t0 -> return(a0)\n\t\t\t1 -> return(a1)\n\t\t\t2 -> return(a2)\n\t\t\t3 -> return(a3)\n\t\t\t4 -> return(a4)\n\t\t\t5 -> return(a5)\n\t\t\t6 -> return(a6)\n\t\t\t7 -> return(a7)\n\t\t\t8 -> return(a8)\n\t\t\t9 -> return(a9)\n\t\t\t10 -> return(a10)\n\t\t\t11 -> return(a11)\n\t\t\t12 -> return(a12)\n\t\t\t13 -> return(a13)\n\t\t\t14 -> return(a14)\n\t\t\t15 -> return(a15)\n\t\t}\n\t}\n\t\n\tdef set(int index, vector3 value){\n\t\tif (index < 0){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tif (index >= size){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\n\t\tswitch(index){\n\t\t\t0 -> a0 = value\n\t\t\t1 -> a1 = value\n\t\t\t2 -> a2 = value\n\t\t\t3 -> a3 = value\n\t\t\t4 -> a4 = value\n\t\t\t5 -> a5 = value\n\t\t\t6 -> a6 = value\n\t\t\t7 -> a7 = value\n\t\t\t8 -> a8 = value\n\t\t\t9 -> a9 = value\n\t\t\t10 -> a10 = value\n\t\t\t11 -> a11 = value\n\t\t\t12 -> a12 = value\n\t\t\t13 -> a13 = value\n\t\t\t14 -> a14 = value\n\t\t\t15 -> a15 = value\n\t\t}\n\t}\n\n\tdef add(vector3 value){\n\t\tif (size >= 16){\n\t\t\texception.illegalOperation(\"Cannot add to an vectorarray of size 16\")\n\t\t}\n\t\tset(size, value)\n\t\tsize ++\n\t}\n\n\tdef map(function<(vector3),(vector3)> func){\n\t\tfor(int i = 0;i < size;i++){\n\t\t\tvector3 cur = get(i)\n\t\t\tvector3 output = func(cur)\n\t\t\tset(i, output)\n\t\t}\n\t}\n\tdef filter(function<(vector3),(bool)> func){\n\t\tint nsize = size\n\t\tint j = 0\n\t\tfor(int i = 0;i < size;i++){\n\t\t\tvector3 cur = get(i)\n\t\t\tbool val = func(cur)\n\t\t\tif (val){\n\t\t\t\tset(j, func(cur))\n\t\t\t\tj++\n\t\t\t}\n\t\t\tif(!val){\n\t\t\t\tnsize-=1\n\t\t\t}\n\t\t}\n\t\tsize = nsize\n\t}\n\n\tdef clear(){\n\t\tsize = 0\n\t}\n\t\n\tdef isEmpty():bool{\n\t\tif (size == 0){\n\t\t\treturn(true)\n\t\t}\n\t\tif (size > 0){\n\t\t\treturn(false)\n\t\t}\n\t}\n}\n","index":0},{"name":"stringarray","content":"package array\n\nstruct stringarray16{\n\tstring a0, a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15\n\tint size\n\t\n\tdef __init__(int size, string defVal = 0){\n\t\texception.intArgCheck(size, 0, 17)\n\t\tthis.size = size\n\t\ta0, a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15 = defVal\n\t}\n\t\n\tdef get(int index):string{\n\t\tif (index < 0){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tif (index >= size){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tswitch(index){\n\t\t\t0 -> return(a0)\n\t\t\t1 -> return(a1)\n\t\t\t2 -> return(a2)\n\t\t\t3 -> return(a3)\n\t\t\t4 -> return(a4)\n\t\t\t5 -> return(a5)\n\t\t\t6 -> return(a6)\n\t\t\t7 -> return(a7)\n\t\t\t8 -> return(a8)\n\t\t\t9 -> return(a9)\n\t\t\t10 -> return(a10)\n\t\t\t11 -> return(a11)\n\t\t\t12 -> return(a12)\n\t\t\t13 -> return(a13)\n\t\t\t14 -> return(a14)\n\t\t\t15 -> return(a15)\n\t\t}\n\t}\n\t\n\tdef set(int index, string value){\n\t\tif (index < 0){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tif (index >= size){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tswitch(index){\n\t\t\t0 -> a0 = value\n\t\t\t1 -> a1 = value\n\t\t\t2 -> a2 = value\n\t\t\t3 -> a3 = value\n\t\t\t4 -> a4 = value\n\t\t\t5 -> a5 = value\n\t\t\t6 -> a6 = value\n\t\t\t7 -> a7 = value\n\t\t\t8 -> a8 = value\n\t\t\t9 -> a9 = value\n\t\t\t10 -> a10 = value\n\t\t\t11 -> a11 = value\n\t\t\t12 -> a12 = value\n\t\t\t13 -> a13 = value\n\t\t\t14 -> a14 = value\n\t\t\t15 -> a15 = value\n\t\t}\n\t}\n\n\tdef add(string value){\n\t\tif (size >= 16){\n\t\t\texception.illegalOperation(\"Cannot add to an stringarray of size 16\")\n\t\t}\n\t\tset(size, value)\n\t\tsize ++\n\t}\n\t\n\tdef map(function<(string),(string)> func){\n\t\tfor(int i = 0;i < size;i++){\n\t\t\tstring cur = get(i)\n\t\t\tset(i, func(cur))\n\t\t}\n\t}\n\tdef filter(function<(string),(bool)> func){\n\t\tint nsize = size\n\t\tint j = 0\n\t\tfor(int i = 0;i < size;i++){\n\t\t\tstring cur = get(i)\n\t\t\tbool val = func(cur)\n\t\t\tif (val){\n\t\t\t\tset(j, func(cur))\n\t\t\t\tj++\n\t\t\t}\n\t\t\tif(!val){\n\t\t\t\tnsize-=1\n\t\t\t}\n\t\t}\n\t\tsize = nsize\n\t}\n\n\tdef clear(){\n\t\tsize = 0\n\t}\n\t\n\tdef isEmpty():bool{\n\t\tif (size == 0){\n\t\t\treturn(true)\n\t\t}\n\t\tif (size > 0){\n\t\t\treturn(false)\n\t\t}\n\t}\n\t\n\tdef contain(string value):bool{\n\t\tbool ret = false\n\t\tif (a0 == value && size >= 1){\n\t\t\tret = true\n\t\t}\n\t\tif (a1 == value && size >= 2){\n\t\t\tret = true\n\t\t}\n\t\tif (a2 == value && size >= 3){\n\t\t\tret = true\n\t\t}\n\t\tif (a3 == value && size >= 4){\n\t\t\tret = true\n\t\t}\n\t\tif (a4 == value && size >= 5){\n\t\t\tret = true\n\t\t}\n\t\tif (a5 == value && size >= 6){\n\t\t\tret = true\n\t\t}\n\t\tif (a6 == value && size >= 7){\n\t\t\tret = true\n\t\t}\n\t\tif (a7 == value && size >= 8){\n\t\t\tret = true\n\t\t}\n\t\tif (a8 == value && size >= 9){\n\t\t\tret = true\n\t\t}\n\t\tif (a9 == value && size >= 10){\n\t\t\tret = true\n\t\t}\n\t\tif (a10 == value && size >= 11){\n\t\t\tret = true\n\t\t}\n\t\tif (a11 == value && size >= 12){\n\t\t\tret = true\n\t\t}\n\t\tif (a12 == value && size >= 13){\n\t\t\tret = true\n\t\t}\n\t\tif (a13 == value && size >= 14){\n\t\t\tret = true\n\t\t}\n\t\tif (a14 == value && size >= 15){\n\t\t\tret = true\n\t\t}\n\t\tif (a15 == value && size == 16){\n\t\t\tret = true\n\t\t}\n\t\treturn(ret)\n\t}\n}\n","index":0},{"name":"functionarray","content":"package array\n\nstruct functionarray16{\n\tfunction a0, a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15\n\tint size\n\t\n\tdef __init__(int size){\n\t\texception.intArgCheck(size, 0, 17)\n\t\tthis.size = size\n\t}\n\t\n\tdef get(int index):function{\n\t\tif (index < 0){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tif (index >= size){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tswitch(index){\n\t\t\t0 -> return(a0)\n\t\t\t1 -> return(a1)\n\t\t\t2 -> return(a2)\n\t\t\t3 -> return(a3)\n\t\t\t4 -> return(a4)\n\t\t\t5 -> return(a5)\n\t\t\t6 -> return(a6)\n\t\t\t7 -> return(a7)\n\t\t\t8 -> return(a8)\n\t\t\t9 -> return(a9)\n\t\t\t10 -> return(a10)\n\t\t\t11 -> return(a11)\n\t\t\t12 -> return(a12)\n\t\t\t13 -> return(a13)\n\t\t\t14 -> return(a14)\n\t\t\t15 -> return(a15)\n\t\t}\n\t}\n\t\n\tdef set(int index, function value){\n\t\tif (index < 0){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tif (index >= size){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tswitch(index){\n\t\t\t0 -> a0 = value\n\t\t\t1 -> a1 = value\n\t\t\t2 -> a2 = value\n\t\t\t3 -> a3 = value\n\t\t\t4 -> a4 = value\n\t\t\t5 -> a5 = value\n\t\t\t6 -> a6 = value\n\t\t\t7 -> a7 = value\n\t\t\t8 -> a8 = value\n\t\t\t9 -> a9 = value\n\t\t\t10 -> a10 = value\n\t\t\t11 -> a11 = value\n\t\t\t12 -> a12 = value\n\t\t\t13 -> a13 = value\n\t\t\t14 -> a14 = value\n\t\t\t15 -> a15 = value\n\t\t}\n\t}\n\n\tdef add(function value){\n\t\tif (size >= 16){\n\t\t\texception.illegalOperation(\"Cannot add to an functionarray of size 16\")\n\t\t}\n\t\tset(size, value)\n\t\tsize ++\n\t}\n\t\n\tdef clear(){\n\t\tsize = 0\n\t}\n\t\n\tdef isEmpty():bool{\n\t\tif (size == 0){\n\t\t\treturn(true)\n\t\t}\n\t\tif (size > 0){\n\t\t\treturn(false)\n\t\t}\n\t}\n}\n","index":0},{"name":"array16","content":"package array\n\nstruct array16<type>{\n\ttype a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15\n\tint size\n\n\tdef __init__(int size){\n\t\texception.intArgCheck(size, 0, 17)\n\t\tthis.size = size\n\t}\n\t\n\tdef get(int index):type{\n\t\tif (index < 0){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tif (index >= size){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\n\t\tswitch(index){\n\t\t\t0 -> return(a0)\n\t\t\t1 -> return(a1)\n\t\t\t2 -> return(a2)\n\t\t\t3 -> return(a3)\n\t\t\t4 -> return(a4)\n\t\t\t5 -> return(a5)\n\t\t\t6 -> return(a6)\n\t\t\t7 -> return(a7)\n\t\t\t8 -> return(a8)\n\t\t\t9 -> return(a9)\n\t\t\t10 -> return(a10)\n\t\t\t11 -> return(a11)\n\t\t\t12 -> return(a12)\n\t\t\t13 -> return(a13)\n\t\t\t14 -> return(a14)\n\t\t\t15 -> return(a15)\n\t\t}\n\t}\n\t\n\tdef set(int index, type value){\n\t\tif (index < 0){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\t\tif (index >= size){\n\t\t\texception.indexOutOfBound(index, size)\n\t\t}\n\n\t\tswitch(index){\n\t\t\t0 -> a0 = value\n\t\t\t1 -> a1 = value\n\t\t\t2 -> a2 = value\n\t\t\t3 -> a3 = value\n\t\t\t4 -> a4 = value\n\t\t\t5 -> a5 = value\n\t\t\t6 -> a6 = value\n\t\t\t7 -> a7 = value\n\t\t\t8 -> a8 = value\n\t\t\t9 -> a9 = value\n\t\t\t10 -> a10 = value\n\t\t\t11 -> a11 = value\n\t\t\t12 -> a12 = value\n\t\t\t13 -> a13 = value\n\t\t\t14 -> a14 = value\n\t\t\t15 -> a15 = value\n\t\t}\n\t}\n\n\tdef add(type value){\n\t\tif (size >= 16){\n\t\t\texception.illegalOperation(\"Cannot add to an vectorarray of size 16\")\n\t\t}\n\t\tset(size, value)\n\t\tsize ++\n\t}\n\n\tdef map(function<(type),(type)> func){\n\t\tfor(int i = 0;i < size;i++){\n\t\t\ttype cur = get(i)\n\t\t\ttype output = func(cur)\n\t\t\tset(i, output)\n\t\t}\n\t}\n\tdef filter(function<(type),(bool)> func){\n\t\tint nsize = size\n\t\tint j = 0\n\t\tfor(int i = 0;i < size;i++){\n\t\t\ttype cur = get(i)\n\t\t\tbool val = func(cur)\n\t\t\tif (val){\n\t\t\t\tset(j, func(cur))\n\t\t\t\tj++\n\t\t\t}\n\t\t\tif(!val){\n\t\t\t\tnsize-=1\n\t\t\t}\n\t\t}\n\t\tsize = nsize\n\t}\n\n\tdef clear(){\n\t\tsize = 0\n\t}\n\t\n\tdef isEmpty():bool{\n\t\tif (size == 0){\n\t\t\treturn(true)\n\t\t}\n\t\tif (size > 0){\n\t\t\treturn(false)\n\t\t}\n\t}\n}\n\n","index":0}],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":[]},"tick":{"values":[]}}},"version":{"major":1,"minor":0,"patch":0,"build":3}}