{"projectName":"stack","datapackDirectory":null,"offuscate":false,"files":[{"name":"import","content":"import vector\nimport exception","index":0},{"name":"intstack","content":"package stack\n\nstruct intstack{\n\tint a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15\n\tint count\n\tdef __init__(){\n\t\tcount = 0\n\t}\n\t\n\tdef push(int value){\n\t\tif (count == 16){\n\t\t\texception.stackOverflow(\"Int Stack is full.\")\n\t\t}\n\t\tswitch(count){\n\t\t\t0 -> a0 = value\n\t\t\t1 -> a1 = value\n\t\t\t2 -> a2 = value\n\t\t\t3 -> a3 = value\n\t\t\t4 -> a4 = value\n\t\t\t5 -> a5 = value\n\t\t\t6 -> a6 = value\n\t\t\t7 -> a7 = value\n\t\t\t8 -> a8 = value\n\t\t\t9 -> a9 = value\n\t\t\t10 -> a10 = value\n\t\t\t11 -> a11 = value\n\t\t\t12 -> a12 = value\n\t\t\t13 -> a13 = value\n\t\t\t14 -> a14 = value\n\t\t\t15 -> a15 = value\n\t\t}\n\t\tcount ++\n\t}\n\t\n\tdef peek():int{\n\t\tif (count <= 0){\n\t\t\texception.stackUnderflow(\"Int Stack is empty.\")\n\t\t}\n\t\t\n\t\tswitch(count){\n\t\t\t0 -> return(a0)\n\t\t\t1 -> return(a1)\n\t\t\t2 -> return(a2)\n\t\t\t3 -> return(a3)\n\t\t\t4 -> return(a4)\n\t\t\t5 -> return(a5)\n\t\t\t6 -> return(a6)\n\t\t\t7 -> return(a7)\n\t\t\t8 -> return(a8)\n\t\t\t9 -> return(a9)\n\t\t\t10 -> return(a10)\n\t\t\t11 -> return(a11)\n\t\t\t12 -> return(a12)\n\t\t\t13 -> return(a13)\n\t\t\t14 -> return(a14)\n\t\t\t15 -> return(a15)\n\t\t}\n\t}\n\t\n\tdef pop():int{\n\t\tif (count <= 0){\n\t\t\texception.stackUnderflow(\"Int Stack is empty.\")\n\t\t}\n\t\tint v = peek()\n\t\tcount --\n\t\treturn(v)\n\t}\n\t\n\tdef clear(){\n\t\tcount = 0\n\t}\n\t\n\tdef isEmpty():bool{\n\t\tif (count == 0){\n\t\t\treturn(true)\n\t\t}\n\t\tif (count > 0){\n\t\t\treturn(false)\n\t\t}\n\t}\n\t\n\tdef contain(int value):bool{\n\t\tbool ret = false\n\t\tif (a0 == value && count >= 1){\n\t\t\tret = true\n\t\t}\n\t\tif (a1 == value && count >= 2){\n\t\t\tret = true\n\t\t}\n\t\tif (a2 == value && count >= 3){\n\t\t\tret = true\n\t\t}\n\t\tif (a3 == value && count >= 4){\n\t\t\tret = true\n\t\t}\n\t\tif (a4 == value && count >= 5){\n\t\t\tret = true\n\t\t}\n\t\tif (a5 == value && count >= 6){\n\t\t\tret = true\n\t\t}\n\t\tif (a6 == value && count >= 7){\n\t\t\tret = true\n\t\t}\n\t\tif (a7 == value && count >= 8){\n\t\t\tret = true\n\t\t}\n\t\tif (a8 == value && count >= 9){\n\t\t\tret = true\n\t\t}\n\t\tif (a9 == value && count >= 10){\n\t\t\tret = true\n\t\t}\n\t\tif (a10 == value && count >= 11){\n\t\t\tret = true\n\t\t}\n\t\tif (a11 == value && count >= 12){\n\t\t\tret = true\n\t\t}\n\t\tif (a12 == value && count >= 13){\n\t\t\tret = true\n\t\t}\n\t\tif (a13 == value && count >= 14){\n\t\t\tret = true\n\t\t}\n\t\tif (a14 == value && count >= 15){\n\t\t\tret = true\n\t\t}\n\t\tif (a15 == value && count == 16){\n\t\t\tret = true\n\t\t}\n\t\treturn(ret)\n\t}\n}\n","index":0},{"name":"floatstack","content":"package stack\n\nstruct floatstack{\n\tfloat a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15\n\tint count\n\tdef __init__(){\n\t\tcount = 0\n\t}\n\t\n\tdef push(float value){\n\t\tif (count == 16){\n\t\t\texception.stackOverflow(\"Float Stack is full.\")\n\t\t}\n\t\tswitch(count){\n\t\t\t0 -> a0 = value\n\t\t\t1 -> a1 = value\n\t\t\t2 -> a2 = value\n\t\t\t3 -> a3 = value\n\t\t\t4 -> a4 = value\n\t\t\t5 -> a5 = value\n\t\t\t6 -> a6 = value\n\t\t\t7 -> a7 = value\n\t\t\t8 -> a8 = value\n\t\t\t9 -> a9 = value\n\t\t\t10 -> a10 = value\n\t\t\t11 -> a11 = value\n\t\t\t12 -> a12 = value\n\t\t\t13 -> a13 = value\n\t\t\t14 -> a14 = value\n\t\t\t15 -> a15 = value\n\t\t}\n\t\tcount ++\n\t}\n\t\n\tdef peek():float{\n\t\tif (count <= 0){\n\t\t\texception.stackUnderflow(\"Float Stack is empty.\")\n\t\t}\n\t\tswitch(count){\n\t\t\t0 -> return(a0)\n\t\t\t1 -> return(a1)\n\t\t\t2 -> return(a2)\n\t\t\t3 -> return(a3)\n\t\t\t4 -> return(a4)\n\t\t\t5 -> return(a5)\n\t\t\t6 -> return(a6)\n\t\t\t7 -> return(a7)\n\t\t\t8 -> return(a8)\n\t\t\t9 -> return(a9)\n\t\t\t10 -> return(a10)\n\t\t\t11 -> return(a11)\n\t\t\t12 -> return(a12)\n\t\t\t13 -> return(a13)\n\t\t\t14 -> return(a14)\n\t\t\t15 -> return(a15)\n\t\t}\n\t}\n\t\n\tdef pop():float{\n\t\tif (count <= 0){\n\t\t\texception.stackUnderflow(\"Float Stack is empty.\")\n\t\t}\n\t\tfloat v = peek()\n\t\tcount --\n\t\treturn(v)\n\t}\n\t\n\tdef clear(){\n\t\tcount = 0\n\t}\n\t\n\tdef isEmpty():bool{\n\t\tif (count == 0){\n\t\t\treturn(true)\n\t\t}\n\t\tif (count > 0){\n\t\t\treturn(false)\n\t\t}\n\t}\n\t\n\tdef contain(float value):bool{\n\t\tbool ret = false\n\t\tif (a0 == value && count >= 1){\n\t\t\tret = true\n\t\t}\n\t\tif (a1 == value && count >= 2){\n\t\t\tret = true\n\t\t}\n\t\tif (a2 == value && count >= 3){\n\t\t\tret = true\n\t\t}\n\t\tif (a3 == value && count >= 4){\n\t\t\tret = true\n\t\t}\n\t\tif (a4 == value && count >= 5){\n\t\t\tret = true\n\t\t}\n\t\tif (a5 == value && count >= 6){\n\t\t\tret = true\n\t\t}\n\t\tif (a6 == value && count >= 7){\n\t\t\tret = true\n\t\t}\n\t\tif (a7 == value && count >= 8){\n\t\t\tret = true\n\t\t}\n\t\tif (a8 == value && count >= 9){\n\t\t\tret = true\n\t\t}\n\t\tif (a9 == value && count >= 10){\n\t\t\tret = true\n\t\t}\n\t\tif (a10 == value && count >= 11){\n\t\t\tret = true\n\t\t}\n\t\tif (a11 == value && count >= 12){\n\t\t\tret = true\n\t\t}\n\t\tif (a12 == value && count >= 13){\n\t\t\tret = true\n\t\t}\n\t\tif (a13 == value && count >= 14){\n\t\t\tret = true\n\t\t}\n\t\tif (a14 == value && count >= 15){\n\t\t\tret = true\n\t\t}\n\t\tif (a15 == value && count == 16){\n\t\t\tret = true\n\t\t}\n\t\treturn(ret)\n\t}\n}\n\n","index":0},{"name":"vector3stack","content":"package stack\n\nstruct vector3stack{\n\tvector3 a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15\n\tint count\n\tdef __init__(){\n\t\tcount = 0\n\t}\n\t\n\tdef push(vector3 value){\n\t\tif (count == 16){\n\t\t\texception.stackOverflow(\"Vector3 Stack is full.\")\n\t\t}\n\t\tswitch(count){\n\t\t\t0 -> a0 = value\n\t\t\t1 -> a1 = value\n\t\t\t2 -> a2 = value\n\t\t\t3 -> a3 = value\n\t\t\t4 -> a4 = value\n\t\t\t5 -> a5 = value\n\t\t\t6 -> a6 = value\n\t\t\t7 -> a7 = value\n\t\t\t8 -> a8 = value\n\t\t\t9 -> a9 = value\n\t\t\t10 -> a10 = value\n\t\t\t11 -> a11 = value\n\t\t\t12 -> a12 = value\n\t\t\t13 -> a13 = value\n\t\t\t14 -> a14 = value\n\t\t\t15 -> a15 = value\n\t\t}\n\t\tcount ++\n\t}\n\t\n\tdef peek():vector3{\n\t\tif (count <= 0){\n\t\t\texception.stackUnderflow(\"Vector3 Stack is empty.\")\n\t\t}\n\t\t\n\t\tswitch(count){\n\t\t\t0 -> return(a0)\n\t\t\t1 -> return(a1)\n\t\t\t2 -> return(a2)\n\t\t\t3 -> return(a3)\n\t\t\t4 -> return(a4)\n\t\t\t5 -> return(a5)\n\t\t\t6 -> return(a6)\n\t\t\t7 -> return(a7)\n\t\t\t8 -> return(a8)\n\t\t\t9 -> return(a9)\n\t\t\t10 -> return(a10)\n\t\t\t11 -> return(a11)\n\t\t\t12 -> return(a12)\n\t\t\t13 -> return(a13)\n\t\t\t14 -> return(a14)\n\t\t\t15 -> return(a15)\n\t\t}\n\t}\n\t\n\tdef pop():vector3{\n\t\tif (count <= 0){\n\t\t\texception.stackUnderflow(\"Vector3 Stack is empty\")\n\t\t}\n\t\tvector3 v = peek()\n\t\tcount --\n\t\treturn(v)\n\t}\n\t\n\tdef clear(){\n\t\tcount = 0\n\t}\n\t\n\tdef isEmpty():bool{\n\t\tif (count == 0){\n\t\t\treturn(true)\n\t\t}\n\t\tif (count > 0){\n\t\t\treturn(false)\n\t\t}\n\t}\n}\n\n","index":0},{"name":"functionstack","content":"package stack\n\nstruct functionstack{\n\tfunction a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15\n\tint count\n\tdef __init__(){\n\t\tcount = 0\n\t}\n\t\n\tdef push(function value){\n\t\tif (count == 16){\n\t\t\texception.stackOverflow(\"Function Stack is full.\")\n\t\t}\n\t\tswitch(count){\n\t\t\t0 -> a0 = value\n\t\t\t1 -> a1 = value\n\t\t\t2 -> a2 = value\n\t\t\t3 -> a3 = value\n\t\t\t4 -> a4 = value\n\t\t\t5 -> a5 = value\n\t\t\t6 -> a6 = value\n\t\t\t7 -> a7 = value\n\t\t\t8 -> a8 = value\n\t\t\t9 -> a9 = value\n\t\t\t10 -> a10 = value\n\t\t\t11 -> a11 = value\n\t\t\t12 -> a12 = value\n\t\t\t13 -> a13 = value\n\t\t\t14 -> a14 = value\n\t\t\t15 -> a15 = value\n\t\t}\n\t\tcount ++\n\t}\n\t\n\tdef peek():function{\n\t\tif (count <= 0){\n\t\t\texception.stackUnderflow(\"Function Stack is empty.\")\n\t\t}\n\t\tswitch(count){\n\t\t\t0 -> return(a0)\n\t\t\t1 -> return(a1)\n\t\t\t2 -> return(a2)\n\t\t\t3 -> return(a3)\n\t\t\t4 -> return(a4)\n\t\t\t5 -> return(a5)\n\t\t\t6 -> return(a6)\n\t\t\t7 -> return(a7)\n\t\t\t8 -> return(a8)\n\t\t\t9 -> return(a9)\n\t\t\t10 -> return(a10)\n\t\t\t11 -> return(a11)\n\t\t\t12 -> return(a12)\n\t\t\t13 -> return(a13)\n\t\t\t14 -> return(a14)\n\t\t\t15 -> return(a15)\n\t\t}\n\t}\n\t\n\tdef pop():function{\n\t\tif (count <= 0){\n\t\t\texception.stackUnderflow(\"Function Stack is empty.\")\n\t\t}\n\t\tfunction v = peek()\n\t\tcount --\n\t\treturn(v)\n\t}\n\t\n\tdef popExecute(){\n\t\tif (count <= 0){\n\t\t\texception.stackUnderflow(\"Function Stack is empty.\")\n\t\t}\n\t\tfunction v = peek()\n\t\tv()\n\t\tcount --\n\t}\n\t\n\tdef clear(){\n\t\tcount = 0\n\t}\n\t\n\tdef clearExecute(){\n\t\twhile(count > 0){\n\t\t\tpopExecute()\n\t\t}\n\t}\n\t\n\tdef isEmpty():bool{\n\t\tif (count == 0){\n\t\t\treturn(true)\n\t\t}\n\t\tif (count > 0){\n\t\t\treturn(false)\n\t\t}\n\t}\n}\n\n\n","index":0}],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":[]},"tick":{"values":[]}}}}