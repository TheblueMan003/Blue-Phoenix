{"projectName":"math","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":"Made With BluePhoenix","files":[{"name":"import","content":"import exception","index":0},{"name":"constant","content":"package math\n\nlazy float pi(){\n\treturn(3.1415)\n}\nlazy float e(){\n\treturn(2.718)\n}","index":0},{"name":"abs","content":"package math\r\n\r\n\"\"\"\r\nGive sign of argument\r\n-1 if value smaller than 0\r\n1 otherwise\r\n\"\"\"\r\ndef sign(float value):int{\r\n    if (value >= 0){\r\n        return(1)\r\n    }\r\n    if (value < 0){\r\n        return(-1)\r\n    }\r\n}\r\n\r\n\"\"\"\r\nGive sign of argument\r\n-1 if value smaller than 0\r\n1 otherwise\r\n\"\"\"\r\ndef sign(int value):int{\r\n    if (value >= 0){\r\n        return(1)\r\n    }\r\n    if (value < 0){\r\n        return(-1)\r\n    }\r\n}\r\n\r\n\"\"\"\r\nGive sign of argument\r\n-1 if value smaller than 0\r\n1 otherwise\r\n\"\"\"\r\ndef lazy lazysign(int $value):int{\r\n    if ($value >= 0){\r\n        return(1)\r\n    }\r\n    if ($value < 0){\r\n        return(-1)\r\n    }\r\n}\r\n\r\n\"\"\"\r\nGive magnitude of argument\r\nv if v > 0\r\n-v otherwise\r\n\"\"\"\r\ndef abs(float value):float{\r\n    if (value >= 0){\r\n        return(value)\r\n    }\r\n    if (value < 0){\r\n        return(-value)\r\n    }\r\n}\r\n\r\n\"\"\"\r\nGive magnitude of argument\r\nv if v > 0\r\n-v otherwise\r\n\"\"\"\r\ndef abs(int value):int{\r\n    if (value >= 0){\r\n        return(value)\r\n    }\r\n    if (value < 0){\r\n        return(-value)\r\n    }\r\n}\r\n\r\n\"\"\"\r\nGive magnitude of argument\r\nv if v > 0\r\n-v otherwise\r\n\"\"\"\r\ndef lazy lazyabs(int $value):int{\r\n    if ($value >= 0){\r\n        return($value)\r\n    }\r\n    if ($value < 0){\r\n        return(-$value)\r\n    }\r\n}\r\n\r\n\"\"\"\r\nGive a mod b the correct way\r\n\"\"\"\r\ndef mod(float a, float b):float{\r\n    float ret = a+b\r\n    ret %= b\r\n    return(ret)\r\n}\r\n\r\n\"\"\"\r\nGive a mod b the correct way\r\n\"\"\"\r\ndef mod(int a, int b):int{\r\n    int ret = a+b\r\n    ret %= b\r\n    return(ret)\r\n}\r\n\r\n\"\"\"\r\nRound float to closest value\r\n\"\"\"\r\ndef round(float value):float{\r\n    value += 0.5\r\n    value /= 1000\r\n    value *= 1000\r\n    return(value)\r\n}\r\n\r\n\"\"\"\r\nRound float to lowest value\r\n\"\"\"\r\ndef floor(float value):float{\r\n    value /= 1000\r\n    value *= 1000\r\n    return(value)\r\n}\r\n\r\n\"\"\"\r\nRound float to upper value\r\n\"\"\"\r\ndef ceil(float value):float{\r\n    value += 0.999\r\n    value /= 1000\r\n    value *= 1000\r\n    return(value)\r\n}","index":0},{"name":"sqrt","content":"package math\r\n\r\n\"\"\"\r\nreturn true if difference between x and y smaller than maxDiff\r\n\"\"\"\r\ndef isClose(float x, float y, float maxDiff = 0.01):bool{\r\n    float diff = x - y\r\n    diff = abs(diff)\r\n\r\n    if (diff < maxDiff){\r\n        return(1)\r\n    }\r\n    if (diff >= maxDiff){\r\n        return(0)\r\n    }\r\n}\r\n\r\n\"\"\"\r\nGive squart root of value\r\n\"\"\"\r\ndef sqrt(float value):float{\r\n    if (value < 0){\r\n        exception.invalidArgument(\"value in math.sqrt\")\r\n    }\r\n\r\n    def iterate(float guess):float{\r\n        float next \r\n        next = (value/guess)\r\n        next += guess\r\n        next /= 2\r\n        bool close = isClose(next, guess)\r\n\r\n        if (close){\r\n            return(next)\r\n        }\r\n        if(!close){\r\n            return(iterate(next))\r\n        }\r\n    }\r\n    return(iterate(value))\r\n}","index":0},{"name":"factorial","content":"package math\r\n\r\n\"\"\"\r\nreturn x!\r\n\"\"\"\r\ndef factorial(int x):int{\r\n    if (x < 0){\r\n        exception.invalidArgument(\"X in math.factorial\")\r\n    }\r\n    int res = 1\r\n\r\n    for(int i = 1;i <= x;i++){\r\n        res *= i\r\n    }\r\n    return(res)\r\n}","index":0},{"name":"exp","content":"package math\r\n\r\n\"\"\"\r\nGive x^n\r\n\"\"\"\r\ndef pow(float x, int n, float m = 1):float{\r\n    if (n < 0){\r\n        exception.invalidArgument(\"n in math.pow\")\r\n    }\r\n    if (n == 0){\r\n        return(1)\r\n    }\r\n    if (n == 1){\r\n        float ret = x * m\r\n        return(ret)\r\n    }\r\n    if (n > 1){\r\n        int parity = n % 2\r\n        \r\n        if (parity == 1){\r\n            m *= x\r\n            n -= 1\r\n        }\r\n        n /= 2\r\n        x *= x\r\n        return(pow(x, n, m))\r\n    }\r\n}\r\n\r\n\"\"\"\r\nGive x^n\r\n\"\"\"\r\ndef pow(int x, int n, int m = 1):int{\r\n    if (n < 0){\r\n        exception.invalidArgument(\"n in math.intPow\")\r\n    }\r\n    if (n == 0){\r\n        return(1)\r\n    }\r\n    if (n == 1){\r\n        int ret = x * m\r\n        return(ret)\r\n    }\r\n    if (n > 1){\r\n        int parity = x % 2\r\n        \r\n        if (parity == 1){\r\n            m *= x\r\n            n -= 1\r\n        }\r\n        n /= 2\r\n        x*=x\r\n        return(pow(x, n, m))\r\n    }\r\n}","index":0},{"name":"trigo","content":"package math\r\n\r\n\"\"\"\r\nGive sin(x) with a polynom of taylor of degree deg\r\n\"\"\"\r\ndef sin(float x, int deg = 7):float{\r\n    x %= pi*2\r\n    float y = 0\r\n\r\n    for(int n = 0;n<=deg;n++){\r\n        int k = n*2+1\r\n        float a =  pow(x, k)\r\n        float b = factorial(k)\r\n        float t =  a / b\r\n\r\n        int j = n % 2\r\n\r\n        if (j == 0)\r\n            y += t\r\n        if (j == 1)\r\n            y -= t\r\n    }\r\n\r\n    return(y)\r\n}\r\n\r\n\"\"\"\r\nGive cos(x) with a polynom of taylor of degree deg\r\n\"\"\"\r\ndef cos(float x, int deg = 7):float{\r\n    x %= pi*2\r\n    x = abs(x)\r\n    float y = 0\r\n\r\n    for(int n = 0;n<=deg;n++){\r\n        int k = n*2\r\n        float a =  pow(x, k)\r\n        float b = factorial(k)\r\n        float t =  a / b\r\n\r\n        int j = n % 2\r\n\r\n        if (j == 0)\r\n            y += t\r\n        if (j == 1)\r\n            y -= t\r\n    }\r\n\r\n    return(y)\r\n}\r\n\r\n\"\"\"\r\nGive tan(x) with a polynom of taylor of degree deg\r\n\"\"\"\r\ndef tan(float x, int deg = 7):float{\r\n    float s = sin(x, deg)\r\n    float c = cos(x, deg)\r\n    float y = s/c\r\n    return(y)\r\n}","index":0},{"name":"trigo2","content":"package math\r\n\r\n\"\"\"\r\nGive arcsin(x) with a polynom of taylor of degree deg\r\n\"\"\"\r\ndef arcsin(float x):float{\r\n    if (x < -1 || x > 1){\r\n        exception.invalidArgument(\"x is out of bound for arcsin\")\r\n    }\r\n    float y = 0\r\n    for(int i=0;i<5;i++){\r\n        float k = (factorial(2*i) / (pow(4, i) * pow(factorial(i), 2) * (2 * i + 1))) * pow(x, 2 * i + 1)\r\n        y+=k\r\n    }\r\n    return(y)\r\n}\r\n\r\n\"\"\"\r\nGive arccos(x) with a polynom of taylor of degree deg\r\n\"\"\"\r\ndef arccos(float x):float{\r\n    return(pi / 2 - arcsin(x))\r\n}\r\n\r\n\"\"\"\r\nGive arctan(x) with a polynom of taylor of degree deg\r\n\"\"\"\r\ndef arctan(float x):float{\r\n    float y = 0\r\n    for(float i=0;i<15;i++){\r\n        float k = (pow(-1, i)/(2*i+1))*pow(x, 2*i+1)\r\n        y+=k\r\n    }\r\n    return(y)\r\n}","index":0},{"name":"trigo3","content":"package math\n\n\"\"\"\nGive sinh(x) with a polynom of taylor of degree deg\n\"\"\"\ndef sinh(float x):float{\n\tfloat y = 0\n\tfor(float i=0;i<15;i++){\n\t\tfloat k = pow(x, 2*i+1)/factorial(2*i+1)\n\t\ty+=k\n\t}\n\treturn(y)\n}\n\n\"\"\"\nGive cosh(x) with a polynom of taylor of degree deg\n\"\"\"\ndef cosh(float x):float{\n\tfloat y = 0\n\tfor(float i=0;i<15;i++){\n\t\tfloat k = pow(x, 2*i)/factorial(2*i)\n\t\ty+=k\n\t}\n\treturn(y)\n}","index":0},{"name":"bound","content":"package math\r\n\r\n\"\"\"\r\nGive max between a and b\r\n\"\"\"\r\ndef max(int a, int b):int{\r\n    if (a < b){\r\n        return(b)\r\n    }\r\n    if (a >= b){\r\n        return(a)\r\n    }\r\n}\r\n\r\n\"\"\"\r\nGive max between a and b\r\n\"\"\"\r\ndef max(float a, float b):float{\r\n    if (a < b){\r\n        return(b)\r\n    }\r\n    if (a >= b){\r\n        return(a)\r\n    }\r\n}\r\n\r\n\"\"\"\r\nGive min between a and b\r\n\"\"\"\r\ndef min(int a, int b):int{\r\n    if (a < b){\r\n        return(a)\r\n    }\r\n    if (a >= b){\r\n        return(b)\r\n    }\r\n}\r\n\r\n\"\"\"\r\nGive min between a and b\r\n\"\"\"\r\ndef min(float a, float b):float{\r\n    if (a < b){\r\n        return(a)\r\n    }\r\n    if (a >= b){\r\n        return(b)\r\n    }\r\n}\r\n\r\n\"\"\"\r\nGive bound a between b and c\r\n\"\"\"\r\ndef bound(int a, int b, int c):int{\r\n    return(math.max(math.min(a, b),c))\r\n}\r\n\r\n\"\"\"\r\nGive bound a between b and c\r\n\"\"\"\r\ndef bound(float a, float b, float c):float{\r\n    return(math.max(math.min(a, b),c))\r\n}","index":0},{"name":"sort","content":"package math\r\n\r\ndef sorted(int a, int b):int,int{\r\n    if (a > b){\r\n        return(b, a)    \r\n    }\r\n    if (a <= b){\r\n        return(a, b)    \r\n    }\r\n}\r\n\r\ndef sorted(float a, float b):float,float{\r\n    if (a > b){\r\n        return(b, a)    \r\n    }\r\n    if (a <= b){\r\n        return(a, b)    \r\n    }\r\n}\r\n\r\ndef lazy swap(int $a, int $b){\r\n    int c = $a\r\n    $a = $b\r\n    $b = c\r\n}\r\n\r\ndef lerp(float a, float b, float w):float{\r\n    return(a*(1-w) + b*w)\r\n}\r\ndef lazy lazylerp(float a, float b, float w):float{\r\n    return(a*(1-w) + b*w)\r\n}\r\n\r\ndef lerp(float x1, float y1, float z1, float x2, float y2, float z2, float w):float,float,float{\r\n    float w1 = 1-w\r\n    return x1*w1+x2*w, y1*w1+y2*w, z1*w1+z2*w\r\n}\r\ndef lazy lazylerp(float x1, float y1, float z1, float x2, float y2, float z2, float w):float,float,float{\r\n    float w1 = 1-w\r\n    return x1*w1+x2*w, y1*w1+y2*w, z1*w1+z2*w\r\n}\r\n\r\ndef lerp(float x1, float y1, float z1, float u1, float v1, float x2, float y2, float z2, float u2, float v2, float w):float,float,float{\r\n    float w1 = 1-w\r\n    return x1*w1+x2*w, y1*w1+y2*w, z1*w1+z2*w, u1*w1+u2*w, v1*w1+v2*w\r\n}\r\ndef lazylerp(float x1, float y1, float z1, float u1, float v1, float x2, float y2, float z2, float u2, float v2, float w):float,float,float{\r\n    float w1 = 1-w\r\n    return x1*w1+x2*w, y1*w1+y2*w, z1*w1+z2*w, u1*w1+u2*w, v1*w1+v2*w\r\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":[]},"tick":{"values":[]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":24},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.17","ExportAsZip":false,"packformat":6,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"isLibrary":false}}