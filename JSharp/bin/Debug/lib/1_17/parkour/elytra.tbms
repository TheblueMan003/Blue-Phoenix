{"projectName":"ring","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":"","files":[{"name":"import","content":"import standard.java\nimport standard.entity_id\nimport standard.object\nimport entity\nimport inventory\nimport input\nimport cmd.effect\nimport cmd.sound\nimport cmd.team\nimport cmd.schedule\nimport cmd.pointer\nimport cmd.actionbar","index":0},{"name":"ring","content":"package ring\n\nINT Number, firework\nteam border = team(\"border\")\nborder.setColor(green)\n\nclass highlight initer minecraft:slime{Size:1,NoAI:1,Glowing:1,Invulnerable:1,Silent:1,Tags:[\"highlight\"]}{\n}\nclass ring{\n    bool highlighted\n    \n    HIGHLIGHT[16] blocks\n    def __init__(int nb, int fw){\n        Number = nb\n        firework = fw\n    }\n    def ticking main(){\n        int nb = Number\n        int fw = firework\n        if (@p[gamemode=creative]){\n            /particle minecraft:dust 1 1 0 1 ~ ~ ~\n        }\n        if (elytra.count == 1){\n            bool isRight = false\n            isRight = false\n            with(@a,true){\n                if (Number == nb - 1){\n                    isRight = true\n                }\n            }\n            if (isRight && !highlighted){\n                showHighlight()\n                highlighted = true\n            }\n            if (!isRight && highlighted){\n                hideHighlight()\n                highlighted = false\n            }\n        }\n        else{\n            if (highlighted){\n                hideHighlight()\n                highlighted = false\n            }\n        }\n        with(@a[distance=..3],true){\n            if (Number == nb - 1){\n                sound.play(minecraft:entity.experience_orb.pickup)\n                Number = nb\n                elytra.onRingCallback()\n                for(int i=0;i < fw;i++){\n                    give(firework_rocket)\n                    elytra.onFireworkCallback()\n                }\n            }\n            else if (Number < nb - 1 && entity.adventure() && elytra.Elytra){\n                Number = 0\n                kill()\n            }\n            if (entity.creative()){\n                actionbar.show(40,10,f\"[Debug] ring: {Number}/{nb} - fw: {fw}\")\n            }\n        }\n    }\n    def showHighlight(){\n        align(xyz){\n            positioned(~.5 ~ ~.5){\n                if (!block(~ ~3 ~ air) && !block(~3 ~ ~ air)){\n                    showHighlightX()\n                }\n                if (!block(~ ~ ~3 air) && !block(~3 ~ ~ air)){\n                    showHighlightY()\n                }\n                if (!block(~ ~ ~3 air) && !block(~ ~3 ~ air)){\n                    showHighlightZ()\n                }\n            }\n            with(@e[type=slime]){\n                effect.invisibility(999999,1,true)\n                border++\n            }\n        }\n    }\n    \n    def showHighlightEmarlald(){\n        positioned(~ ~ ~){blocks.0 = highlight()}\n    }\n    def showHighlightX(){\n        positioned(~-1 ~3 ~){blocks.0 = highlight()}\n        positioned(~ ~3 ~){blocks.1 = highlight()}\n        positioned(~1 ~3 ~){blocks.2 = highlight()}\n        \n        positioned(~-1 ~-3 ~){blocks.3 = highlight()}\n        positioned(~ ~-3 ~){blocks.4 = highlight()}\n        positioned(~1 ~-3 ~){blocks.5 = highlight()}\n        \n        positioned(~-3 ~-1 ~){blocks.6 = highlight()}\n        positioned(~-3 ~ ~){blocks.7 = highlight()}\n        positioned(~-3 ~1 ~){blocks.8 = highlight()}\n        \n        positioned(~3 ~-1 ~){blocks.9 = highlight()}\n        positioned(~3 ~ ~){blocks.10 = highlight()}\n        positioned(~3 ~1 ~){blocks.11 = highlight()}\n        \n        positioned(~2 ~-2 ~){blocks.12 = highlight()}\n        positioned(~-2 ~-2 ~){blocks.13 = highlight()}\n        positioned(~2 ~2 ~){blocks.14 = highlight()}\n        positioned(~-2 ~2 ~){blocks.15 = highlight()}\n    }\n    def showHighlightY(){\n        positioned(~-1 ~ ~3){blocks.0 = highlight()}\n        positioned(~ ~ ~3){blocks.1 = highlight()}\n        positioned(~1 ~ ~3){blocks.2 = highlight()}\n        \n        positioned(~-1 ~ ~-3){blocks.3 = highlight()}\n        positioned(~ ~ ~-3){blocks.4 = highlight()}\n        positioned(~1 ~ ~-3){blocks.5 = highlight()}\n        \n        positioned(~-3 ~ ~-1){blocks.6 = highlight()}\n        positioned(~-3 ~ ~){blocks.7 = highlight()}\n        positioned(~-3 ~ ~1){blocks.8 = highlight()}\n        \n        positioned(~3 ~ ~-1){blocks.9 = highlight()}\n        positioned(~3 ~ ~){blocks.10 = highlight()}\n        positioned(~3 ~ ~1){blocks.11 = highlight()}\n        \n        positioned(~2 ~ ~-2){blocks.12 = highlight()}\n        positioned(~-2 ~ ~-2){blocks.13 = highlight()}\n        positioned(~2 ~ ~2){blocks.14 = highlight()}\n        positioned(~-2 ~ ~2){blocks.15 = highlight()}\n    }\n    def showHighlightZ(){\n        positioned(~ ~3 ~-1){blocks.0 = highlight()}\n        positioned(~ ~3 ~){blocks.1 = highlight()}\n        positioned(~ ~3 ~1){blocks.2 = highlight()}\n        \n        positioned(~ ~-3 ~-1){blocks.3 = highlight()}\n        positioned(~ ~-3 ~){blocks.4 = highlight()}\n        positioned(~ ~-3 ~1){blocks.5 = highlight()}\n        \n        positioned(~ ~-1 ~-3){blocks.6 = highlight()}\n        positioned(~ ~ ~-3){blocks.7 = highlight()}\n        positioned(~ ~1 ~-3){blocks.8 = highlight()}\n        \n        positioned(~ ~-1 ~3){blocks.9 = highlight()}\n        positioned(~ ~ ~3){blocks.10 = highlight()}\n        positioned(~ ~1 ~3){blocks.11 = highlight()}\n        \n        positioned(~ ~-2 ~2){blocks.12 = highlight()}\n        positioned(~ ~-2 ~-2){blocks.13 = highlight()}\n        positioned(~ ~2 ~2){blocks.14 = highlight()}\n        positioned(~ ~2 ~-2){blocks.15 = highlight()}\n    }\n    def hideHighlight(){\n        with(@e[type=slime,distance=..4]){\n            data.set({Glowing:0b})\n        }\n        forgenerate($i,0,15){\n            blocks.$i = null\n        }\n        schedule.add(21){\n            with(@e[type=slime,nbt={Size:0}]){\n                data.set({Silent:1})\n                effect.invisibility()\n                kill()\n            }\n        }\n    }\n}\nint incNb(){\n    Number++\n    return Number\n}\nint decNb(){\n    Number--\n    return Number\n}\nvoid incFw(){\n    firework++\n}\nvoid decFw(){\n    firework--\n}\ndef snap(){\n    int rx = @s.rot_x + 45/2\n    int ry = @s.rot_y + 45/2\n    rx/=45\n    ry/=45\n    rx*=45\n    ry*=45\n    pointer.new(\"trg\")\n    with(@e[tag=trg]){\n        @s.rot_x = rx\n        @s.rot_y = ry\n    }\n    /tp @s @e[tag=trg,limit=1]\n    kill(@e[tag=trg])\n}\n\ndef lazy smallRing(int $block,int $center){\n    snap()\n    with(@s,true){\n        setblock(^-1 ^2 ^ $block)\n        setblock(^ ^2 ^ $center)\n        setblock(^1 ^2 ^ $block)\n        \n        setblock(^-1 ^-2 ^ $block)\n        setblock(^ ^-2 ^ $center)\n        setblock(^1 ^-2 ^ $block)\n        \n        setblock(^-2 ^-1 ^ $block)\n        setblock(^-2 ^ ^ $center)\n        setblock(^-2 ^1 ^ $block)\n        \n        setblock(^2 ^-1 ^ $block)\n        setblock(^2 ^ ^ $center)\n        setblock(^2 ^1 ^ $block)\n    }\n}\ndef lazy bigRing(int $block,int $center){\n    snap()\n    with(@s,true){\n        setblock(^-1 ^3 ^ $block)\n        setblock(^ ^3 ^ $center)\n        setblock(^1 ^3 ^ $block)\n        \n        setblock(^-1 ^-3 ^ $block)\n        setblock(^ ^-3 ^ $center)\n        setblock(^1 ^-3 ^ $block)\n        \n        setblock(^-3 ^-1 ^ $block)\n        setblock(^-3 ^ ^ $center)\n        setblock(^-3 ^1 ^ $block)\n        \n        setblock(^3 ^-1 ^ $block)\n        setblock(^3 ^ ^ $center)\n        setblock(^3 ^1 ^ $block)\n        \n        setblock(^2 ^2 ^ $block)\n        setblock(^-2 ^2 ^ $block)\n        setblock(^-2 ^-2 ^ $block)\n        setblock(^2 ^-2 ^ $block)\n    }\n}","index":0},{"name":"ring_tools","content":"package ring\n\ndef helper reset(){\n    Number = 0\n}\ndef helper a_inc(){\n    int nb\n    with(ring[distance=..3]){\n        nb = incNb()\n    }\n    Number = nb\n}\ndef helper a_dec(){\n    int nb\n    with(ring[distance=..3]){\n        nb = decNb()\n    }\n    Number = nb\n}\ndef helper b_incFw(){\n    with(ring[distance=..3]){\n        incFw()\n    }\n}\ndef helper b_decFw(){\n    with(ring[distance=..3]){\n        decFw()\n    }\n}\n\ndef helper bigring_0fw(){\n    ring.bigring(smooth_quartz,iron_block)\n    Number ++\n    new ring(Number, 0)\n}\n\ndef helper bigring_1fw(){\n    ring.bigring(smooth_quartz,gold_block)\n    Number ++\n    new ring(Number, 1)\n}\n\ndef helper bigring_2fw(){\n    ring.bigring(smooth_quartz,diamond_block)\n    Number ++\n    new ring(Number, 2)\n}","index":0},{"name":"elytra","content":"package elytra\n\nBOOL Elytra\nINT UpdateTick\nint count = 0\n\nvoid=>void onRingCallback := pass\nvoid=>void onFireworkCallback := pass\nvoid=>void onEquipCallback := pass\n\n\nlazy onRing(void=>void $fct){\n    onRingCallback = $fct\n}\nlazy onEquip(void=>void $fct){\n    onEquipCallback = $fct\n}\nlazy onFirework(void=>void $fct){\n    onFireworkCallback = $fct\n}\n\n\n\ndef helper reset(){\n    count = 0\n}\ndef rm_elytra(){\n    clear(elytra)\n    Elytra = 0\n    count--\n    ring.Number = 0\n}\ndef give_elytra(){\n    if (Elytra == false){\n        actionbar.show(200,60,(\"Elytra Equipped!\",gold,bold))\n        Elytra = 1\n        inventory.setchestplate(elytra{Unbreakable:1,Enchantments:[{id:binding_curse,lvl:1}]})\n        sound.play(minecraft:item.armor.equip_elytra)\n        ring.Number = 0\n        count++\n        onEquipCallback()\n    }\n}\ndef @playertick elytra_equip(){\n    if (block(~ ~-1 ~ diamond_block) && !Elytra){\n        if(item.isnear(elytra)){\n            give_elytra()\n        }\n    }\n    if (block(~ ~-1 ~ gold_block) && Elytra){\n        rm_elytra()\n    }\n    if (Elytra){\n        input.onDie(){\n            rm_elytra()\n        }\n    }\n}\nif (__debug()){\n    def @itemtick main(){\n        if(@s[tag=!item.eltra] && @p[distance=..2,gamemode=creative]){\n            if(block(~ ~-1 ~ diamond_block)){\n                aligned(){\n                    /summon item ~ ~ ~ {Item:{id:\"minecraft:elytra\",tag:{Enchantments:[{}]},Count:1},PickupDelay:32767s,Age:0s,Tags:[\"item.eltra\"]}\n                }\n                kill()\n            }\n        }\n    }\n}\ndef @itemtick elytra_item(){\n    if(@s[tag=item.eltra]){\n        UpdateTick++\n        if (UpdateTick > 500){\n            data.set({PickupDelay:32767s,Age:0s})\n            UpdateTick = 0\n        }\n        if(!block(~ ~-1 ~ diamond_block)){\n            kill()\n        }\n    }\n}\nint @test give(){\n    int succ = 0\n    with(@r){\n        /give @s stone{blah:1}\n        cmdstore(succ,clear @s stone{blah:1})\n    }\n    return succ\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":36},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"randomLambdaID":false,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{"ring.actionbar.CurrentPriority":"tbms.actbr.prio","ring.actionbar.CurrentTime":"tbms.actbr.time"},"libraryFolder":["./lib/1_17/","./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.16.5","ExportAsZip":false,"packformat":7,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"opti_FileCleanUp":true,"advanced_debug":false,"isLibrary":false}}