{"projectName":"speedrun","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":"","files":[{"name":"import","content":"import standard.java\nimport standard.entity_id\nimport standard.object","index":0},{"name":"speedrun","content":"package speedrun\n\n[inplace]\ndef lazy init(int $lvl){\n    INT[$lvl] best_times\n    INT[$lvl] current_times\n    INT best_time, current_lvl\n    BOOL HasTime\n    \n    def start(){\n        current_lvl = -1\n    }\n    def @reset reset(){\n        with(@a){\n            best_times = null\n            current_times = null\n            best_time = null\n            current_lvl = null\n            HasTime = null\n        }\n    }\n    def show_time(int time, int ptime){\n        int delta = ptime-time\n        int dp = math.abs(delta)\n        int t = (dp % 20)*5\n        int s = (dp/20)%60\n        int m = (dp/$eval(20*60))%60\n        int h = (dp/$eval(20*60*60))\n        if (delta >= 0){\n            if (m >= 10 && s >= 10 && t >= 10){tellraw(@s,(f\"-{h}:{m}:{s}.{t}\",green))}\n            if (m >= 10 && s >= 10 && t <  10){tellraw(@s,(f\"-{h}:{m}:{s}.0{t}\",green))}\n            if (m >= 10 && s <  10 && t >= 10){tellraw(@s,(f\"-{h}:{m}:0{s}.{t}\",green))}\n            if (m >= 10 && s <  10 && t <  10){tellraw(@s,(f\"-{h}:{m}:0{s}.0{t}\",green))}\n            if (m <  10 && s >= 10 && t >= 10){tellraw(@s,(f\"-{h}:0{m}:{s}.{t}\",green))}\n            if (m <  10 && s >= 10 && t <  10){tellraw(@s,(f\"-{h}:0{m}:{s}.0{t}\",green))}\n            if (m <  10 && s <  10 && t >= 10){tellraw(@s,(f\"-{h}:0{m}:0{s}.{t}\",green))}\n            if (m <  10 && s <  10 && t <  10){tellraw(@s,(f\"-{h}:0{m}:0{s}.0{t}\",green))}\n        }\n        if (delta < 0){\n            if (m >= 10 && s >= 10 && t >= 10){tellraw(@s,(f\"+{h}:{m}:{s}.{t}\",red))}\n            if (m >= 10 && s >= 10 && t <  10){tellraw(@s,(f\"+{h}:{m}:{s}.0{t}\",red))}\n            if (m >= 10 && s <  10 && t >= 10){tellraw(@s,(f\"+{h}:{m}:0{s}.{t}\",red))}\n            if (m >= 10 && s <  10 && t <  10){tellraw(@s,(f\"+{h}:{m}:0{s}.0{t}\",red))}\n            if (m <  10 && s >= 10 && t >= 10){tellraw(@s,(f\"+{h}:0{m}:{s}.{t}\",red))}\n            if (m <  10 && s >= 10 && t <  10){tellraw(@s,(f\"+{h}:0{m}:{s}.0{t}\",red))}\n            if (m <  10 && s <  10 && t >= 10){tellraw(@s,(f\"+{h}:0{m}:0{s}.{t}\",red))}\n            if (m <  10 && s <  10 && t <  10){tellraw(@s,(f\"+{h}:0{m}:0{s}.0{t}\",red))}\n        }\n    }\n    def step(int level, int time){\n        HasTime:=false\n        if (current_lvl < level){\n            current_lvl = level\n            current_times[level] = time\n            if (HasTime){\n                show_time(time, best_times[level])\n            }\n        }\n    }\n    def stop(int level, int time){\n        step(level, time)\n        best_time := int.maxValue\n        if (best_time > time){\n            best_times = current_times\n            best_time = time\n            HasTime = true\n        }\n    }\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":7},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_17/","./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.16.5","ExportAsZip":false,"packformat":7,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"opti_FileCleanUp":true,"advanced_debug":false,"isLibrary":false}}