{"projectName":"door","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":"","files":[{"name":"import","content":"import standard.java\nimport standard.entity_id\nimport standard.object\nimport animation.moving_structure\nimport entity.object","index":0},{"name":"door","content":"package door\n\nstruct door{\n    moving_structure anim\n    bool animating\n    int state\n    int goal\n    marker e\n    int $structure\n    int $height\n    int $opendis\n    int $closedis\n    def lazy __init__(int $s, int $h, int $o, int $c){\n        $structure = $s\n        $height = $h\n        $opendis = $o\n        $closedis = $c\n        aligned{\n            e = new marker()\n        }\n        animating = false\n        state = 0\n        goal = 0\n        def ticking tick(){\n            e.with(true){\n                if (@p[distance=..$opendis]){\n                    this.open()\n                }\n                if (!@p[distance=$closedis..]){\n                    this.close()\n                }\n            }\n        }\n    }\n    def animEnd(){\n        animating = false\n        if (goal != state){\n            if (goal == 0){\n                close()\n            }\n            else if (goal == 1){\n                open()\n            }\n        }\n    }\n    def open(){\n        e.with(true){\n            if (animating){\n                goal = 1\n            }\n            else if (state != 1){\n                goal = 1\n                animating = 1\n                state = 1\n                positioned(~ ~ ~){\n                    def action(){\n                        INT SY,TY\n                        FLOAT Tick\n                        Tick := 0\n                        SY := @s.y\n                        TY := SY+$height\n                        @s.y = math.smoothlerp(SY, TY, Tick/$eval($height*10))\n                        Tick++\n                    }\n                    anim = moving_structure($structure,$eval($height*10), animEnd, action)\n                }\n                positioned(~ ~ ~){\n                    anim.start()\n                }\n            }\n        }\n    }\n    def close(){\n        e.with(true){\n            if (animating){\n                goal = 0\n            }\n            else if (state != 0){\n                goal = 0\n                animating = 1\n                state = 0\n                positioned(~ ~3 ~){\n                    def action(){\n                        INT SY,TY\n                        FLOAT Tick\n                        Tick := 0\n                        SY := @s.y\n                        TY := SY-$height\n                        @s.y = math.smoothlerp(SY, TY, Tick/$eval($height*10))\n                        Tick++\n                    }\n                    anim = moving_structure($structure,$eval($height*10),animEnd, action)\n                }\n                positioned(~ ~$height ~){\n                    anim.start()\n                }\n            }\n        }\n    }\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":0},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"randomLambdaID":true,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_17/","./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.16.5","ExportAsZip":false,"packformat":8,"rppackformat":8,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"opti_FileCleanUp":true,"advanced_debug":false,"isLibrary":false}}