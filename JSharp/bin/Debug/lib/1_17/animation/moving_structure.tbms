{"projectName":"moving_structure","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":"","files":[{"name":"import","content":"import standard.java\nimport standard.entity_id\nimport standard.object\nimport entity.falling_block\nimport cmd.schedule\nimport math\nimport tools","index":0},{"name":"moving_structure","content":"package moving_structure\n\ndef lazy animate(int $s, int $time, void=>void $callback, void=>void $action){\n    process motion{\n        int tick\n        def main(){\n            with(@e[tag=$this,tag=fb.bottom],true){\n                $action()\n            }\n            tick++\n            if (tick > $time){\n                stop()\n            }\n        }\n        def onStart(){\n            tick = 0\n        }\n        def onStop(){\n            kill(@e[tag=$this])\n            $callback()\n        }\n    }\n    def summonBlocks(){\n        forgenerate($i, structure($s)){\n            positioned(~$i.x ~$i.y ~$i.z){\n                falling_block.summonMovableWithPropertiesTag(\"$i.id\",$i.properties,\"$this\")\n            }\n        }\n    }\n    motion.start()\n}\n\nstruct moving_structure{\n    void=>void start\n    def lazy __init__(int $s, int $time, void=>void $callback, void=>void $action){\n        process motion{\n            int tick\n            def main(){\n                with(@e[tag=$this,tag=fb.bottom],true){\n                    $action()\n                }\n                tick++\n                if (tick > $time){\n                    stop()\n                }\n            }\n            def onStart(){\n                tick = 0\n            }\n            def onStop(){\n                with(@e[tag=$this,tag=ms.center],true){\n                    placeStruct()\n                }\n                kill(@e[tag=$this])\n                $callback()\n            }\n        }\n        def removeStruct(){\n            forgenerate($i, structure($s)){\n                /setblock ~$i.x ~$i.y ~$i.z air\n            }\n        }\n        def summonBlocks(){\n            forgenerate($i, structure($s)){\n                positioned(~$i.x ~$i.y ~$i.z){\n                    falling_block.summonMovableWithPropertiesTag(\"$i.id\",$i.properties,\"$this\")\n                }\n            }\n            /summon marker ~ ~.5 ~ {Tags:[\"$this\",\"ms.center\",\"fb.bottom\"]}\n        }\n        def placeStruct(){\n            forgenerate($i, structure($s)){\n                /setblock ~$i.x ~$i.y ~$i.z $i.id$i.states\n            }\n        }\n        def onStart(){\n            removeStruct()\n            summonBlocks()\n            motion.start()\n        }\n        start = onStart\n        placeStruct()\n    }\n}\nstruct shokewave_structure{\n    void=>void start\n    def lazy __init__(int $s, int $x, int $y, int $z, int $v, int $time, void=>void $callback){\n        int gx,gy,gz\n        process motion{\n            int tick\n            def main(){\n                with(@e[tag=$this,tag=fb.bottom],true){\n                    INT x,y,z, d, t\n                    if (t == null){\n                        x = @s.x\n                        y = @s.y\n                        z = @s.z\n                        d = math.abs(math.abs(x-gx)-$x)+math.abs(math.abs(y-gy)-$y)+math.abs(math.abs(z-gz)-$z)\n                        t = d * 10\n                    }\n                    \n                    motion.gravityShoke($v, t)\n                }\n                tick++\n                if (tick > $time){\n                    stop()\n                }\n            }\n            def onStart(){\n                tick = 0\n            }\n            def onStop(){\n                with(@e[tag=$this,tag=ms.center],true){\n                    placeStruct()\n                }\n                kill(@e[tag=$this])\n                $callback()\n            }\n        }\n        def removeStruct(){\n            forgenerate($i, structure($s)){\n                /setblock ~$i.x ~$i.y ~$i.z air\n            }\n        }\n        def summonBlocks(){\n            forgenerate($i, structure($s)){\n                positioned(~$i.x ~$i.y ~$i.z){\n                    falling_block.summonMovableWithPropertiesTag(\"$i.id\",$i.properties,\"$this\")\n                }\n            }\n            /summon marker ~ ~.5 ~ {Tags:[\"$this\",\"ms.center\",\"fb.bottom\"]}\n            with(@e[tag=$this,tag=ms.center]){\n                gx,gy,gz = @s.x, @s.y, @s.z\n            }\n        }\n        def placeStruct(){\n            forgenerate($i, structure($s)){\n                /setblock ~$i.x ~$i.y ~$i.z $i.id$i.states\n            }\n        }\n        def onStart(){\n            removeStruct()\n            summonBlocks()\n            motion.start()\n        }\n        start = onStart\n        placeStruct()\n    }\n}","index":0},{"name":"motion","content":"package motion\n\nINT S, T\nFLOAT Tick, V\n\ndef gravityShoke(int v, float time){\n    Tick := 0\n    V := v\n    if (Tick > time){\n        V -= 0.08\n        if (V < -3.92){\n            V = -3.92\n        }\n        float y = @s.y\n        @s.y = y+V\n        at(@s){\n            if (!block(~ ~ ~ air)){\n               @s.y = y\n               V = 0\n               Tick = int.minValue\n            }\n        }\n    }\n    Tick++\n}\n\nlazy function gravity(int $v){\n    def lambda(){\n        V := $v\n        V -= 0.08\n        if (V < -3.92){\n            V = -3.92\n        }\n        @s.y = @s.y + V\n    }s\n    return lambda\n}\n\n\nlazy function ysmooth(int $dy, int $time){\n    def lambda(){\n        int d = $dy\n        Tick := 0\n        S := @s.y\n        T := S+d\n        @s.y = math.smoothlerp(S, T, Tick/$time)\n        Tick++\n    }\n    return lambda\n}\nlazy function xsmooth(int $dx, int $time){\n    def lambda(){\n        int d = $dx\n        Tick := 0\n        S := @s.x\n        T := S+d\n        @s.x = math.smoothlerp(S, T, Tick/$time)\n        Tick++\n    }\n    return lambda\n}\nlazy function zsmooth(int $dz, int $time){\n    def lambda(){\n        int d = $dz\n        Tick := 0\n        S := @s.z\n        T := S+d\n        @s.z = math.smoothlerp(S, T, Tick/$time)\n        Tick++\n    }\n    return lambda\n}\n\n\n\nlazy function ylerp(int $dy, int $time){\n    def lambda(){\n        int d = $dy\n        Tick := 0\n        S := @s.y\n        T := S+d\n        @s.y = math.lerp(S, T, Tick/$time)\n        Tick++\n    }\n    return lambda\n}\nlazy function xlerp(int $dx, int $time){\n    def lambda(){\n        int d = $dx\n        Tick := 0\n        S := @s.x\n        T := S+d\n        @s.x = math.lerp(S, T, Tick/$time)\n        Tick++\n    }\n    return lambda\n}\nlazy function zlerp(int $dz, int $time){\n    def lambda(){\n        int d = $dz\n        Tick := 0\n        S := @s.z\n        T := S+d\n        @s.z = math.lerp(S, T, Tick/$time)\n        Tick++\n    }\n    return lambda\n}\n\n\n\nlazy function ysinlerp(int $dy, int $time){\n    def lambda(){\n        int d = $dy\n        Tick := 0\n        S := @s.y\n        T := S+d\n        @s.y = math.sinlerp(S, T, Tick/$time)\n        Tick++\n    }\n    return lambda\n}\nlazy function xsinlerp(int $dx, int $time){\n    def lambda(){\n        int d = $dx\n        Tick := 0\n        S := @s.x\n        T := S+d\n        @s.x = math.sinlerp(S, T, Tick/$time)\n        Tick++\n    }\n    return lambda\n}\nlazy function zsinlerp(int $dz, int $time){\n    def lambda(){\n        int d = $dz\n        Tick := 0\n        S := @s.z\n        T := S+d\n        @s.z = math.sinlerp(S, T, Tick/$time)\n        Tick++\n    }\n    return lambda\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":19},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"randomLambdaID":true,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_17/","./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.16.5","ExportAsZip":false,"packformat":8,"rppackformat":8,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"opti_FileCleanUp":true,"advanced_debug":false,"isLibrary":false}}