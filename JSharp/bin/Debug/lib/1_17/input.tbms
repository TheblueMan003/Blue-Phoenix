{"projectName":"input","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":null,"files":[{"name":"import","content":"import standard.java\r\nimport standard.entity_id\r\n","index":0},{"name":"scroll","content":"package input\n\nINT SLOT\nINT ScrollDelta\n\ndef scroll(){\n\tint x = @s.slot\n\t\n\tif (x == SLOT){\n\t\tScrollDelta = 0\n\t\tSLOT = x\n\t}\n\tif (x < SLOT){\n\t\tif(x < 3 && SLOT >= 7){\n\t\t\tScrollDelta = 1\n\t\t}\n\t\telse{\n\t\t\tScrollDelta = -1\n\t\t}\n\t\t\n\t\tSLOT = x\n\t}\n\tif (x > SLOT){\n\t\tif(x >= 7 && SLOT < 3){\n\t\t\tScrollDelta = -1\n\t\t}\n\t\telse{\n\t\t\tScrollDelta = 1\n\t\t}\n\t\t\n\t\tSLOT = x\n\t}\n}\ndef @inputInit scrollInit(){\n\tSLOT = @s.slot\t\n}\ndef lazy onScroll(int=>void $f){\n\tscroll()\n\tif (ScrollDelta != 0){\n\t\t$f(ScrollDelta)\n\t}\n}","index":0},{"name":"main","content":"package input","index":0},{"name":"event","content":"package input\n\nprivate enum eventList(json scoreboard){\n    Click(minecraft.used:minecraft.carrot_on_a_stick),\n    Jump(minecraft.custom:minecraft.jump),\n    Drop(minecraft.custom:minecraft.drop),\n    Die(minecraft.custom:minecraft.deaths),\n    Hit(minecraft.custom:minecraft.damage_dealt),\n    Relog(minecraft.custom:minecraft.leave_game),\n    Damage(minecraft.custom:minecraft.damage_taken),\n    BowShoot(minecraft.used:minecraft.bow),\n    CrossbowShoot(minecraft.used:minecraft.crossbow),\n    KillPlayer(minecraft.custom:minecraft.playerKillCount),\n    Kill(minecraft.custom:minecraft.totalKillCount),\n    Bred(minecraft.custom:minecraft.animals_bred),\n    CleanArmor(minecraft.custom:minecraft.clean_armor),\n    CleanBanner(minecraft.custom:minecraft.clean_banner),\n    OpenBarrel(minecraft.custom:minecraft.open_barrel),\n    BellRing(minecraft.custom:minecraft.bell_ring),\n    EatCakeSlice(minecraft.custom:minecraft.eat_cake_slice),\n    FillCauldron(minecraft.custom:minecraft.fill_cauldron),\n    OpenChest(minecraft.custom:minecraft.open_chest),\n    DamageAbsorbed(minecraft.custom:minecraft.damage_absorbed),\n    DamageBlockByShield(minecraft.custom:minecraft.damage_blocked_by_shield),\n    OpenEnderChest(minecraft.custom:minecraft.open_enderchest),\n}\n\nprivate enum eventParamList(json scoreboard){\n    Mined(minecraft.mined:minecraft.),\n    Break(minecraft.broken:minecraft.),\n    Craft(minecraft.crafted:minecraft.),\n    Use(minecraft.used:minecraft.),\n    PickUp(minecraft.picked_up:minecraft.),\n    Drop(minecraft.dropped:minecraft.),\n    Kill(minecraft.killed:minecraft.),\n    Killed(minecraft.killed_by:minecraft.)\n}\n\nprivate enum continuousEventList(json scoreboard){\n    Sneak(minecraft.custom:minecraft.sneak_time),\n    Walk(minecraft.custom:minecraft.walk_one_cm),\n    WalkOnWater(minecraft.custom:minecraft.walk_on_water_one_cm),\n    WalkUnderWater(minecraft.custom:minecraft:walk_under_water_one_cm),\n    Boat(minecraft.custom:minecraft.boat_one_cm),\n    Horse(minecraft.custom:minecraft.horse_one_cm),\n    Minecart(minecraft.custom:minecraft:minecart_one_cm),\n    Pig(minecraft.custom:minecraft:pig_one_cm),\n    Strider(minecraft.custom:minecraft:strider_one_cm),\n    Swim(minecraft.custom:minecraft.swim_one_cm),\n    Sprint(minecraft.custom:minecraft.sprint_one_cm),\n    Horse(minecraft.custom:minecraft.horse_one_cm),\n    Fly(minecraft.custom:minecraft.fly_one_cm),\n    Fall(minecraft.custom:minecraft.fall_one_cm),\n    Climb(minecraft.custom:minecraft.climb_one_cm)\n}\n\nforgenerate($e,eventList){\n    def lazy on$e(function $i){\n        INT $e = $e.scoreboard\n        def @inputInit $eInit(){\n            $e = 0\n        }\n\n        if ($e > 0){\n            $i()\n            $e = 0\n        }\n    }\n}\n\nforgenerate($e,eventParamList){\n    def lazy on$e(int $param, function $i){\n        INT $e = $e.scoreboard$param\n        def @inputInit $eInit(){\n            $e = 0\n        }\n\n        if ($e > 0){\n            $i()\n            $e = 0\n        }\n    }\n}\n\nforgenerate($e,continuousEventList){\n    def lazy on$e(function $i){\n        INT $e = $e.scoreboard\n        INT $ePrev\n        def @inputInit $eInit(){\n            $e = 0\n        }\n        if ($e > 0 && $ePrev == 0){\n            $i()\n            $ePrev = 1\n            $e = 0\n        }\n        if ($e == 0 && $ePrev == 1){\n            $ePrev = 0  \n        }\n    }\n    def lazy while$e(function $i){\n        INT $eCont = $e.scoreboard\n\n        if ($eCont > 0){\n            $i()\n            $eCont = 0\n        }\n    \n        def @inputInit $eInit(){\n            $eCont = 0\n        }\n    }\n}","index":0},{"name":"button","content":"package input\nprivate enum button(json funcname){\n    stone_button(stonebutton),\n    oak_button(oakbutton),\n    birch_button(birchbutton),\n    spruce_button(sprucebutton),\n    dark_oak_button(darkoakbutton),\n    acacia_button(acaciabutton),\n    jungle_button(junglebutton),\n    polished_blackstone_button(blackstonebutton),\n    warped_button(warpedbutton),\n    crimson_button(crimsonbutton)\n}\nprivate enum button_facing = north, east, west, south\nprivate enum button_face = floor,wall,ceiling\n\nforgenerate($button,button){\n    def lazy on$button.funcname(int $x, int $y, int $z,function $func){\n        positioned($x $y $z){\n            if (block(~ ~ ~ minecraft:$button[powered=true])){\n                $func()\n                forgenerate($facing,button_facing){\n                    forgenerate($face,button_face){\n                        if (block(~ ~ ~ minecraft:$button[face=$face,facing=$facing,powered=true])){\n                            /setblock ~ ~ ~ minecraft:$button[face=$face,facing=$facing,powered=false]\n                        }\n                    }\n                }\n            }\n        }\n    }\n}","index":0},{"name":"wasd","content":"package input\r\n\r\npublic struct MotionController{\r\n    float player_x\r\n    float player_y\r\n    float player_z\r\n    bool active\r\n    void=>void XPlusEvent\r\n    void=>void XMinusEvent\r\n    void=>void ZPlusEvent\r\n    void=>void ZMinusEvent\r\n    \r\n    def __init__(bool init = false, void=>void onXPlus = null,\r\n        void=>void onXMinus = null, void=>void onZPlus = null,\r\n    void=>void onZMinus = null){\r\n        XPlusEvent = onXPlus\r\n        XMinusEvent = onXMinus\r\n        ZPlusEvent = onZPlus\r\n        ZMinusEvent = onZMinus\r\n        if (init){\r\n            start()\r\n        }\r\n    }\r\n    \r\n    public void start(){\r\n        player_x, player_y, player_z = @s.x, @s.y, @s.z\r\n        active = true\r\n    }\r\n    public void stop(){\r\n        active = false\r\n    }\r\n    public lazy tick(){\r\n        motionControll()\r\n    }\r\n    private void motionControll(){\r\n        float nx,ny,nz = vector.position()\r\n        float ax = math.abs(nx-player_x)\r\n        float az = math.abs(nz-player_z)\r\n        if (ax > az){\r\n            if (nx < player_x){\r\n                XMinusEvent()\r\n                TPBack()\r\n            }\r\n            if (nx > player_x){\r\n                XPlusEvent()\r\n                TPBack()\r\n            }\r\n        }\r\n        if (az > ax){\r\n            if (nz < player_z){\r\n                ZMinusEvent()\r\n                TPBack()\r\n            }\r\n            if (nz > player_z){\r\n                ZPlusEvent()\r\n                TPBack()\r\n            }\r\n        }\r\n    }\r\n    \r\n    public void TPBack(){\r\n        at(player_x, player_y, player_z){\r\n            /tp @s ~ ~ ~\r\n        }\r\n    }\r\n}","index":0},{"name":"dimension","content":"package entity\n\npredicate overworld(){\n\t\"condition\": \"minecraft:location_check\",\n\t\"predicate\": {\n\t\t\"dimension\": \"minecraft:overworld\"\n\t}\n}\n\npredicate the_end(){\n\t\"condition\": \"minecraft:location_check\",\n\t\"predicate\": {\n\t\t\"dimension\": \"minecraft:the_end\"\n\t}\n}\n\npredicate nether(){\n\t\"condition\": \"minecraft:location_check\",\n\t\"predicate\": {\n\t\t\"dimension\": \"minecraft:the_nether\"\n\t}\n}\n","index":0},{"name":"effect","content":"package entity\n\npredicate effect($effect,$amplifier,$duration){\n\t\"condition\": \"minecraft:entity_properties\",\n\t\"entity\": \"this\",\n\t\"predicate\": {\n\t\t\"targeted_entity\": {\n\t\t\t\"effects\": {\n\t\t\t\t\"minecraft:$effect\": {\n\t\t\t\t\t\"amplifier\": $amplifier,\n\t\t\t\t\t\"duration\": $duration\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\npredicate effect($effect,$amplifier){\n\t\"condition\": \"minecraft:entity_properties\",\n\t\"entity\": \"this\",\n\t\"predicate\": {\n\t\t\"targeted_entity\": {\n\t\t\t\"effects\": {\n\t\t\t\t\"minecraft:$effect\": {\n\t\t\t\t\t\"amplifier\": $amplifier\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\npredicate effect($effect){\n\t\"condition\": \"minecraft:entity_properties\",\n\t\"entity\": \"this\",\n\t\"predicate\": {\n\t\t\"targeted_entity\": {\n\t\t\t\"effects\": {\n\t\t\t\t\"minecraft:$effect\": {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","index":0},{"name":"entity","content":"package entity\n\npredicate onFire(){\n    \"condition\": \"minecraft:entity_properties\",\n    \"entity\": \"this\",\n    \"predicate\": {\n        \"flags\": {\n            \"is_on_fire\": true\n        }\n    }\n}\n\npredicate isSneaking(){\n    \"condition\": \"minecraft:entity_properties\",\n    \"entity\": \"this\",\n    \"predicate\": {\n        \"flags\": {\n            \"is_sneaking\": true\n        }\n    }\n}\n\npredicate isSprinting(){\n    \"condition\": \"minecraft:entity_properties\",\n    \"entity\": \"this\",\n    \"predicate\": {\n        \"flags\": {\n            \"is_sprinting\": true\n        }\n    }\n}\n\npredicate isSwimming(){\n    \"condition\": \"minecraft:entity_properties\",\n    \"entity\": \"this\",\n    \"predicate\": {\n        \"flags\": {\n            \"is_swimming\": true\n        }\n    }\n}\n\npredicate isBaby(){\n    \"condition\": \"minecraft:entity_properties\",\n    \"entity\": \"this\",\n    \"predicate\": {\n        \"flags\": {\n            \"is_baby\": true\n        }\n    }\n}\n","index":0},{"name":"player","content":"package entity\n\npredicate xp($amount){\n\t\"condition\": \"minecraft:entity_properties\",\n\t\"entity\": \"this\",\n\t\"predicate\": {\n\t\t\"player\": {\n\t\t\t\"level\": $amount\n\t\t}\n\t}\n}\n\npredicate xp($min,$max){\n\t\"condition\": \"minecraft:entity_properties\",\n\t\"entity\": \"this\",\n\t\"predicate\": {\n\t\t\"player\": {\n\t\t\t\"level\": {\n\t\t\t\t\"min\": $min,\n\t\t\t\t\"max\": $max\n\t\t\t}\n\t\t}\n\t}\n}\n\npredicate creative(){\n\t\"condition\": \"minecraft:entity_properties\",\n\t\"entity\": \"this\",\n\t\"predicate\": {\n\t\t\"player\": {\n\t\t\t\"gamemode\": \"creative\"\n\t\t}\n\t}\n}\n\npredicate survival(){\n\t\"condition\": \"minecraft:entity_properties\",\n\t\"entity\": \"this\",\n\t\"predicate\": {\n\t\t\"player\": {\n\t\t\t\"gamemode\": \"survival\"\n\t\t}\n\t}\n}\n\npredicate adventure(){\n\t\"condition\": \"minecraft:entity_properties\",\n\t\"entity\": \"this\",\n\t\"predicate\": {\n\t\t\"player\": {\n\t\t\t\"gamemode\": \"adventure\"\n\t\t}\n\t}\n}\n\npredicate spectator(){\n\t\"condition\": \"minecraft:entity_properties\",\n\t\"entity\": \"this\",\n\t\"predicate\": {\n\t\t\"player\": {\n\t\t\t\"gamemode\": \"spectator\"\n\t\t}\n\t}\n}\n","index":0},{"name":"struct","content":"package entity\r\n\r\npublic struct entitylist{\r\n    def lazy __init__(int $select){\r\n        tag($select,$this)\r\n    }\r\n    def lazy withAll(function $f){\r\n        with(@e[tag=$this]){\r\n            $f()\r\n        }\r\n    }\r\n    def lazy withAll(bool $v,function $f){\r\n        with(@e[tag=$this],$v){\r\n            $f()\r\n        }\r\n    }\r\n    def lazy withAll(bool $v,int $cond,function $f){\r\n        with(@e[tag=$this],$v, $cond){\r\n            $f()\r\n        }\r\n    }\r\n    \r\n    def lazy withFirst(function $f){\r\n        with(@e[tag=$this,limit=1]){\r\n            $f()\r\n        }\r\n    }\r\n    def lazy withFirst(bool $v,function $f){\r\n        with(@e[tag=$this,limit=1],$v){\r\n            $f()\r\n        }\r\n    }\r\n    def lazy withFirst(bool $v,int $cond,function $f){\r\n        with(@e[tag=$this,limit=1],$v, $cond){\r\n            $f()\r\n        }\r\n    }\r\n    \r\n    def lazy withNearest(function $f){\r\n        with(@e[tag=$this,limit=1,sort=nearest]){\r\n            $f()\r\n        }\r\n    }\r\n    def lazy withNearest(bool $v,function $f){\r\n        with(@e[tag=$this,limit=1,sort=nearest],$v){\r\n            $f()\r\n        }\r\n    }\r\n    def lazy withNearest(bool $v,int $cond,function $f){\r\n        with(@e[tag=$this,limit=1,sort=nearest],$v, $cond){\r\n            $f()\r\n        }\r\n    }\r\n    \r\n    def lazy withRandom(function $f){\r\n        with(@e[tag=$this,limit=1,sort=random]){\r\n            $f()\r\n        }\r\n    }\r\n    def lazy withRandom(bool $v, function $f){\r\n        with(@e[tag=$this,limit=1,sort=random],$v){\r\n            $f()\r\n        }\r\n    }\r\n    def lazy withRandom(bool $v,int $cond, function $f){\r\n        with(@e[tag=$this,limit=1,sort=random],$v, $cond){\r\n            $f()\r\n        }\r\n    }\r\n    \r\n    def lazy kill(){\r\n        /kill @e[tag=$this]\r\n    }\r\n    def lazy tp(int $dest){\r\n        /tp @e[tag=$this] $dest\r\n    }\r\n    def lazy count():int{\r\n        int c = 0\r\n        with(@e[tag=$this]){\r\n            c++\r\n        }\r\n        return c\r\n    }\r\n    def clear(){\r\n        untag(@e[tag=$this],$this)\r\n    }\r\n    def lazy remove(){\r\n        untag(@s[tag=$this],$this)\r\n    }\r\n    def lazy remove(int $select){\r\n        untag($select,$this)\r\n    }\r\n    def lazy add(){\r\n        tag(@s,$this)\r\n    }\r\n    def lazy add(int $select){\r\n        tag($select,$this)\r\n    }\r\n}","index":0},{"name":"struct2","content":"package entity\r\n\r\npublic struct playerlist{\r\n    def lazy __init__(int $select){\r\n        tag($select,$this)\r\n    }\r\n    def lazy withAll(function $f){\r\n        with(@a[tag=$this]){\r\n            $f()\r\n        }\r\n    }\r\n    def lazy withAll(bool $v,function $f){\r\n        with(@a[tag=$this],$v){\r\n            $f()\r\n        }\r\n    }\r\n    def lazy withAll(bool $v,int $cond,function $f){\r\n        with(@a[tag=$this],$v, $cond){\r\n            $f()\r\n        }\r\n    }\r\n    \r\n    def lazy withFirst(function $f){\r\n        with(@a[tag=$this,limit=1]){\r\n            $f()\r\n        }\r\n    }\r\n    def lazy withFirst(bool $v,function $f){\r\n        with(@a[tag=$this,limit=1],$v){\r\n            $f()\r\n        }\r\n    }\r\n    def lazy withFirst(bool $v,int $cond,function $f){\r\n        with(@a[tag=$this,limit=1],$v, $cond){\r\n            $f()\r\n        }\r\n    }\r\n    \r\n    def lazy withNearest(function $f){\r\n        with(@a[tag=$this,limit=1,sort=nearest]){\r\n            $f()\r\n        }\r\n    }\r\n    def lazy withNearest(bool $v,function $f){\r\n        with(@a[tag=$this,limit=1,sort=nearest],$v){\r\n            $f()\r\n        }\r\n    }\r\n    def lazy withNearest(bool $v,int $cond,function $f){\r\n        with(@a[tag=$this,limit=1,sort=nearest],$v, $cond){\r\n            $f()\r\n        }\r\n    }\r\n    \r\n    def lazy withRandom(function $f){\r\n        with(@a[tag=$this,limit=1,sort=random]){\r\n            $f()\r\n        }\r\n    }\r\n    def lazy withRandom(bool $v, function $f){\r\n        with(@a[tag=$this,limit=1,sort=random],$v){\r\n            $f()\r\n        }\r\n    }\r\n    def lazy withRandom(bool $v,int $cond, function $f){\r\n        with(@a[tag=$this,limit=1,sort=random],$v, $cond){\r\n            $f()\r\n        }\r\n    }\r\n    \r\n    def lazy kill(){\r\n        /kill @a[tag=$this]\r\n    }\r\n    def lazy tp(int $dest){\r\n        /tp @a[tag=$this] $dest\r\n    }\r\n    def lazy count():int{\r\n        int c = 0\r\n        with(@a[tag=$this]){\r\n            c++\r\n        }\r\n        return c\r\n    }\r\n    def clear(){\r\n        untag(@a[tag=$this],$this)\r\n    }\r\n    def lazy remove(){\r\n        untag(@s[tag=$this],$this)\r\n    }\r\n    def lazy remove(int $select){\r\n        untag($select,$this)\r\n    }\r\n    def lazy add(){\r\n        tag(@s,$this)\r\n    }\r\n    def lazy add(int $select){\r\n        tag($select,$this)\r\n    }\r\n}","index":0},{"name":"summon","content":"package entity\n\ndef lazy summon(int $mob, params $param){\n    define json $data = {}\n    forgenerate($i,$param){\n        define json $data += {$i}\n    }\n    /summon $mob $data\n}","index":0},{"name":"team","content":"package entity\n\npredicate team($team){\n\t\"condition\": \"minecraft:entity_properties\",\n\t\"entity\": \"this\",\n\t\"predicate\": {\n\t\t\"targeted_entity\": {\n\t\t\t\"team\": \"$team\"\n\t\t}\n\t}\n}\n","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":24},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.16.5","ExportAsZip":false,"packformat":6,"CompilerCoreName":"java","isLibrary":false}}