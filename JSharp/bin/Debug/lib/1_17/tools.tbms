{"projectName":"tool","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":"Made With BluePhoenix","files":[{"name":"import","content":"import standard.java","index":0},{"name":"main","content":"package tools\n\nINT X, Y, Z\n\n\"\"\"\nexecute func at (x, y, z) as an entity\n\"\"\"\ndef locatedAs(float x, float y, float z, function func){\n\t/summon marker ~ ~ ~ {Tags:[\"tool_loc\"]}\n\t@e[tag=tool_loc,limit=1].x=x\n\t@e[tag=tool_loc,limit=1].y=y\n\t@e[tag=tool_loc,limit=1].z=z\n\twith(@e[tag=tool_loc],true){\n\t\tuntag(tool_loc)\n\t\tfunc()\n\t\tkill(@s)\n\t}\n}\n\n\"\"\"\nexecute func at (x, y, z)\n\"\"\"\ndef locatedAt(float x, float y, float z, function func){\n\t/summon marker ~ ~ ~ {Tags:[\"tool_loc\"]}\n\t@e[tag=tool_loc,limit=1].x=x\n\t@e[tag=tool_loc,limit=1].y=y\n\t@e[tag=tool_loc,limit=1].z=z\n\tat(@e[tag=tool_loc]){\n\t\tuntag(@e[tag=tool_loc],tool_loc)\n\t\tfunc()\n\t\tkill(@e[tag=tool_loc])\n\t}\n}\n\nalias positionedAt as locatedAt\nalias positionedAs as locatedAs\n\n\ndef setSpawn(){\n\tX = @s.x\n\tY = @s.x\n\tZ = @s.z\n}\n\ndef tpSpawn(){\n\tfunction<(),()> lambda = () => (/tp @s ~ ~ ~)\n\tlocatedAt(X, Y, Z, lambda)\n}\n\n\"\"\"\ncreate a team, make everyone join it and disable PVP and collision\n\"\"\"\ndef disablePVP(){\n\t/team add Player\n\t/team join Player @a\n\t/team modify Player collisionRule never\n\t/team modify Player friendlyFire false\n\t/team modify Player deathMessageVisibility never\n\t/team modify Player color gold\n\tgamerule(maxEntityCramming, 1000)\n}","index":0},{"name":"more_cmd","content":"package tools\n\n\"\"\"\nset a block at (x, y, z)\n\"\"\"\ndef lazy setblockat(float x, float y, float z, int block){\n    /summon marker ~ ~ ~ {Tags:[\"tool_sba\"]}\n    @e[tag=tool_sba,limit=1].x=x\n    @e[tag=tool_sba,limit=1].y=y\n    @e[tag=tool_sba,limit=1].z=z\n    at(@e[tag=tool_sba]){\n        setblock($block)\n    }\n    kill(@e[tag=tool_sba])\n}\n\n\"\"\"\nfill from (sx, sy, sz) to (ex, ey, ez)\n\"\"\"\ndef lazy fillat(float sx, float sy, float sz, float ex, float ey, float ez, int $block){\n    /summon marker ~ ~ ~ {Tags:[\"tool_sba\"]}\n    int j\n    if (sx > ex){\n        j = ex\n        ex = sx\n        sx = j\n    }\n    if (sy > ey){\n        j = ey\n        ey = sy\n        sy = j\n    }\n    if (sz > ez){\n        j = ez\n        ez = sz\n        sz = j\n    }\n    for(int x = sx;x <= sx;x++){\n        @e[tag=tool_sba,limit=1].x=x\n        for(int y = sy;y <= sy;y++){\n            @e[tag=tool_sba,limit=1].y=y\n            for(int z = sz;z <= sz;z++){\n                @e[tag=tool_sba,limit=1].z=z\n                at(@e[tag=tool_sba]){\n                    setblock($block)\n                }\n            }\n        }\n    }\n    kill(@e[tag=tool_sba])\n}\n\n\"\"\"\nexecute command from (sx, sy, sz) to (ex, ey, ez)\n\"\"\"\ndef fillExecute(int sx, int sy, int sz, int ex, int ey, int ez, function action){\n    /summon marker ~ ~ ~ {Tags:[\"tool_sba\"]}\n    for(int x = sx;x <= sx;x++){\n        @e[tag=tool_sba,limit=1].x = x\n        for(int y = sy;y <= sy;y++){\n            @e[tag=tool_sba,limit=1].y = y\n            for(int z = sz;z <= sz;z++){\n                @e[tag=tool_sba,limit=1].z = z\n                at(@e[tag=tool_sba]){\n                    action()\n                }\n            }\n        }\n    }\n    kill(@e[tag=tool_sba])\n}","index":0},{"name":"count","content":"package tools\n\nint lazy count(entity $selector){\n    int _val = 0\n    with($selector){\n        _val++\n    }\n    return(_val)\n}\n\nint lazy countWithCondition(entity $selector,string $condition){\n    int _val = 0\n    with($selector,false,$condition){\n        _val++\n    }\n    return(_val)\n}","index":0},{"name":"best","content":"package tools\r\n\r\ndef lazy findBest(entity $selector,int $var, int $tagGive){\r\n    int _prev = int.minValue\r\n    with($selector){\r\n        if ($var == _prev){\r\n            tag($tagGive)\r\n        }\r\n        if ($var > _prev){\r\n            unitag(@s,$tagGive)\r\n            _prev = $var\r\n        }\r\n    }\r\n}","index":0},{"name":"worst","content":"package tools\n\ndef lazy findWorst(entity $selector,int $var, int $tagGive){\n    int _prev = int.maxValue\n    with($selector){\n        if ($var == _prev){\n            tag($tagGive)   \n        }\n        if ($var > _prev){\n            unitag(@s,$tagGive)\n            _prev = $var\n        }\n    }\n}","index":0},{"name":"enum","content":"package tools\n\n[inplace]\ndef lazy enumSetter(int $var,int $enum){\n    forgenerate($value,$enum){\n        def set$value(){\n            $var = $value\n        }\n    }\n}","index":0},{"name":"rank","content":"package tools\r\n\r\ndef lazy rankBest(entity $selector,int $var, int $varOut){\r\n    with($selector){\r\n        $varOut = 1\r\n    }\r\n    with($selector){\r\n        int _val = $var\r\n        with($selector,false, $var < _val){\r\n            $varOut ++\r\n        }\r\n    }\r\n}\r\n\r\ndef lazy rankBestFloat(entity $selector,int $var, int $varOut){\r\n    with($selector){\r\n        $varOut = 1\r\n    }\r\n    with($selector){\r\n        float _val = $var\r\n        with($selector,false, $var < _val){\r\n            $varOut ++\r\n        }\r\n    }\r\n}","index":0},{"name":"scoreboard","content":"package tools\n\ndef lazy displayScore(int $var, json $text){\n    /scoreboard objectives modify $var.scoreboardname displayname $text\n    /scoreboard objectives setdisplay sidebar $var.scoreboardname\n}\n\ndef lazy swap(int $a, int $b){\n    /scoreboard players operation $a.scoreboard >< $b.scoreboard\n}","index":0},{"name":"random","content":"package tools\n\ndef lazy explode(int $power){\n    /summon creeper ~ ~ ~ {powered:0,ExplosionRadius:$power,Fuse:0,Invisible:1,Invulnerable:1b}\n}\n\ndef lazy summonFallingBlock(int $block){\n    align(xyz){\n        /summon minecraft:falling_block ~0.5 ~ ~0.5 {BlockState:{Name:$block},Time:1, DropItem:0}\n    }\n}\ndef lazy summonFallingBlockNoGravity(int $block){\n    align(xyz){\n        /summon minecraft:falling_block ~0.5 ~ ~0.5 {BlockState:{Name:$block},Time:1, DropItem:0,NoGravity:1}\n    }\n}\ndef lazy summonMovableFallingBlock(int $block){\n    /summon armor_stand ~ ~ ~ {NoGravity:1,Invisible:1,Marker:1,Tags:[\"falling_block\"],Passengers:[{id:falling_block,Time:1,BlockState:{Name:$block}}]}\n}\ndef lazy summonPointer(int $tag){\n    /summon marker ~ ~ ~ {Tags:[$tag]}  \n}\ndef lazy loottableChest(int $loottable){\n    /setblock ~ ~ ~ minecraft:chest{LootTable:$loottable} replace   \n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":[]},"tick":{"values":[]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":26},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_16_5/"],"MCVersion":"1.16.5","ExportAsZip":false,"packformat":6,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"advanced_debug":false,"isLibrary":false}}