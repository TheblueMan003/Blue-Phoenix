{"projectName":"heap","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":"","files":[{"name":"import","content":"import standard.java\nimport standard.entity_id\nimport standard.object","index":0},{"name":"heap","content":"package .\n\nstruct pointer{\n    int index\n    def __init__(int i){\n        index = i\n    }\n    def set(int i, int value){\n        _write(index+i, value)\n    }\n    int get(int i){\n        int ret = _read(index+i)\n        return ret\n    }\n    def lazy setEntityNbt(int $i, int $path){\n        _writeEntityNbt(index+$i, $path)\n    }\n    def lazy getEntityNbt(int $i, int $path){\n        _readEntityNbt(index+$i, $path)\n    }\n    def lazy setBlockNbt(int $i, int $pos, int $path){\n        _writeBlockNbt(index+$i, $pos, $path)\n    }\n    def lazy getBlockNbt(int $i, int $pos, int $path){\n        _readBlockNbt(index+$i, $pos, $path)\n    }\n    \n    def __add__(int shift){\n        index+=shift\n    }\n    def __sub__(int shift){\n        index-=shift\n    }\n}\nstruct address{\n    int x,y,z,u\n    def __init__(int i){\n        u = i % 27\n        x = (i / 27)%16\n        z = (i / (27*16))%16\n        y = (i / (27*16*16))\n        while(y >= 256){\n            y-=256\n            x += 16\n        }\n    }\n}\ndefine int $heap_x = 1000000\ndefine int $heap_y = 0\ndefine int $heap_z = 1000000\n\nint globalHeapPointer\ndef init_heap(){\n    /forceload add $heap_x $heap_z\n    globalHeapPointer = 0\n}\n\npointer malloc(int size){\n    pointer ret = pointer(globalHeapPointer)\n    \n    \n    /summon marker $heap_x $heap_y $heap_z {Tags:[\"heap_pointer\"]}\n    for(int i = 0;i < size; i+=$eval(27*16*16)){\n        address a = address(globalHeapPointer+i)\n        with(@e[tag=heap_pointer],true){\n            @s.x += a.x\n            @s.y += a.y\n            @s.z += a.z\n            \n            at(@s){\n                if (!block(~ ~ ~ barrel)){\n                    _initblock()\n                }\n            }\n            /tp @s ~ ~ ~\n        }\n    }\n    kill(@e[tag=heap_pointer])\n    \n    globalHeapPointer += size\n    \n    return ret\n}\ndef calloc(int nb, int size){\n    malloc(nb*size)\n}\ndef _initblock(){\n    /fill ~ ~ ~ ~15 ~ ~15 minecraft:barrel{Items:[{Count:1b,Slot:0b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:1b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:2b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:3b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:4b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:5b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:6b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:7b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:8b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:9b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:10b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:11b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:12b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:13b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:14b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:15b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:16b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:17b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:18b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:19b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:20b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:21b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:22b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:23b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:24b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:25b,id:\"minecraft:diamond\",tag:{value:0}},{Count:1b,Slot:26b,id:\"minecraft:diamond\",tag:{value:0}}]}\n}\nlazy _setdata(int $index, int $value){\n    switch($index){\n        forgenerate($i,0,26){\n            $i -> /execute store result block ~ ~ ~ Items[$i].tag.value int 1 run scoreboard players get $value.scoreboard\n        }\n    }\n}\nlazy _getdata(int $index, int $value){\n    switch($index){\n        forgenerate($i,0,26){\n            $i -> /execute store result score $value.scoreboard run data get block ~ ~ ~ Items[$i].tag.value\n        }\n    }\n}\n\nlazy _setentitynbt(int $index, int $entity, int $path){\n    switch($index){\n        forgenerate($i,0,26){\n            $i -> /data modify block ~ ~ ~ Items[$i].tag.nbt set from entity $entity $path\n        }\n    }\n}\nlazy _getentitynbt(int $index, int $entity, int $path){\n    switch($index){\n        forgenerate($i,0,26){\n            $i -> /data modify entity $entity $path set from block ~ ~ ~ Items[$i].tag.nbt\n        }\n    }\n}\n\nlazy _setblocknbt(int $index, int $pos, int $path){\n    switch($index){\n        forgenerate($i,0,26){\n            $i -> /data modify block ~ ~ ~ Items[$i].tag.nbt set from block $pos $path\n        }\n    }\n}\nlazy _getblocknbt(int $index, int $pos, int $path){\n    switch($index){\n        forgenerate($i,0,26){\n            $i -> /data modify block $pos $path set from block ~ ~ ~ Items[$i].tag.nbt\n        }\n    }\n}\nint _read(int p){\n    int ret\n    address a = address(p)\n    /summon marker $heap_x $heap_y $heap_z {Tags:[\"heap_pointer\"]}\n    with(@e[tag=heap_pointer],true){\n        @s.x += a.x\n        @s.y += a.y\n        @s.z += a.z\n        \n        at(@s){\n            _getdata(a.u, ret)\n        }\n        kill()\n    }\n    return ret\n}\nvoid _write(int p, int data){\n    address a = address(p)\n    /summon marker $heap_x $heap_y $heap_z {Tags:[\"heap_pointer\"]}\n    with(@e[tag=heap_pointer],true){\n        @s.x += a.x\n        @s.y += a.y\n        @s.z += a.z\n        \n        at(@s){\n            _setdata(a.u, data)\n        }\n        kill()\n    }\n}\n\nlazy void _readentitynbt(int p, int $path){\n    int ret\n    address a = address(p)\n    /summon marker $heap_x $heap_y $heap_z {Tags:[\"heap_pointer\"]}\n    tag(heap.ptr)\n    with(@e[tag=heap_pointer],true){\n        @s.x += a.x\n        @s.y += a.y\n        @s.z += a.z\n        \n        at(@s){\n            _getentitynbt(a.u, @e[tag=heap.ptr,limit=1], $path)\n        }\n        kill()\n    }\n    untag(heap.ptr)\n}\nlazy void _writeentitynbt(int $p, int $path){\n    address a = address($p)\n    /summon marker $heap_x $heap_y $heap_z {Tags:[\"heap_pointer\"]}\n    tag(heap.ptr)\n    with(@e[tag=heap_pointer],true){\n        @s.x += a.x\n        @s.y += a.y\n        @s.z += a.z\n        \n        at(@s){\n            _setentitynbt(a.u, @e[tag=heap.ptr,limit=1], $path)\n        }\n        kill()\n    }\n    untag(heap.ptr)\n}\n\nlazy void _readblocknbt(int p, int $pos, int $path){\n    int ret\n    address a = address(p)\n    /summon marker $heap_x $heap_y $heap_z {Tags:[\"heap_pointer\"]}\n    with(@e[tag=heap_pointer],true){\n        @s.x += a.x\n        @s.y += a.y\n        @s.z += a.z\n        \n        at(@s){\n            _getblocknbt(a.u, $pos, $path)\n        }\n        kill()\n    }\n}\nlazy void _writeblocknbt(int p, int $pos, int $path){\n    address a = address(p)\n    /summon marker $heap_x $heap_y $heap_z {Tags:[\"heap_pointer\"]}\n    with(@e[tag=heap_pointer],true){\n        @s.x += a.x\n        @s.y += a.y\n        @s.z += a.z\n        \n        at(@s){\n            _setblocknbt(a.u, $entitposy, $path)\n        }\n        kill()\n    }\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":1},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_17/","./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.16.5","ExportAsZip":false,"packformat":7,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"opti_FileCleanUp":true,"advanced_debug":false,"isLibrary":false}}