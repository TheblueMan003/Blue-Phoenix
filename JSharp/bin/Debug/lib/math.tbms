{"projectName":"math","datapackDirectory":null,"offuscate":false,"files":[{"name":"import","content":"import exception","index":0},{"name":"constant","content":"package math\n\nlazy float pi(){\n\treturn(3.1415)\n}\nlazy float e(){\n\treturn(2.718)\n}","index":0},{"name":"abs","content":"package math\n\n\"\"\"\nGive sign of argument\n-1 if value smaller than 0 \n1 otherwise\n\"\"\"\ndef sign(float value):int{\n\tif (value >= 0){\n\t\treturn(1)\n\t}\n\tif (value < 0){\n\t\treturn(-1)\n\t}\n}\n\n\"\"\"\nGive sign of argument\n-1 if value smaller than 0 \n1 otherwise\n\"\"\"\ndef sign(int value):int{\n\tif (value >= 0){\n\t\treturn(1)\n\t}\n\tif (value < 0){\n\t\treturn(-1)\n\t}\n}\n\n\"\"\"\nGive magnitude of argument\nv if v > 0\n-v otherwise\n\"\"\"\ndef abs(float value):float{\n\tif (value >= 0){\n\t\treturn(value)\n\t}\n\tif (value < 0){\n\t\treturn(-value)\n\t}\n}\n\n\"\"\"\nGive magnitude of argument\nv if v > 0\n-v otherwise\n\"\"\"\ndef abs(int value):int{\n\tif (value >= 0){\n\t\treturn(value)\n\t}\n\tif (value < 0){\n\t\treturn(-value)\n\t}\n}\n\n\"\"\"\nGive a mod b the \"correct way\"\n\"\"\"\ndef mod(float a, float b):float{\n\tfloat ret = a+b\n\tret %= b\n\treturn(ret)\n}\n\n\"\"\"\nGive a mod b the \"correct way\"\n\"\"\"\ndef mod(int a, int b):int{\n\tint ret = a+b\n\tret %= b\n\treturn(ret)\n}\n\n\"\"\"\nRound float to closest value\n\"\"\"\ndef round(float value):float{\n\tvalue += 0.5\n\tvalue /= 1000\n\tvalue *= 1000\n\treturn(value)\n}\n\n\"\"\"\nRound float to lowest value\n\"\"\"\ndef floor(float value):float{\n\tvalue /= 1000\n\tvalue *= 1000\n\treturn(value)\n}\n\n\"\"\"\nRound float to upper value\n\"\"\"\ndef ceil(float value):float{\n\tvalue += 0.999\n\tvalue /= 1000\n\tvalue *= 1000\n\treturn(value)\n}","index":0},{"name":"sqrt","content":"package math\n\n\"\"\"\nreturn true if difference between x and y smaller than maxDiff\n\"\"\"\ndef isClose(float x, float y, float maxDiff = 0.01):bool{\n\tfloat diff = x - y\n\tdiff = abs(diff)\n\n\tif (diff < maxDiff){\n\t\treturn(1)\n\t}\n\tif (diff >= maxDiff){\n\t\treturn(0)\n\t}\n}\n\n\"\"\"\nGive squart root of value\n\"\"\"\ndef sqrt(float value):float{\n\tif (value < 0){\n\t\texception.invalidArgument(\"value in math.sqrt\")\n\t}\n\n\tdef iterate(float guess):float{\n\t\tfloat next \n\t\tnext = (value/guess)\n\t\tnext += guess\n\t\tnext /= 2\n\t\tbool close = isClose(next, guess)\n\n\t\tif (close){\n\t\t\treturn(next)\n\t\t}\n\t\tif(!close){\n\t\t\treturn(iterate(next))\n\t\t}\n\t}\n\treturn(iterate(value))\n}","index":0},{"name":"factorial","content":"package math\n\n\"\"\"\nreturn x!\n\"\"\"\ndef factorial(int x):int{\n\tif (x < 0){\n\t\texception.invalidArgument(\"X in math.factorial\")\n\t}\n\tint res = 1\n\n\tfor(int i = 1;i <= x;i++){\n\t\tres *= i\n\t}\n\treturn(res)\n}","index":0},{"name":"exp","content":"package math\n\n\"\"\"\nGive x^n\n\"\"\"\ndef pow(float x, int n, float m = 1):float{\n\tif (n < 0){\n\t\texception.invalidArgument(\"n in math.pow\")\n\t}\n\tif (n == 0){\n\t\treturn(1)\n\t}\n\tif (n == 1){\n\t\tfloat ret = x * m\n\t\treturn(ret)\n\t}\n\tif (n > 1){\n\t\tint parity = n % 2\n\t\t\n\t\tif (parity == 1){\n\t\t\tm *= x\n\t\t\tn -= 1\n\t\t}\n\t\tn /= 2\n\t\tx *= x\n\t\treturn(pow(x, n, m))\n\t}\n}\n\n\"\"\"\nGive x^n\n\"\"\"\ndef pow(int x, int n, int m = 1):int{\n\tif (n < 0){\n\t\texception.invalidArgument(\"n in math.intPow\")\n\t}\n\tif (n == 0){\n\t\treturn(1)\n\t}\n\tif (n == 1){\n\t\tint ret = x * m\n\t\treturn(ret)\n\t}\n\tif (n > 1){\n\t\tint parity = x % 2\n\t\t\n\t\tif (parity == 1){\n\t\t\tm *= x\n\t\t\tn -= 1\n\t\t}\n\t\tn /= 2\n\t\tx*=x\n\t\treturn(pow(x, n, m))\n\t}\n}","index":0},{"name":"trigo","content":"package math\n\n\"\"\"\nGive sin(x) with a polynom of taylor of degree deg\n\"\"\"\ndef sin(float x, int deg = 7):float{\n\tx %= pi*2\n\tfloat y = 0\n\n\tfor(int n = 0;n<=deg;n++){\n\t\tint k = n*2+1\n\t\tfloat a =  pow(x, k)\n\t\tfloat b = factorial(k)\n\t\tfloat t =  a / b\n\n\t\tint j = n % 2\n\n\t\tif (j == 0)\n\t\t\ty += t\n\t\tif (j == 1)\n\t\t\ty -= t\n\t}\n\n\treturn(y)\n}\n\n\"\"\"\nGive cos(x) with a polynom of taylor of degree deg\n\"\"\"\ndef cos(float x, int deg = 7):float{\n\tx %= pi*2\n\tx = abs(x)\n\tfloat y = 0\n\n\tfor(int n = 0;n<=deg;n++){\n\t\tint k = n*2\n\t\tfloat a =  pow(x, k)\n\t\tfloat b = factorial(k)\n\t\tfloat t =  a / b\n\n\t\tint j = n % 2\n\n\t\tif (j == 0)\n\t\t\ty += t\n\t\tif (j == 1)\n\t\t\ty -= t\n\t}\n\n\treturn(y)\n}\n\n\"\"\"\nGive tan(x) with a polynom of taylor of degree deg\n\"\"\"\ndef tan(float x, int deg = 7):float{\n\tfloat s = sin(x, deg)\n\tfloat c = cos(x, deg)\n\tfloat y = s/c\n\treturn(y)\n}","index":0},{"name":"trigo2","content":"package math\n\n\"\"\"\nGive arcsin(x) with a polynom of taylor of degree deg\n\"\"\"\ndef arcsin(float x):float{\n\tif (x < -1 || x > 1){\n\t\texception.invalidArgument(\"x is out of bound for arcsin\")\n\t}\n\tfloat y = 0\n\tfor(int i=0;i<5;i++){\n\t\tfloat k = (factorial(2*i) / (pow(4, i) * pow(factorial(i), 2) * (2 * i + 1))) * pow(x, 2 * i + 1)\n\t\ty+=k\n\t}\n\treturn(y)\n}\n\n\"\"\"\nGive arccos(x) with a polynom of taylor of degree deg\n\"\"\"\ndef arccos(float x):float{\n\treturn(pi / 2 - arcsin(x))\n}\n\n\"\"\"\nGive arctan(x) with a polynom of taylor of degree deg\n\"\"\"\ndef arctan(float x):float{\n\tfloat y = 0\n\tfor(float i=0;i<15;i++){\n\t\tfloat k = (pow(-1, i)/(2*i+1))*pow(x, 2*i+1)\n\t\ty+=k\n\t}\n\treturn(y)\n}","index":0},{"name":"trigo3","content":"package math\n\n\"\"\"\nGive sinh(x) with a polynom of taylor of degree deg\n\"\"\"\ndef sinh(float x):float{\n\tfloat y = 0\n\tfor(float i=0;i<15;i++){\n\t\tfloat k = pow(x, 2*i+1)/factorial(2*i+1)\n\t\ty+=k\n\t}\n\treturn(y)\n}\n\n\"\"\"\nGive cosh(x) with a polynom of taylor of degree deg\n\"\"\"\ndef cosh(float x):float{\n\tfloat y = 0\n\tfor(float i=0;i<15;i++){\n\t\tfloat k = pow(x, 2*i)/factorial(2*i)\n\t\ty+=k\n\t}\n\treturn(y)\n}","index":0},{"name":"bound","content":"package math\n\n\"\"\"\nGive max between a and b\n\"\"\"\ndef max(int a, int b):int{\n\tif (a < b){\n\t\treturn(b)\n\t}\n\tif (a >= b){\n\t\treturn(a)\n\t}\n}\n\n\"\"\"\nGive max between a and b\n\"\"\"\ndef max(float a, float b):float{\n\tif (a < b){\n\t\treturn(b)\n\t}\n\tif (a >= b){\n\t\treturn(a)\n\t}\n}\n\n\"\"\"\nGive min between a and b\n\"\"\"\ndef min(int a, int b):int{\n\tif (a < b){\n\t\treturn(a)\n\t}\n\tif (a >= b){\n\t\treturn(b)\n\t}\n}\n\n\"\"\"\nGive min between a and b\n\"\"\"\ndef min(float a, float b):float{\n\tif (a < b){\n\t\treturn(a)\n\t}\n\tif (a >= b){\n\t\treturn(b)\n\t}\n}\n\n\"\"\"\nGive bound a between b and c\n\"\"\"\ndef bound(int a, int b, int c):int{\n\treturn(math.max(math.min(a, b),c))\n}\n\n\"\"\"\nGive bound a between b and c\n\"\"\"\ndef bound(float a, float b, float c):float{\n\treturn(math.max(math.min(a, b),c))\n}","index":0},{"name":"sort","content":"package math\n\ndef sorted(int a, int b):int,int{\n\tif (a > b){\n\t\treturn(b, a)\t\n\t}\n\tif (a <= b){\n\t\treturn(a, b)\t\n\t}\n}\n\ndef sorted(float a, float b):float,float{\n\tif (a > b){\n\t\treturn(b, a)\t\n\t}\n\tif (a <= b){\n\t\treturn(a, b)\t\n\t}\n}\n\ndef lazy swap(int $a, int $b){\n\tint c = $a\n\t$a = $b\n\t$b = c\n}\n\ndef lerp(float a, float b, float w):float{\n\treturn(a*(1-w) + b*w)\n}","index":0}],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":[]},"tick":{"values":[]}}},"version":{"major":1,"minor":0,"patch":0,"build":22}}