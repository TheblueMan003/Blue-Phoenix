{"projectName":"list","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":false,"isLibrary":false,"description":null,"files":[{"name":"import","content":"import standard.java\r\nimport standard.entity_id\r\n","index":0},{"name":"list","content":"package list\r\n\r\nstruct list<t>{\r\n    int $size = 20\r\n    int count\r\n    def lazy __init__(int $capacity){\r\n        count = 0\r\n        $size = $capacity\r\n        forgenerate($i,0,$eval($capacity-1)){\r\n            t this._$i\r\n        }\r\n    }\r\n    \r\n    def setMux(int index, t value){\r\n        if (index >= 0 && index < count){\r\n            switch(index){\r\n                forgenerate($i,0,$eval($size-1)){\r\n                    $i-> this._$i = value\r\n                }\r\n            }\r\n        }\r\n    }\r\n    def lazy set(int $index, int $value){\r\n        if (__isInt($index)){\r\n            forgenerate($i,0,$eval($size-1)){\r\n                if($index == $i){\r\n                    this._$i = $value\r\n                }\r\n            }\r\n        }\r\n        if (__isVar($index)){\r\n            setMux($index, $value)\r\n        }\r\n    }\r\n    def add(t value):bool{\r\n        if (count >= $size){\r\n            return false\r\n        }\r\n        if (count < $size){\r\n            switch(count){\r\n                forgenerate($i,0,$eval($size-1)){\r\n                    $i-> this._$i = value\r\n                }\r\n            }\r\n            count ++\r\n            return true\r\n        }\r\n    }\r\n    def getMux(int index):t{\r\n        if (index < count){\r\n            switch(index){\r\n                forgenerate($i,0,$eval($size-1)){\r\n                    $i-> return(this._$i)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    def lazy get(int $index):t{\r\n        if (__isInt($index)){\r\n            forgenerate($i,0,$eval($size-1)){\r\n                if($index == $i){\r\n                    return this._$i\r\n                }\r\n            }\r\n        }\r\n        if (__isVar($index)){\r\n            return getMux($index)\r\n        }\r\n    }\r\n    def remove(int index){\r\n        if (index < count){\r\n            forgenerate($i,0,$eval($size-2)){\r\n                if (index <= $i){\r\n                    this._$i = this._$eval($i+1)\r\n                }\r\n            }\r\n            count--\r\n        }\r\n    }\r\n    def map(function<(t),(t)> func){\r\n        forgenerate($i,0,$eval($size-1)){\r\n            this._$i = func(this._$i)\r\n        }\r\n    }\r\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":12},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.16.5","ExportAsZip":false,"packformat":6,"CompilerCoreName":"java","isLibrary":false}}