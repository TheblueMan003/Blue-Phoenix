{"projectName":"input","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":null,"files":[{"name":"import","content":"import standard.java\nimport standard.entity_id\n","index":0},{"name":"scroll","content":"package input\n\nINT SLOT\nINT ScrollDelta\n\ndef scroll(){\n\tint x = @s.slot\n\t\n\tif (x == SLOT){\n\t\tScrollDelta = 0\n\t\tSLOT = x\n\t}\n\tif (x < SLOT){\n\t\tif(x < 3 && SLOT >= 7){\n\t\t\tScrollDelta = 1\n\t\t}\n\t\telse{\n\t\t\tScrollDelta = -1\n\t\t}\n\t\t\n\t\tSLOT = x\n\t}\n\tif (x > SLOT){\n\t\tif(x >= 7 && SLOT < 3){\n\t\t\tScrollDelta = -1\n\t\t}\n\t\telse{\n\t\t\tScrollDelta = 1\n\t\t}\n\t\t\n\t\tSLOT = x\n\t}\n}\ndef @inputInit scrollInit(){\n\tSLOT = @s.slot\t\n}\ndef lazy onScroll(int=>void $f){\n\tscroll()\n\tif (ScrollDelta != 0){\n\t\t$f(ScrollDelta)\n\t}\n}","index":0},{"name":"main","content":"package input","index":0},{"name":"event","content":"package input\n\nprivate enum eventList(json scoreboard){\n    Click(minecraft.used:minecraft.carrot_on_a_stick),\n    ClickWarpedFungus(minecraft.used:minecraft.warped_fungus_on_a_stick),\n    Jump(minecraft.custom:minecraft.jump),\n    Drop(minecraft.custom:minecraft.drop),\n    Die(minecraft.custom:minecraft.deaths),\n    Hit(minecraft.custom:minecraft.damage_dealt),\n    Relog(minecraft.custom:minecraft.leave_game),\n    Damage(minecraft.custom:minecraft.damage_taken),\n    BowShoot(minecraft.used:minecraft.bow),\n    CrossbowShoot(minecraft.used:minecraft.crossbow),\n    KillPlayer(minecraft.custom:minecraft.playerKillCount),\n    Kill(minecraft.custom:minecraft.totalKillCount),\n    Bred(minecraft.custom:minecraft.animals_bred),\n    CleanArmor(minecraft.custom:minecraft.clean_armor),\n    CleanBanner(minecraft.custom:minecraft.clean_banner),\n    OpenBarrel(minecraft.custom:minecraft.open_barrel),\n    BellRing(minecraft.custom:minecraft.bell_ring),\n    EatCakeSlice(minecraft.custom:minecraft.eat_cake_slice),\n    FillCauldron(minecraft.custom:minecraft.fill_cauldron),\n    OpenChest(minecraft.custom:minecraft.open_chest),\n    DamageAbsorbed(minecraft.custom:minecraft.damage_absorbed),\n    DamageBlockByShield(minecraft.custom:minecraft.damage_blocked_by_shield),\n    OpenEnderChest(minecraft.custom:minecraft.open_enderchest),\n}\n\nprivate enum eventParamList(json scoreboard){\n    Mined(minecraft.mined:minecraft.),\n    Break(minecraft.broken:minecraft.),\n    Craft(minecraft.crafted:minecraft.),\n    Use(minecraft.used:minecraft.),\n    PickUp(minecraft.picked_up:minecraft.),\n    Drop(minecraft.dropped:minecraft.),\n    Kill(minecraft.killed:minecraft.),\n    Killed(minecraft.killed_by:minecraft.)\n}\n\nprivate enum continuousEventList(json scoreboard){\n    Sneak(minecraft.custom:minecraft.sneak_time),\n    Walk(minecraft.custom:minecraft.walk_one_cm),\n    WalkOnWater(minecraft.custom:minecraft.walk_on_water_one_cm),\n    WalkUnderWater(minecraft.custom:minecraft:walk_under_water_one_cm),\n    Boat(minecraft.custom:minecraft.boat_one_cm),\n    Horse(minecraft.custom:minecraft.horse_one_cm),\n    Minecart(minecraft.custom:minecraft:minecart_one_cm),\n    Pig(minecraft.custom:minecraft:pig_one_cm),\n    Strider(minecraft.custom:minecraft:strider_one_cm),\n    Swim(minecraft.custom:minecraft.swim_one_cm),\n    Sprint(minecraft.custom:minecraft.sprint_one_cm),\n    Horse(minecraft.custom:minecraft.horse_one_cm),\n    Fly(minecraft.custom:minecraft.fly_one_cm),\n    Fall(minecraft.custom:minecraft.fall_one_cm),\n    Climb(minecraft.custom:minecraft.climb_one_cm)\n}\n\nforgenerate($e,eventList){\n    def lazy on$e(function $i){\n        INT $e = $e.scoreboard\n        def @inputInit @inputReset$e $eInit(){\n            $e = 0\n        }\n        \n        if ($e > 0){\n            $i()\n            tag(input.reset)\n            schedule.add(1){\n                with(@a[tag=input.reset],true){\n                    @inputReset$e()\n                    untag(input.reset)\n                }\n            }\n        }\n    }\n}\n\nforgenerate($e,eventParamList){\n    def lazy on$e(int $param, function $i){\n        INT $e_$param = $e.scoreboard$param\n        def @inputInit @inputReset$e $e_$paramInit(){\n            $e_$param = 0\n        }\n        \n        if ($e_$param > 0){\n            $i()\n            tag(input.reset)\n            schedule.add(1){\n                with(@a[tag=input.reset],true){\n                    @inputReset$e()\n                    untag(input.reset)\n                }\n            }\n        }\n    }\n}\n\nforgenerate($e,continuousEventList){\n    def lazy on$e(function $i){\n        INT $e = $e.scoreboard\n        INT $ePrev\n        def @inputInit @inputReset$e $eInit(){\n            $e = 0\n        }\n        if ($e > 0 && $ePrev == null){\n            $i()\n            $ePrev = 1\n            tag(input.reset)\n            schedule.add(1){\n                with(@a[tag=input.reset],true){\n                    @inputReset$e()\n                    untag(input.reset)\n                }\n            }\n        }\n        if ($e > 0 && $ePrev == 0){\n            $i()\n            $ePrev = 1\n            tag(input.reset)\n            schedule.add(1){\n                with(@a[tag=input.reset],true){\n                    @inputReset$e()\n                    untag(input.reset)\n                }\n            }\n        }\n        if ($e == 0 && $ePrev == 1){\n            $ePrev = 0\n        }\n    }\n    def lazy while$e(function $i){\n        INT $eCont = $e.scoreboard\n        \n        if ($eCont > 0){\n            $i()\n            tag(input.reset)\n            schedule.add(1){\n                with(@a[tag=input.reset],true){\n                    @inputReset$e()\n                    untag(input.reset)\n                }\n            }\n        }\n        \n        def @inputInit @inputReset$e $eInit(){\n            $eCont = 0\n        }\n    }\n}","index":0},{"name":"button","content":"package input\n\nprivate enum button(json funcname){\n    stone_button(stonebutton),\n    oak_button(oakbutton),\n    birch_button(birchbutton),\n    spruce_button(sprucebutton),\n    dark_oak_button(darkoakbutton),\n    acacia_button(acaciabutton),\n    jungle_button(junglebutton),\n    polished_blackstone_button(blackstonebutton),\n    warped_button(warpedbutton),\n    crimson_button(crimsonbutton)\n}\nprivate enum button_facing = north, east, west, south\nprivate enum button_face = floor,wall,ceiling\n\nforgenerate($button,button){\n    def lazy on$button.funcname(int $x, int $y, int $z,function $func){\n        positioned($x $y $z){\n            if (block(~ ~ ~ minecraft:$button[powered=true])){\n                $func()\n                forgenerate($facing,button_facing){\n                    forgenerate($face,button_face){\n                        if (block(~ ~ ~ minecraft:$button[face=$face,facing=$facing,powered=true])){\n                            /setblock ~ ~ ~ minecraft:$button[face=$face,facing=$facing,powered=false]\n                        }\n                    }\n                }\n            }\n        }\n    }\n}","index":0},{"name":"wasd","content":"package input\n\npublic struct MotionController{\n    float player_x\n    float player_y\n    float player_z\n    bool active\n    void=>void XPlusEvent\n    void=>void XMinusEvent\n    void=>void ZPlusEvent\n    void=>void ZMinusEvent\n    \n    def __init__(bool init = false, void=>void onXPlus = null,\n        void=>void onXMinus = null, void=>void onZPlus = null,\n    void=>void onZMinus = null){\n        XPlusEvent = onXPlus\n        XMinusEvent = onXMinus\n        ZPlusEvent = onZPlus\n        ZMinusEvent = onZMinus\n        if (init){\n            start()\n        }\n    }\n    \n    public void start(){\n        player_x, player_y, player_z = @s.x, @s.y, @s.z\n        active = true\n    }\n    public void stop(){\n        active = false\n    }\n    public lazy tick(){\n        motioncontroll()\n    }\n    public void motioncontroll(){\n        float nx,ny,nz = vector.position()\n        float ax = math.abs(nx-player_x)\n        float az = math.abs(nz-player_z)\n        if (ax > az){\n            if (nx < player_x){\n                XMinusEvent()\n                TPBack()\n            }\n            if (nx > player_x){\n                XPlusEvent()\n                TPBack()\n            }\n        }\n        if (az > ax){\n            if (nz < player_z){\n                ZMinusEvent()\n                TPBack()\n            }\n            if (nz > player_z){\n                ZPlusEvent()\n                TPBack()\n            }\n        }\n    }\n    \n    public void TPBack(){\n        at(player_x, player_y, player_z){\n            /tp @s ~ ~ ~\n        }\n    }\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":32},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"randomLambdaID":false,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.16.5","ExportAsZip":false,"packformat":6,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"opti_FileCleanUp":true,"opti_LambdaCleanUp":false,"advanced_debug":false,"isLibrary":false}}