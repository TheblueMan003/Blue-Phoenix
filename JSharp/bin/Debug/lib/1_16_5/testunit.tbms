{"projectName":"testunit","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":"Made With BluePhoenix","files":[{"name":"import","content":"import math\nimport cmd.schedule","index":0},{"name":"test","content":"package test\n\nint testIndex = 0\n\ndef lazy test_passed(int $name){\n    tellraw(@a,(\"[ TBMS - Test ] \",green),($name, green),(\" passed.\",green))\n    testIndex++\n}\ndef lazy test_failled(string $name){\n    tellraw(@a,(\"[ TBMS - Test ] \",red),($name, red),(\" failled.\",red))\n    testIndex++\n}\ndef lazy test_crashed(int $name){\n    tellraw(@a,(\"[ TBMS - Test ] \",gold),($name, gold),(\" crashed.\",gold))\n    testIndex++\n}\n\ndef lazy equals(int $input, int $output, int $name){\n    if ($input >= $output){\n        test_passed($name)\n    }\n    if ($input > $output){\n        test_failled($name)\n    }\n    if ($input < $output){\n        test_failled($name)\n    }\n}\n\ndef lazy greaterThan(int $input, int $output, int $name){\n    if ($input > $output){\n        testunit.test_passed($name)\n    }\n    if ($input <= $output){\n        testunit.test_failled($name)\n    }\n}\ndef lazy floatDiff(float $input, float $output, float $diff, int $name){\n    float diff2 = $input - $output\n    diff2 = math.abs(diff2)\n    \n    if (diff2 <= $diff){\n        test_passed($name)\n    }\n    if (diff2 > $diff){\n        test_failled($name)\n    }\n}","index":0},{"name":"assert","content":"package test\n\ndef lazy assert(int $value, int $name){\n    if ($value){\n        test_passed($name)\n    }\n    if (!$value){\n        test_failled($name)\n    }\n}\n\ndef lazy debug(int $value){\n    tellraw(@a,\"$value: \",$value)\n}","index":0},{"name":"testunit","content":"package test\n\nint @test passing(){\n    return 1\n}\nvoid=>void callback := pass\ndef helper run(){\n    int res1\n    int res2\n    int passed = 0\n    int runned = 0\n    int total = 0\n    tellraw(@a,(\"====[ Starting TBMS Test Suite ]====\",green))\n    forgenerate($f, @test){\n        total += 1\n        schedule.add($eval($f.index+1)){\n            if ($f.index % 2 == 0){\n                res1 = -1\n                res1 = $f()\n            }\n            if ($f.index % 2 == 1){\n                res2 = -1\n                res2 = $f()\n            }\n        }\n        schedule.add($eval($f.index+2)){\n            runned += 1\n            if ($f.index % 2 == 0){\n                if (res1 == 1){\n                    test_passed(\"$f\")\n                    passed += 1\n                }\n                elseif (res1 == 0){\n                    test_failled(\"$f\")\n                }\n                else{\n                    test_crashed(\"$f\")\n                }\n            }\n            if ($f.index % 2 == 1){\n                if (res2 == 1){\n                    test_passed(\"$f\")\n                    passed += 1\n                }\n                elseif (res2 == 0){\n                    test_failled(\"$f\")\n                }\n                else{\n                    test_crashed(\"$f\")\n                }\n            }\n        }\n    }\n    process test{\n        def main(){\n            if (runned == total){\n                stop()\n                \n                if (passed != total){\n                    print((\"[ Warning ! ]\",dark_red),(\" One or more of the tests did not succeded. This will impact gameplay. Make sure to be playing on the correct Minecraft Version. Also the type of server might be causing the bug(s).\",red))\n                }\n                if (passed == total){\n                    print((\"All tests succeded. You should be good to play.\",green))\n                }\n                callback()\n            }\n        }\n    }\n    test.start()\n    @after_test()\n}\n\nlazy run(void=>void $fct){\n    callback = $fct\n    run()\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":[]},"tick":{"values":[]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":10},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"randomLambdaID":false,"scoreboardValue":"tbms.value","structuresSource":"","structuresSources":{},"scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.17","ExportAsZip":false,"packformat":6,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"opti_FileCleanUp":true,"opti_LambdaCleanUp":false,"advanced_debug":false,"isLibrary":false}}