{"projectName":"level","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":"","files":[{"name":"import","content":"import standard.java\nimport standard.entity_id\nimport standard.object\nimport cmd.schedule\nimport room","index":0},{"name":"level","content":"package level\n\nstatic abstract class level{\n    int enabled\n    int count\n    int x1,x2,y1,y2,z1,z2\n    room rm\n    \n    loading reload(){\n        run()\n        init()\n        count:=0\n    }\n    def init(){\n        onInit()\n        rm = room(x1, y1, z1, x2, y2, z2)\n        rm.onEnter{\n            start()\n        }\n        rm.onStay{\n            playertick()\n        }\n        rm.onExit{\n            stop()\n        }\n    }\n    lazy def setup(int $_x1, int $_y1, int $_z1, int $_x2, int $_y2, int $_z2){\n        x1 = $_x1\n        x2 = $_x2\n        \n        y1 = $_y1\n        y2 = $_y2\n        \n        z1 = $_z1\n        z2 = $_z2\n    }\n    lazy def __init__(int _x1, int _y1, int _z1, int _x2, int _y2, int _z2){\n        x1 = _x1\n        x2 = _x2\n        \n        y1 = _y1\n        y2 = _y2\n        \n        z1 = _z1\n        z2 = _z2\n        \n        rm = room(x1, y1, z1, x2, y2, z2)\n        rm.onEnter{\n            start()\n        }\n        rm.onStay{\n            playertick()\n        }\n        rm.onExit{\n            stop()\n        }\n    }\n    def crash(){\n        exception.exception(\"Stack Overlow detect in Process: $stackTrace\")\n        run()\n    }\n    def start(){\n        enabled:=false\n        if (!enabled){\n            enabled = true\n            onStart()\n            run()\n        }\n        count++\n    }\n    def run(){\n        asyncwhile(enabled){\n            schedule.add(crash)\n            if (enabled){\n                main()\n            }\n            schedule.remove(crash)\n        }\n    }\n    def stop(){\n        enabled:=false\n        if (enabled){\n            count--\n            if (count == 0){\n                onStop()\n                enabled = false\n            }\n        }\n    }\n    def stopAll(){\n        count = 0\n        onStop()\n        enabled = false\n    }\n    def @reset reset(){\n        count = 0\n    }\n    def abstract main()\n    def abstract playertick()\n    def abstract onStart()\n    def abstract onStop()\n    def abstract onInit()\n}\n","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":6},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"randomLambdaID":true,"scoreboardValue":"tbms.value","structuresSource":"","structuresSources":{},"scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_17/","./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.16.5","ExportAsZip":false,"packformat":8,"rppackformat":8,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"opti_FileCleanUp":true,"opti_LambdaCleanUp":false,"advanced_debug":false,"isLibrary":false}}