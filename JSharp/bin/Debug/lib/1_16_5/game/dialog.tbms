{"projectName":"dialog","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":null,"files":[{"name":"import","content":"import standard.java\nimport standard.entity_id\nimport input\nimport cmd.actionbar\nimport cmd.schedule","index":0},{"name":"dialog","content":"package dialog\n\n[inplace]\ndef lazy dialogSystem(int $file, int $type){\n    INT Index\n    INT Tick\n    INT Count\n    BOOL Enabled\n    FUNCTION OnClose\n    FUNCTION OnSwap\n    enum(\"__dialogs__\",$file,$type)\n    \n    process main{\n        int count\n        \n        def main(){\n            with(@a,false,Enabled){\n                actionbar.use(int.maxValue, 2)\n                switch(Index){\n                    forgenerate($dial,__dialogs__){\n                        $eval($dial.index*2)   -> magictitle(Tick,0,@s,actionbar,$dial.value)\n                        $eval($dial.index*2+1) -> title(@s,actionbar,$dial.value)\n                    }\n                }\n                Tick ++\n                if (Tick < 0){\n                    Index ++\n                    Count --\n                    Tick = 0\n                    OnSwap()\n                }\n                input.onDrop(){\n                    next()\n                }\n                if (Count <= 0){\n                    close()\n                }\n            }\n        }\n        \n        def addPlayer(){\n            if(!Enabled){\n                count++\n                start()\n            }\n        }\n        def rmPlayer(){\n            count--\n            if (count == 0){\n                stop()\n            }\n        }\n    }\n    main.count := 0\n    \n    def show(__dialogs__ index, int count, function onNext=null, function onClose=null){\n        main.addPlayer()\n        Index = index*2\n        Count = count*2\n        Tick = 0\n        @inputinit()\n        Enabled = true\n        OnSwap = onNext\n        OnClose = onClose\n    }\n    def lazy showAll(int $index, int $count, function $onNext=null, function $onClose=null){\n        with(@a,true){\n            show($index, $count, $onNext, $onClose)\n        }\n    }\n    def next(){\n        Tick = 0\n        int d = Index % 2\n        if (d == 0){\n            Index ++\n            Count --\n            OnSwap()\n        }\n        Index ++\n        Count --\n        OnSwap()\n    }\n    def close(){\n        Enabled = false\n        title(@s,actionbar,\"\")\n        main.rmPlayer()\n        @inputinit()\n        OnClose()\n    }\n    def lazy printd(int $index){\n        define int $d = fromenum(__dialogs__, $index)\n        tellraw(@a, $d.value)\n    }\n    def lazy telld(int $index){\n        define int $d = fromenum(__dialogs__, $index)\n        tellraw(@s, $d.value)\n    }\n    def lazy titled(int $a1, int $a2, int $index){\n        define int $d = fromenum(__dialogs__, $index)\n        title($a1, $a2, $d.value)\n    }\n}\n\n[inplace]\ndef lazy dialogSystemAuto(int $file){\n    INT Index\n    INT Tick\n    INT Count\n    BOOL Enabled\n    FUNCTION OnClose\n    FUNCTION OnSwap\n    enum(\"__dialogs_auto_0__\",$file, \"CSV\")\n    \n    process main{\n        int count\n        \n        def main(){\n            with(@a,true,Enabled){\n                actionbar.use(int.maxValue, 2)\n                switch(Index){\n                    forgenerate($dial,__dialogs_auto_0__){\n                        case($eval($dial.index)){\n                            magictitle(Tick,20,@s,actionbar,$dial.value)\n                            if (Tick == 0){\n                                sound.play(dialog.$dial)\n                            }\n                        }\n                    }\n                }\n                Tick ++\n                if (Tick < 0){\n                    next()\n                }\n                if (Count <= 0){\n                    close()\n                }\n            }\n        }\n        \n        def addPlayer(){\n            if(!Enabled){\n                count++\n                start()\n            }\n        }\n        def rmPlayer(){\n            count--\n            if (count == 0){\n                stop()\n            }\n        }\n    }\n    main.count := 0\n    \n    def show(__dialogs_auto_0__ index, int count, function onNext=null, function onClose=null){\n        main.addPlayer()\n        Index = index\n        Count = count\n        Tick = 0\n        Enabled = true\n        OnSwap = onNext\n        OnClose = onClose\n    }\n    def lazy showAll(int $index, int $count, function $onNext=null, function $onClose=null){\n        with(@a,true){\n            show($index, $count, $onNext, $onClose)\n        }\n    }\n    def next(){\n        Tick = 0\n        Index ++\n        Count --\n        OnSwap()\n    }\n    def close(){\n        Enabled = false\n        title(@s,actionbar,\"\")\n        main.rmPlayer()\n        @inputinit()\n        OnClose()\n    }\n    def lazy printd(int $index){\n        define int $d = fromenum(__dialogs_auto_0__, $index)\n        tellraw(@a, $d.value)\n    }\n    def lazy telld(int $index){\n        define int $d = fromenum(__dialogs_auto_0__, $index)\n        tellraw(@s, $d.value)\n    }\n    def lazy titled(int $a1, int $a2, int $index){\n        define int $d = fromenum(__dialogs_auto_0__, $index)\n        title($a1, $a2, $d.value)\n    }\n}\n[inplace]\ndef lazy dialogSystemAutoWithAnimation(int $delta, int $file){\n    INT Index\n    INT Tick\n    INT Count\n    BOOL Enabled\n    FUNCTION OnClose\n    FUNCTION OnSwap\n    enum(\"__dialogs_auto_0__\",$file, \"CSV\")\n    \n    process main{\n        int count\n        \n        def main(){\n            with(@a,true,Enabled){\n                actionbar.use(int.maxValue, 2)\n                switch(Index){\n                    forgenerate($dial,__dialogs_auto_0__){\n                        case($eval($dial.index)){\n                            magictitle(Tick,$delta,@s,actionbar,$dial.value)\n                            if (Tick == 0){\n                                sound.play(dialog.$dial)\n                            }\n                        }\n                    }\n                }\n                Tick ++\n                if (Tick < 0){\n                    next()\n                }\n                if (Count <= 0){\n                    close()\n                }\n            }\n        }\n        \n        def addPlayer(){\n            if(!Enabled){\n                count++\n                start()\n            }\n        }\n        def rmPlayer(){\n            count--\n            if (count == 0){\n                stop()\n            }\n        }\n    }\n    main.count := 0\n    \n    def show(__dialogs_auto_0__ index, int count, function onNext=null, function onClose=null){\n        main.addPlayer()\n        Index = index\n        Count = count\n        Tick = 0\n        Enabled = true\n        animate()\n        OnSwap = onNext\n        OnClose = onClose\n    }\n    def lazy showAll(int $index, int $count, function $onNext=null, function $onClose=null){\n        with(@a,true){\n            show($index, $count, $onNext, $onClose)\n        }\n    }\n    def animate(){\n        switch(Index){\n            forgenerate($dial,__dialogs_auto_0__){\n                case($eval($dial.index)){\n                    forgenerate($npc, $dial.npc){\n                        define int $t = $npc\n                        $npc.0.setAnimations(animationset.$npc.1())\n                    }\n                    $dial.call()\n                }\n            }\n        }\n    }\n    def next(){\n        Tick = 0\n        Index ++\n        Count --\n        if (Count > 0){\n            animate()\n        }\n        OnSwap()\n    }\n    def close(){\n        Enabled = false\n        title(@s,actionbar,\"\")\n        main.rmPlayer()\n        @inputinit()\n        OnClose()\n    }\n    def lazy printd(int $index){\n        define int $d = fromenum(__dialogs_auto_0__, $index)\n        tellraw(@a, $d.value)\n    }\n    def lazy telld(int $index){\n        define int $d = fromenum(__dialogs_auto_0__, $index)\n        tellraw(@s, $d.value)\n    }\n    def lazy titled(int $a1, int $a2, int $index){\n        define int $d = fromenum(__dialogs_auto_0__, $index)\n        title($a1, $a2, $d.value)\n    }\n}\n[inplace]\ndef lazy addAllSound(){\n    forgenerate($i, __dialogs_auto_0__){\n        sounds.music(\"dialog/$i\")\n    }\n}\n","index":0},{"name":"dialogtranslated","content":"package dialog\n\n[inplace]\ndef lazy dialogSystemAutoWithAnimationTranslated(int $delta, params $file){\n    int language := 0\n    INT Index\n    INT Tick\n    INT Count\n    BOOL Enabled\n    FUNCTION OnClose\n    FUNCTION OnSwap\n    forgenerate($i,$file){\n        enum(\"__dialogs_auto_$i.index__\",$i, \"CSV\")\n    }\n    \n    process main{\n        int count\n        \n        def main(){\n            with(@a,true,Enabled){\n                actionbar.use(int.maxValue, 2)\n                switch(language){\n                    forgenerate($i,$file){\n                        case($i.index){\n                            switch(Index){\n                                forgenerate($dial,__dialogs_auto_$i.index__){\n                                    case($eval($dial.index)){\n                                        magictitle(Tick,$delta,@s,actionbar,$dial.value)\n                                        if (Tick == 0){\n                                            sound.play(dialog.$dial)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                Tick ++\n                if (Tick < 0){\n                    next()\n                }\n                if (Count <= 0){\n                    close()\n                }\n            }\n        }\n        \n        def addPlayer(){\n            if(!Enabled){\n                count++\n                start()\n            }\n        }\n        def rmPlayer(){\n            count--\n            if (count == 0){\n                stop()\n            }\n        }\n    }\n    main.count := 0\n    \n    def show(__dialogs_auto_0__ index, int count, function onNext=null, function onClose=null){\n        main.addPlayer()\n        Index = index\n        Count = count\n        Tick = 0\n        Enabled = true\n        animate()\n        OnSwap = onNext\n        OnClose = onClose\n    }\n    def lazy showAll(int $index, int $count, function $onNext=null, function $onClose=null){\n        with(@a,true){\n            show($index, $count, $onNext, $onClose)\n        }\n    }\n    def animate(){\n        switch(Index){\n            forgenerate($dial,__dialogs_auto_0__){\n                case($eval($dial.index)){\n                    forgenerate($npc, $dial.npc){\n                        define int $t = $npc\n                        $npc.0.setAnimations(animationset.$npc.1())\n                    }\n                    $dial.call()\n                }\n            }\n        }\n    }\n    def next(){\n        Tick = 0\n        Index ++\n        Count --\n        if (Count > 0){\n            animate()\n        }\n        OnSwap()\n    }\n    def close(){\n        Enabled = false\n        title(@s,actionbar,\"\")\n        main.rmPlayer()\n        @inputinit()\n        OnClose()\n    }\n    def lazy printd(int $index){\n        switch(language){\n            forgenerate($j,$file){\n                case($j.index){\n                    define int $d = fromenum(__dialogs_auto_$j.index__, $index)\n                    tellraw(@a, $d.value)\n                }\n            }\n        }\n    }\n    def lazy telld(int $index){\n        switch(language){\n            forgenerate($j,$file){\n                case($j.index){\n                    define int $d = fromenum(__dialogs_auto_$j.index__, $index)\n                    tellraw(@s, $d.value)\n                }\n            }\n        }\n    }\n    def lazy titled(int $a1, int $a2, int $index){\n        switch(language){\n            forgenerate($j,$file){\n                case($j.index){\n                    define int $d = fromenum(__dialogs_auto_$j.index__, $index)\n                    title($a1, $a2, $d.value)\n                }\n            }\n        }\n    }\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":16},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"randomLambdaID":false,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{"dialog.actionbar.CurrentPriority":"tbms.actbr.prio","dialog.actionbar.CurrentTime":"tbms.actbr.time"},"libraryFolder":["./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.17","ExportAsZip":false,"packformat":6,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"opti_FileCleanUp":true,"opti_LambdaCleanUp":false,"advanced_debug":false,"isLibrary":false}}