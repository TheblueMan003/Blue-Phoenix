{"projectName":"dialog","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":null,"files":[{"name":"import","content":"import standard.java\nimport standard.entity_id\nimport input","index":0},{"name":"dialog","content":"package dialog\n\n[inplace]\ndef lazy dialogSystem(int $file, int $type){\n    INT Index\n    INT Tick\n    INT Count\n    BOOL Enabled\n    FUNCTION OnClose\n    FUNCTION OnSwap\n    enum(\"__dialogs__\",$file,$type)\n    \n    def ticking main(){\n        with(@a,false,Enabled){\n            switch(Index){\n                forgenerate($dial,__dialogs__){\n                    $eval($dial.index*2)   -> magictitle(Tick,0,@s,actionbar,$dial.value)\n                    $eval($dial.index*2+1) -> title(@s,actionbar,$dial.value)\n                }\n            }\n            Tick ++\n            if (Tick < 0){\n                Index ++\n                Count --\n                Tick = 0\n                OnSwap()\n            }\n            input.onDrop(){\n                next()\n            }\n            if (Count <= 0){\n                close()\n            }\n        }\n    }\n    \n    def show(__dialogs__ index, int count, function onNext=null, function onClose=null){\n        Index = index*2\n        Count = count*2\n        Tick = 0\n        @inputinit()\n        Enabled = true\n        OnSwap = onNext\n        OnClose = onClose\n    }\n    def next(){\n        Tick = 0\n        int d = Index % 2\n        if (d == 0){\n            Index ++\n            Count --\n            OnSwap()\n        }\n        Index ++\n        Count --\n        OnSwap()\n    }\n    def close(){\n        Enabled = false\n        title(@s,actionbar,\"\")\n        @inputinit()\n        OnClose()\n    }\n}\n\n[inplace]\ndef lazy dialogSystemAuto(int $file){\n    INT Index\n    INT Tick\n    INT Count\n    BOOL Enabled\n    FUNCTION OnClose\n    FUNCTION OnSwap\n    enum(\"__dialogs_auto__\",$file, \"CSV\")\n    \n    def ticking main(){\n        with(@a,true,Enabled){\n            switch(Index){\n                forgenerate($dial,__dialogs_auto__){\n                    case($eval($dial.index)){\n                        magictitle(Tick,20,@s,actionbar,$dial.value)\n                        if (Tick == 0){\n                            sound.play(dialog.$dial)\n                        }\n                    }\n                }\n            }\n            Tick ++\n            if (Tick < 0){\n                next()\n            }\n            if (Count <= 0){\n                close()\n            }\n        }\n    }\n    \n    def show(__dialogs_auto__ index, int count, function onNext=null, function onClose=null){\n        Index = index\n        Count = count\n        Tick = 0\n        Enabled = true\n        OnSwap = onNext\n        OnClose = onClose\n    }\n    def next(){\n        Tick = 0\n        Index ++\n        Count --\n        OnSwap()\n    }\n    def close(){\n        Enabled = false\n        title(@s,actionbar,\"\")\n        @inputinit()\n        OnClose()\n    }\n}\n[inplace]\ndef lazy dialogSystemAutoWithAnimation(int $file){\n    INT Index\n    INT Tick\n    INT Count\n    BOOL Enabled\n    FUNCTION OnClose\n    FUNCTION OnSwap\n    enum(\"__dialogs_auto__\",$file, \"CSV\")\n    \n    def ticking main(){\n        with(@a,true,Enabled){\n            switch(Index){\n                forgenerate($dial,__dialogs_auto__){\n                    case($eval($dial.index)){\n                        magictitle(Tick,20,@s,actionbar,$dial.value)\n                        if (Tick == 0){\n                            sound.play(dialog.$dial)\n                        }\n                    }\n                }\n            }\n            Tick ++\n            if (Tick < 0){\n                next()\n            }\n            if (Count <= 0){\n                close()\n            }\n        }\n    }\n    \n    def show(__dialogs_auto__ index, int count, function onNext=null, function onClose=null){\n        Index = index\n        Count = count\n        Tick = 0\n        Enabled = true\n        animate()\n        OnSwap = onNext\n        OnClose = onClose\n    }\n    def animate(){\n        switch(Index){\n            forgenerate($dial,__dialogs_auto__){\n                case($eval($dial.index)){\n                    forgenerate($npc, $dial.npc){\n                        define int $t = $npc\n                        $npc.0.setAnimations(animationset.$npc.1())\n                    }\n                    $dial.call()\n                }\n            }\n        }\n    }\n    def next(){\n        Tick = 0\n        Index ++\n        Count --\n        if (Count > 0){\n            animate()\n        }\n        OnSwap()\n    }\n    def close(){\n        Enabled = false\n        title(@s,actionbar,\"\")\n        @inputinit()\n        OnClose()\n    }\n}\ndef lazy addAllSound(){\n    forgenerate($i, __dialogs_auto__){\n        sounds.music(\"dialog/$i\")\n    }\n}\n","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":7},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"randomLambdaID":false,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.17","ExportAsZip":false,"packformat":6,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"opti_FileCleanUp":true,"advanced_debug":false,"isLibrary":false}}