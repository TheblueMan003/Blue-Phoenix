{"projectName":"leaderboard","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":"","files":[{"name":"import","content":"import standard.java\nimport standard.entity_id\nimport standard.object","index":0},{"name":"leaderboard","content":"package leaderboard\n\n[inplace]\ndef lazy init_time(int $nb, int $x, int $y, int $z){\n    int[$nb] times\n    forgenerate($i,0,$eval($nb-1)){\n        times.$i := int.maxValue\n    }\n    INT Score\n    def onFinish(int time){\n        bool placed = false\n        Score := int.minValue\n        int newScore = 0 - time\n        if (newScore > Score){\n            Score = newScore\n        }\n        forgenerate($i,0,$eval($nb-1)){\n            if (time < times[$i] && !placed){\n                placed = true\n                forgenerate($j,$eval($nb-2),$i,-1){\n                    times[$eval($j+1)] = times[$j]\n                    /clone $eval($j+($x)) $y $z $eval($j+($x)) $y $z $eval($j+($x)+1) $y $z\n                }\n                times[$i] = time\n                int ms = (time%20)*5\n                int s = (time/20)%60\n                int m = (time/$eval(20*60))%60\n                int h = (time/$eval(20*60*60))\n                tag(owner)\n                positioned($eval($i+($x)) $y $z){\n                    if (m < 10 && s < 10 && ms < 10){\n                        entity.storeJson((f\"{@a[tag=owner]} - {h}:0{m}:0{s}.0{ms}\"))\n                    }\n                    if (m < 10 && s < 10 && ms >= 10){\n                        entity.storeJson((f\"{@a[tag=owner]} - {h}:0{m}:0{s}.{ms}\"))\n                    }\n                    if (m < 10 && s >= 10 && ms < 10){\n                        entity.storeJson((f\"{@a[tag=owner]} - {h}:0{m}:{s}.0{ms}\"))\n                    }\n                    if (m < 10 && s >= 10 && ms >= 10){\n                        entity.storeJson((f\"{@a[tag=owner]} - {h}:0{m}:{s}.{ms}\"))\n                    }\n                    if (m >= 10 && s < 10 && ms < 10){\n                        entity.storeJson((f\"{@a[tag=owner]} - {h}:{m}:0{s}.0{ms}\"))\n                    }\n                    if (m >= 10 && s < 10 && ms >= 10){\n                        entity.storeJson((f\"{@a[tag=owner]} - {h}:{m}:0{s}.{ms}\"))\n                    }\n                    if (m >= 10 && s >= 10 && ms < 10){\n                        entity.storeJson((f\"{@a[tag=owner]} - {h}:{m}:{s}.0{ms}\"))\n                    }\n                    if (m >= 10 && s >= 10 && ms >= 10){\n                        entity.storeJson((f\"{@a[tag=owner]} - {h}:{m}:{s}.{ms}\"))\n                    }\n                }\n                untag(owner)\n            }\n        }\n        updateLDB()\n    }\n    def updateLDB(){\n        with(ldb_display){\n            update()\n        }\n    }\n    class ldb_display initer minecraft:armor_stand{Invisible:1,Marker:1}{\n        int n\n        def __init__(int number){\n            n = number\n        }\n        def update(){\n            switch(n){\n                forgenerate($i,0,$eval($nb-1)){\n                    case($i){\n                        positioned($eval($i+($x)) $y $z){\n                            entity.copyNameFromStoredJson()\n                        }\n                    }\n                }\n                case(-1){\n                    entity.setName((\"Leaderboard\",aqua,bold))\n                }\n            }\n        }\n    }\n    def show(){\n        with(ldb_display){\n            kill()\n        }\n        forgenerate($i,$eval($nb-1),-1,-1){\n            positioned(~ ~$eval($i.index/2) ~){new ldb_display($i)}\n        }\n        \n        \n        forgenerate($j,0,$eval($nb-1)){\n            positioned($eval($j+($x)) $y $z){\n                if (!block(~ ~ ~ oak_sign)){\n                    entity.storeJson((f\"placeholder - 999:59:59.99\"))\n                }\n            }\n        }\n        updateLDB()\n    }\n}","index":0},{"name":"score_leaderboard","content":"package leaderboard\n\n[inplace]\ndef lazy init_score(int $nb, int $x, int $y, int $z){\n    int[$nb] times\n    forgenerate($i,0,$eval($nb-1)){\n        times.$i := int.maxValue\n    }\n    INT Score\n    def onFinish(int time){\n        bool placed = false\n        Score := int.minValue\n        int newScore = 0 - time\n        if (newScore > Score){\n            Score = newScore\n        }\n        forgenerate($i,0,$eval($nb-1)){\n            if (time < times[$i] && !placed){\n                placed = true\n                forgenerate($j,$eval($nb-2),$i,-1){\n                    times[$eval($j+1)] = times[$j]\n                    /clone $eval($j+($x)) $y $z $eval($j+($x)) $y $z $eval($j+($x)+1) $y $z\n                }\n                times[$i] = time\n                tag(owner)\n                positioned($eval($i+($x)) $y $z){\n                    entity.storeJson((f\"{@a[tag=owner]} - {time}\"))\n                }\n                untag(owner)\n            }\n        }\n        updateLDB()\n    }\n    def updateLDB(){\n        with(ldb_display){\n            update()\n        }\n    }\n    class ldb_display initer minecraft:armor_stand{Invisible:1,Marker:1}{\n        int n\n        def __init__(int number){\n            n = number\n        }\n        def update(){\n            switch(n){\n                forgenerate($i,0,$eval($nb-1)){\n                    case($i){\n                        positioned($eval($i+($x)) $y $z){\n                            entity.copyNameFromStoredJson()\n                        }\n                    }\n                }\n                case(-1){\n                    entity.setName((\"Leaderboard\",aqua,bold))\n                }\n            }\n        }\n    }\n    def show(){\n        with(ldb_display){\n            kill()\n        }\n        forgenerate($i,$eval($nb-1),-1,-1){\n            positioned(~ ~$eval($i.index/2) ~){new ldb_display($i)}\n        }\n        \n        \n        forgenerate($j,0,$eval($nb-1)){\n            positioned($eval($j+($x)) $y $z){\n                if (!block(~ ~ ~ oak_sign)){\n                    entity.storeJson((f\"placeholder - 0\"))\n                }\n            }\n        }\n        updateLDB()\n    }\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":0},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_17/","./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.16.5","ExportAsZip":false,"packformat":7,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"opti_FileCleanUp":true,"advanced_debug":false,"isLibrary":false}}