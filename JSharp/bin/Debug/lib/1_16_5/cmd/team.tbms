{"projectName":"team","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":null,"files":[{"name":"import","content":"","index":0},{"name":"team","content":"package team\n\ndef lazy create(int $name,json $text){\n    /team add $name $text\n}\n\ndef lazy setPrefix(int $name,json $text){\n    /team modify $name prefix $text\n}\n\ndef lazy setSuffix(int $name,json $text){\n    /team modify $name suffix $text\n}\n\ndef lazy setColor(int $name, int $color){\n    /team modify $name color $color \n}\n\ndef lazy setColor(int $name, int $color){\n    /team modify $name color $color \n}\n\ndef lazy seeFriendlyInvisibles(int $name, int $value){\n    /team modify $name seeFriendlyInvisibles $value \n}\n\ndef lazy seeFriendlyInvisibles(int $name){\n    /team modify $name seeFriendlyInvisibles true   \n}\n\ndef lazy hideFriendlyInvisibles(int $name){\n    /team modify $name seeFriendlyInvisibles false  \n}\n\ndef lazy disableCollision(int $name){\n    /team modify $name collisionRule never\n}\n\ndef lazy collisionOther(int $name){\n    /team modify $name collisionRule pushOtherTeams\n}\n\ndef lazy collisionOwn(int $name){\n    /team modify $name collisionRule pushOwnTeam\n}\n\ndef lazy enableCollision(int $name){\n    /team modify $name collisionRule always\n}\n\ndef lazy setName(int $name, json $text){\n    /team modify $name displayName $text    \n}\n\ndef lazy friendlyFire(int $name, int $value){\n    /team modify $name friendlyFire $value\n}\n\ndef lazy join(int $name, int sel){\n    /team join $name $sel   \n}\n\ndef lazy join(int $name){\n    /team join $name @s \n}\n\ndef lazy leave(int $name, int sel){\n    /team leave $sel    \n}\n\ndef lazy leave(){\n    /team leave @s\n}\n\ndef lazy empty(int $name){\n    /team empty $name\n}\n\ndef lazy remove(int $name){\n    /team remove $name  \n}\n\n","index":0},{"name":"struct","content":"package team\n\nINT TEAMID\nstruct team{\n    int $name = default\n    \n    def lazy __init__(json $text){\n        $name = $this\n        /team add $this $text\n    }\n    def lazy __init__(){\n        $name = $this\n        /team add $this {\"text\":\"\"}\n    }\n    \n    def lazy setPrefix(json $text){\n        /team modify $name prefix $text\n    }\n    \n    def lazy setSuffix(json $text){\n        /team modify $name suffix $text\n    }\n    \n    def lazy setColor(int $color){\n        /team modify $name color $color\n    }\n    \n    def lazy setColor(int $color){\n        /team modify $name color $color\n    }\n    \n    def lazy seeFriendlyInvisibles(int $value){\n        /team modify $name seeFriendlyInvisibles $value\n    }\n    \n    def lazy seeFriendlyInvisibles(){\n        /team modify $name seeFriendlyInvisibles true\n    }\n    \n    def lazy hideFriendlyInvisibles(){\n        /team modify $name seeFriendlyInvisibles false\n    }\n    \n    def lazy disableCollision(){\n        /team modify $name collisionRule never\n    }\n    \n    def lazy collisionOther(){\n        /team modify $name collisionRule pushOtherTeams\n    }\n    \n    def lazy collisionOwn(){\n        /team modify $name collisionRule pushOwnTeam\n    }\n    \n    def lazy enableCollision(){\n        /team modify $name collisionRule always\n    }\n    \n    def lazy setName(json $text){\n        /team modify $name displayName $text\n    }\n    \n    def lazy friendlyFire(int $value){\n        /team modify $name friendlyFire $value\n    }\n    \n    def lazy join(int $sel){\n        define int $id = hash($name)\n        with($sel){\n            if (TEAMID != $id){\n                /team join $name @s\n            }\n        }\n    }\n    \n    def lazy join(){\n        define int $id = hash($name)\n        if (TEAMID != $id){\n            /team join $name @s\n            TEAMID = $id\n        }\n    }\n    \n    def lazy __add__(int $sel){\n        if (__isint($sel)){\n            define int $id = hash($name)\n            if (TEAMID != $id){\n                /team join $name @s\n                TEAMID = $id\n            }\n        }\n        else{\n            define int $id = hash($name)\n            with($sel){\n                if (TEAMID != $id){\n                    /team join $name @s\n                }\n            }\n        }\n    }\n    \n    def lazy leave(int $sel){\n        /team leave $sel\n    }\n    \n    def lazy leave(){\n        define int $id = hash($name)\n        if (TEAMID == $id){\n            /team leave @s\n            TEAMID = 0\n        }\n    }\n    \n    def lazy __sub__(int $sel){\n        if (__isint($sel)){\n            define int $id = hash($name)\n            if (TEAMID == $id){\n                /team leave $name @s\n                TEAMID = 0\n            }\n        }\n        else{\n            define int $id = hash($name)\n            with($sel, false, TEAMID == $id){\n                /team leave $name @s\n                TEAMID = 0\n            }\n        }\n    }\n    \n    def lazy empty(){\n        /team empty $name\n    }\n    \n    def lazy remove(){\n        /team remove $name\n    }\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":9},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.16.5","ExportAsZip":false,"packformat":6,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"advanced_debug":false,"isLibrary":false}}