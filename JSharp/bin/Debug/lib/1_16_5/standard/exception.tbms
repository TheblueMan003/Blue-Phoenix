{"projectName":"exception","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":"Made With BluePhoenix","files":[{"name":"import","content":"\n","index":0},{"name":"array","content":"package exception\n\ndef exceptionLoop(){\n    exceptionLoop()\n}\n\ndef lazy exceptionManager(){\n    exceptionLoop()\n}\n\ndef lazy exception(json $value){\n    if (__exception){\n        define json $value1 = [\"\",{\"text\":\"[TBMS - Error]: \",\"color\":\"dark_red\"}]\n        define json $value1 += $value\n        /tellraw @a $value1\n    }\n}\n\ndef lazy indexOutOfBound(int i, int size){\n    exception((\"Index \",dark_red),(i),(\" out of bound for object of size \",dark_red),(size,dark_red))\n    exceptionManager()\n}\n\ndef lazy illegalOperation(string $text){\n    exception((\"Illegal Operation: \",dark_red),($text, red))\n    exceptionManager()\n}\n\ndef lazy invalidArgument(string $text){\n    exception((\"Invalid argument int args: \",dark_red),($text, red))\n    exceptionManager()\n}\n\ndef lazy stackOverflow(string $text){\n    exception((\"Stack Overflow: \",dark_red),($text, red))\n    exceptionManager()\n}\n\ndef lazy stackUnderflow(string $text){\n    exception((\"Stack Underflow: \",dark_red),($text, red))\n    exceptionManager()\n}","index":0},{"name":"argCheck","content":"package exception\n\ndef intArgCheck(int i, int min, int max){\n    if (i < min){\n        invalidArgument(\"Argument smaller than allowed.\")\n    }\n    if (i >= max){\n        invalidArgument(\"Argument bigger than allowed.\")\n    }\n}\n\ndef floatArgCheck(float i, float min, float max){\n    if (i < min){\n        invalidArgument(\"Argument smaller than allowed.\")\n    }\n    if (i >= max){\n        invalidArgument(\"Argument bigger than allowed.\")\n    }\n}","index":0},{"name":"cmdoverflow","content":"package exception\n\nif (__exception){\n    int cmdoverflowvalue\n    [startfile]\n    def ticking stackoverflowcatherstart(){\n        if (cmdoverflowvalue == 1){\n            int maxCommand := 0\n            int maxCommandN := 50000\n            maxCommand ++\n            maxCommandN *= 2\n            switch(maxCommand){\n                1 -> gamerule(maxCommandChainLength, 100000)\n                2 -> gamerule(maxCommandChainLength, 200000)\n                3 -> gamerule(maxCommandChainLength, 400000)\n                4 -> gamerule(maxCommandChainLength, 800000)\n                5 -> gamerule(maxCommandChainLength, 1600000)\n                6 -> gamerule(maxCommandChainLength, 3200000)\n                7 -> gamerule(maxCommandChainLength, 6400000)\n                8 -> gamerule(maxCommandChainLength, 12800000)\n                9 -> gamerule(maxCommandChainLength, 25600000)\n                10 -> gamerule(maxCommandChainLength, 51200000)\n                11 -> gamerule(maxCommandChainLength, 102400000)\n                12 -> gamerule(maxCommandChainLength, 204800000)\n                13 -> gamerule(maxCommandChainLength, 409600000)\n                14 -> gamerule(maxCommandChainLength, 819200000)\n                15 -> gamerule(maxCommandChainLength, 1638400000)\n            }\n            exception(f\"Max Commands Limit reached at some point. Max Command Increased to {maxCommandN}.\")\n        }\n        cmdoverflowvalue = 1\n    }\n    [endfile]\n    def ticking stackoverflowcatcherend(){\n        cmdoverflowvalue = 0\n    }\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":[]},"tick":{"values":[]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":4},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"randomLambdaID":false,"scoreboardValue":"tbms.value","structuresSource":"","structuresSources":{},"scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.17","ExportAsZip":false,"packformat":6,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"opti_FileCleanUp":true,"opti_LambdaCleanUp":false,"advanced_debug":false,"autoSave":true,"isLibrary":false}}