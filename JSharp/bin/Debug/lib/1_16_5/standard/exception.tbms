{"projectName":"exception","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":"Made With BluePhoenix","files":[{"name":"import","content":"\r\n","index":0},{"name":"array","content":"package exception\r\n\r\ndef exceptionLoop(){\r\n    exceptionLoop()\r\n}\r\n\r\ndef lazy exceptionManager(){\r\n    exceptionLoop()\r\n}\r\n\r\ndef lazy exception(json $value){\r\n    if (__exception){\r\n    define json $value1 = [\"\",{\"text\":\"[TBMS - Error]: \",\"color\":\"dark_red\"}]\r\n    define json $value1 += $value\r\n    /tellraw @a $value1\r\n}\r\n}\r\n\r\ndef lazy indexOutOfBound(int i, int size){\r\n    exception((\"Index \",dark_red),(i),(\" out of bound for object of size \",dark_red),(size,dark_red))\r\n    exceptionManager()\r\n}\r\n\r\ndef lazy illegalOperation(string $text){\r\n    exception((\"Illegal Operation: \",dark_red),($text, red))\r\n    exceptionManager()\r\n}\r\n\r\ndef lazy invalidArgument(string $text){\r\n    exception((\"Invalid argument int args: \",dark_red),($text, red))\r\n    exceptionManager()\r\n}\r\n\r\ndef lazy stackOverflow(string $text){\r\n    exception((\"Stack Overflow: \",dark_red),($text, red))\r\n    exceptionManager()\r\n}\r\n\r\ndef lazy stackUnderflow(string $text){\r\n    exception((\"Stack Underflow: \",dark_red),($text, red))\r\n    exceptionManager()\r\n}","index":0},{"name":"argCheck","content":"package exception\r\n\r\ndef intArgCheck(int i, int min, int max){\r\n    if (i < min){\r\n        invalidArgument(\"Argument smaller than allowed.\")\r\n    }\r\n    if (i >= max){\r\n        invalidArgument(\"Argument bigger than allowed.\")\r\n    }\r\n}\r\n\r\ndef floatArgCheck(float i, float min, float max){\r\n    if (i < min){\r\n        invalidArgument(\"Argument smaller than allowed.\")\r\n    }\r\n    if (i >= max){\r\n        invalidArgument(\"Argument bigger than allowed.\")\r\n    }\r\n}","index":0},{"name":"cmdoverflow","content":"package exception\r\n\r\nif (__exception){\r\n    int cmdoverflowvalue\r\n    [startfile]\r\n    def ticking stackoverflowcatherstart(){\r\n        if (cmdoverflowvalue == 1){\r\n            exception(\"Max Commands Limit reached at some point.\")\r\n        }\r\n        cmdoverflowvalue = 1\r\n    }\r\n    [endfile]\r\n    def ticking stackoverflowcatcherend(){\r\n        cmdoverflowvalue = 0\r\n    }\r\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":[]},"tick":{"values":[]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":2},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.17","ExportAsZip":false,"packformat":6,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"isLibrary":false}}