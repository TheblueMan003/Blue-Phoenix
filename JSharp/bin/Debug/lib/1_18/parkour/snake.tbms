{"projectName":"snakeparkour","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":"Made With BluePhoenix","files":[{"name":"import","content":"import cmd.particles\nimport cmd.sound\nimport random","index":0},{"name":"snake","content":"package parkour_snake\n\nenum snakeBlock = white, red, orange, yellow, lime, green, light_blue, aqua, blue, purple, magenta, brown, black, pink, light_gray, gray, cyan, barrier\nINT SnakeID\nINT Speed\nINT Delay\nINT Length\nSNAKEBLOCK Block1\nSNAKEBLOCK Block2\n\ndef newSnake(snakeBlock b1, snakeBlock b2, int speed, int length){\n    /summon marker ~ ~ ~ {Tags:[\"snakeHead\",\"trg\"]}\n    /summon marker ~ ~ ~ {Tags:[\"snakeTail\",\"trg\"]}\n    snake.main.start()\n    snake.main.start()\n    with(@e[tag=trg]){\n        SnakeID = 0\n        Delay = 0\n        Length = length\n        Speed = speed\n        Block1 = b1\n        Block2 = b2\n        untag(@s,trg)\n    }\n}\nalias createSnake as newSnake","index":0},{"name":"snake_block","content":"package parkour_snake\n\nblocktags snake_block{\n    minecraft:white_wool,\n    minecraft:red_wool,\n    minecraft:orange_wool,\n    minecraft:yellow_wool,\n    minecraft:lime_wool,\n    minecraft:green_wool,\n    minecraft:blue_wool,\n    minecraft:light_blue_wool,\n    minecraft:cyan_wool,\n    minecraft:blue_wool,\n    minecraft:purple_wool,\n    minecraft:magenta_wool,\n    minecraft:pink_wool,\n    minecraft:brown_wool,\n    minecraft:black_wool,\n    minecraft:light_gray_wool,\n    minecraft:gray_wool\n}","index":0},{"name":"snake_head","content":"package parkour_snake\n\ndef setSnakeBlock(){\n    SnakeID = (SnakeID + 1)\n    SnakeID %= 2\n    snakeBlock block\n    if (SnakeID == 0){\n        block = Block1\n    }\n    if (SnakeID == 1){\n        block = Block2\n    }\n    switch(block){\n        white -> setblock(~ ~ ~ white_wool)\n        red -> setblock(~ ~ ~ red_wool)\n        orange -> setblock(~ ~ ~ orange_wool)\n        yellow -> setblock(~ ~ ~ yellow_wool)\n        lime -> setblock(~ ~ ~ lime_wool)\n        green -> setblock(~ ~ ~ green_wool)\n        light_blue -> setblock(~ ~ ~ light_blue_wool)\n        cyan -> setblock(~ ~ ~ cyan_wool)\n        blue -> setblock(~ ~ ~ blue_wool)\n        purple -> setblock(~ ~ ~ purple_wool)\n        magenta -> setblock(~ ~ ~ magenta_wool)\n        pink -> setblock(~ ~ ~ pink_wool)\n        gray -> setblock(~ ~ ~ gray_wool)\n        light_gray -> setblock(~ ~ ~ light_gray_wool)\n        black -> setblock(~ ~ ~ black_wool)\n        brown -> setblock(~ ~ ~ brown_wool)\n        barrier -> setblock(~ ~ ~ barrier)\n    }\n    sound.playall(minecraft:entity.item.pickup,1,1)\n}\n\ndef copy(){\n    /summon marker ~ ~ ~ {Tags:[\"snakeHead\",\"trg\"]}\n    snake.main.start()\n    int length = Length\n    int speed = Speed\n    int b1 = Block1\n    int b2 = Block2\n    int i = SnakeID\n    with(@e[tag=trg]){\n        SnakeID = i + 1\n        Delay = 0\n        Length = length\n        Speed = speed\n        Block1 = b1\n        Block2 = b2\n        setSnakeBlock()\n        untag(@s,trg)\n    }\n}\n\ndef snakeHeadMain(){\n    with(@e[tag=snakeHead,type=marker],true){\n        Delay += Speed\n        if(Delay >= 20){\n            Delay  = 0\n            bool hasMoved = false\n            if (block(~1 ~ ~ tripwire) && !hasMoved){\n                /tp @s ~1 ~ ~\n                at(@s){setSnakeBlock()}\n                hasMoved = true\n            }\n            \n            \n            if (block(~-1 ~ ~ tripwire) && hasMoved){\n                positioned(~-1 ~ ~){\n                    copy()\n                }\n            }\n            if (block(~-1 ~ ~ tripwire) && !hasMoved){\n                /tp @s ~-1 ~ ~\n                at(@s){setSnakeBlock()}\n                hasMoved = true\n            }\n            \n            \n            if (block(~ ~1 ~ tripwire) && hasMoved){\n                positioned(~ ~1 ~){\n                    copy()\n                }\n            }\n            if (block(~ ~1 ~ tripwire) && !hasMoved){\n                /tp @s ~ ~1 ~\n                at(@s){setSnakeBlock()}\n                hasMoved = true\n            }\n            \n            \n            if (block(~ ~-1 ~ tripwire) && hasMoved){\n                positioned(~ ~-1 ~){\n                    copy()\n                }\n            }\n            if (block(~ ~-1 ~ tripwire) && !hasMoved){\n                /tp @s ~ ~-1 ~\n                at(@s){setSnakeBlock()}\n                hasMoved = true\n            }\n            \n            \n            if (block(~ ~ ~1 tripwire) && hasMoved){\n                positioned(~ ~ ~1){\n                    copy()\n                }\n            }\n            if (block(~ ~ ~1 tripwire) && !hasMoved){\n                /tp @s ~ ~ ~1\n                at(@s){setSnakeBlock()}\n                hasMoved = true\n            }\n            \n            \n            if (block(~ ~ ~-1 tripwire) && hasMoved){\n                positioned(~ ~ ~-1){\n                    copy()\n                }\n            }\n            if (block(~ ~ ~-1 tripwire) && !hasMoved){\n                /tp @s ~ ~ ~-1\n                at(@s){setSnakeBlock()}\n                hasMoved = true\n            }\n            \n            \n            if(!hasMoved){\n                snake.main.stop()\n                kill(@s)\n            }\n        }\n    }\n}","index":0},{"name":"snake_tail","content":"package parkour_snake\n\ndef rmSnakeBlock(){\n    setblock(~ ~ ~ tripwire)\n    particles.sphere(end_rod,1,0.1,1)\n}\n\ndef copyTail(){\n    /summon marker ~ ~ ~ {Tags:[\"snakeTail\",\"trg\"]}\n    snake.main.start()\n    int length = Length\n    int speed = Speed\n    int b1 = Block1\n    int b2 = Block2\n    int i = SnakeID\n    with(@e[tag=trg]){\n        SnakeID = i\n        Delay = 0\n        Length = length\n        Speed = speed\n        Block1 = b1\n        Block2 = b2\n        untag(@s,trg)\n    }\n}\n\ndef snakeTailMain(){\n    with(@e[tag=snakeTail,type=marker],true){\n        Delay += Speed\n        if(Delay >= 20){\n            Delay  = 0\n            Length--\n            if (Length < 0){\n                bool hasMoved = false\n                if (block(~1 ~ ~ #snake_block) && !hasMoved){\n                    /tp @s ~1 ~ ~\n                    at(@s){rmSnakeBlock()}\n                    hasMoved = true\n                }\n                \n                if (block(~-1 ~ ~ #snake_block) && hasMoved){\n                    positioned(~-1 ~ ~){\n                        copyTail()\n                        rmSnakeBlock()\n                    }\n                }\n                if (block(~-1 ~ ~ #snake_block) && !hasMoved){\n                    /tp @s ~-1 ~ ~\n                    at(@s){rmSnakeBlock()}\n                    hasMoved = true\n                }\n                \n                \n                if (block(~ ~1 ~ #snake_block) && hasMoved){\n                    positioned(~ ~1 ~){\n                        copyTail()\n                        rmSnakeBlock()\n                    }\n                }\n                if (block(~ ~1 ~ #snake_block) && !hasMoved){\n                    /tp @s ~ ~1 ~\n                    at(@s){rmSnakeBlock()}\n                    hasMoved = true\n                }\n                \n                \n                if (block(~ ~-1 ~ #snake_block) && hasMoved){\n                    positioned(~ ~-1 ~){\n                        copyTail()\n                        rmSnakeBlock()\n                    }\n                }\n                if (block(~ ~-1 ~ #snake_block) && !hasMoved){\n                    /tp @s ~ ~-1 ~\n                    at(@s){rmSnakeBlock()}\n                    hasMoved = true\n                }\n                \n                if (block(~ ~ ~1 #snake_block) && hasMoved){\n                    positioned(~ ~ ~1){\n                        copyTail()\n                        rmSnakeBlock()\n                    }\n                }\n                if (block(~ ~ ~1 #snake_block) && !hasMoved){\n                    /tp @s ~ ~ ~1\n                    at(@s){rmSnakeBlock()}\n                    hasMoved = true\n                }\n                \n                \n                if (block(~ ~ ~-1 #snake_block) && hasMoved){\n                    positioned(~ ~ ~-1){\n                        copyTail()\n                        rmSnakeBlock()\n                    }\n                }\n                if (block(~ ~ ~-1 #snake_block) && !hasMoved){\n                    /tp @s ~ ~ ~-1\n                    at(@s){rmSnakeBlock()}\n                    hasMoved = true\n                }\n                if(!hasMoved){\n                    snake.main.stop()\n                    kill(@s)\n                }\n            }\n        }\n    }\n}","index":0},{"name":"snake_main","content":"package parkour_snake\n\ndef main(){\n    snakeHeadMain()\n    snakeTailMain()\n}","index":0},{"name":"tick","content":"package snake\n\nbool enabled:=true\ndef helper enable(){\n    enabled = true\n}\ndef helper disable(){\n    enabled = false\n}\n\nint GreenSpeed := 4\nint GreenLength := 20\n\nint RedSpeed := 8\nint RedLength := 20\n\nbool __inited\n\ndef @playertick(){\n    enabled:=true\n    if (snake.enabled){\n        if (__inited == null){\n            __inited = true\n            GreenSpeed := 4\n            GreenLength := 20\n            \n            RedSpeed := 8\n            RedLength := 20\n        }\n        \n        \n        bool spawn = false\n        int speed\n        int length\n        if(block(~ ~-0.2 ~ purple_glazed_terracotta)){\n            setblock(~ ~-0.2 ~ obsidian)\n            /summon marker ~ ~ ~ {Invisible:1,Tags:[\"limeSnake\",\"rSnake\"],NoGravity:1}\n            spawn = true\n            speed = GreenSpeed\n            length = GreenLength\n        }\n        if(block(~ ~-0.2 ~ red_glazed_terracotta)){\n            setblock(~ ~-0.2 ~ obsidian)\n            /summon marker ~ ~ ~ {Invisible:1,Tags:[\"redSnake\",\"rSnake\"],NoGravity:1}\n            spawn = true\n            speed = RedSpeed\n            length = RedLength\n        }\n        if (spawn){\n            int rand2 = random.range(0, 13)\n            \n            positioned(~ ~-1 ~){\n                switch(rand2){\n                    0 -> parkour_snake.newSnake(lime, green, speed, length)\n                    1 -> parkour_snake.newSnake(blue, cyan, speed, length)\n                    2 -> parkour_snake.newSnake(blue, light_blue, speed, length)\n                    3 -> parkour_snake.newSnake(yellow, orange, speed, length)\n                    4 -> parkour_snake.newSnake(orange, red, speed, length)\n                    5 -> parkour_snake.newSnake(magenta, purple, speed, length)\n                    6 -> parkour_snake.newSnake(white, black, speed, length)\n                    7 -> parkour_snake.newSnake(gray, light_gray, speed, length)\n                    8 -> parkour_snake.newSnake(lime, yellow,speed, length)\n                    9 -> parkour_snake.newSnake(black, red, speed, length)\n                    10 -> parkour_snake.newSnake(black, blue, speed, length)\n                    11 -> parkour_snake.newSnake(black, yellow, speed, length)\n                    12 -> parkour_snake.newSnake(magenta, pink, speed, length)\n                }\n            }\n            reload.start()\n        }\n    }\n}\n\ncprocess main{\n    def main(){\n        parkour_snake.main()\n    }\n}\n\n\nINT SnakeTime = 0\ncprocess reload{\n    def main(){\n        with(@e[tag=limeSnake,type=marker],true){\n            SnakeTime ++\n            if (SnakeTime > 125){\n                setblock(~ ~-1 ~ purple_glazed_terracotta)\n                stop()\n                kill(@s)\n            }\n        }\n        with(@e[tag=redSnake,type=marker],true){\n            SnakeTime ++\n            if (SnakeTime > 125){\n                setblock(~ ~-1 ~ red_glazed_terracotta)\n                stop()\n                kill(@s)\n            }\n        }\n    }\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":18},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"randomLambdaID":false,"scoreboardValue":"tbms.value","structuresSource":"","structuresSources":{},"scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.16.5","ExportAsZip":false,"packformat":6,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"opti_FileCleanUp":true,"opti_LambdaCleanUp":false,"advanced_debug":false,"isLibrary":false}}