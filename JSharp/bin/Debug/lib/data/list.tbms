{"projectName":"list","datapackDirectory":null,"offuscate":true,"files":[{"name":"import","content":"import math\nimport tools\nimport exception","index":0},{"name":"tools","content":"package list\n\ndef setUnit(int v){\n\tswitch(v){\n\t\t0 -> /setblock ~ ~ ~ white_wool\n\t\t1 -> /setblock ~ ~ ~ red_wool\n\t\t2 -> /setblock ~ ~ ~ orange_wool\n\t\t3 -> /setblock ~ ~ ~ yellow_wool\n\t\t4 -> /setblock ~ ~ ~ lime_wool\n\t\t5 -> /setblock ~ ~ ~ green_wool\n\t\t6 -> /setblock ~ ~ ~ cyan_wool\n\t\t7 -> /setblock ~ ~ ~ light_blue_wool\n\t\t8 -> /setblock ~ ~ ~ blue_wool\n\t\t9 -> /setblock ~ ~ ~ purple_wool\n\t\t10 -> /setblock ~ ~ ~ magenta_wool\n\t\t11 -> /setblock ~ ~ ~ pink_wool\n\t\t12 -> /setblock ~ ~ ~ brown_wool\n\t\t13 -> /setblock ~ ~ ~ light_gray_wool\n\t\t14 -> /setblock ~ ~ ~ gray_wool\n\t\t15 -> /setblock ~ ~ ~ black_wool\n\t}\n}\n\ndef getUnit():int{\n\tint v = -1\n\tif(block(~ ~ ~ white_wool)){v = 0}\n\tif(block(~ ~ ~ red_wool)){v = 1}\n\tif(block(~ ~ ~ orange_wool)){v = 2}\n\tif(block(~ ~ ~ yellow_wool)){v = 3}\n\tif(block(~ ~ ~ lime_wool)){v = 4}\n\tif(block(~ ~ ~ green_wool)){v = 5}\n\tif(block(~ ~ ~ cyan_wool)){v = 6}\n\tif(block(~ ~ ~ light_blue_wool)){v = 7}\n\tif(block(~ ~ ~ blue_wool)){v = 8}\n\tif(block(~ ~ ~ purple_wool)){v = 9}\n\tif(block(~ ~ ~ magenta_wool)){v = 10}\n\tif(block(~ ~ ~ pink_wool)){v = 11}\n\tif(block(~ ~ ~ brown_wool)){v = 12}\n\tif(block(~ ~ ~ light_gray_wool)){v = 13}\n\tif(block(~ ~ ~ gray_wool)){v = 14}\n\tif(block(~ ~ ~ black_wool)){v = 15}\n\treturn(v)\n}","index":0},{"name":"value","content":"package list\n\nenum DataFormat = Base2, Base8, Base10, Base16\n\ndef writeInt(int value, DataFormat f = Base16){\n\tint sign = math.sign(value)\n\tint w = math.abs(value)\n\tint base\n\tint bits = 32\n\tint logBase = 0\n\tswitch(f){\n\t\tBase2 -> base = 2\n\t\tBase8 -> base = 8\n\t\tBase10 -> base = 10\n\t\tBase16 -> base = 16\n\t}\n\tswitch(f){\n\t\tBase2 -> logBase = 1\n\t\tBase8 -> logBase = 3\n\t\tBase10 -> logBase = 3\n\t\tBase16 -> logBase = 4\n\t}\n\tdef place(){\n\t\tint unit = w % base\n\t\tw /= base\n\t\tbits -= logBase\n\t\tif (bits <= 0){\n\t\t\tunit += 1\n\t\t\tunit *= sign\n\t\t\tunit += base/2\n\t\t}\n\t\tsetUnit(unit)\n\t\tif (bits > 0){\n\t\t\tpositioned(~1 ~ ~){\n\t\t\t\tplace()\t\n\t\t\t}\n\t\t}\n\t}\n\tplace()\n}\n\ndef readInt(DataFormat f = Base16):int{\n\tint w = 0\n\tint base\n\tint bits = 32\n\tint logBase = 0\n\tint pow = 0\n\tint sign = 1\n\tswitch(f){\n\t\tBase2 -> base = 2\n\t\tBase8 -> base = 8\n\t\tBase10 -> base = 10\n\t\tBase16 -> base = 16\n\t}\n\tswitch(f){\n\t\tBase2 -> logBase = 1\n\t\tBase8 -> logBase = 3\n\t\tBase10 -> logBase = 3\n\t\tBase16 -> logBase = 4\n\t}\n\tdef read(){\n\t\tint unit = getUnit()\n\n\t\tbits -= logBase \n\t\tif (bits <= 0){\n\t\t\tunit -= base/2\n\t\t\tsign = math.sign(unit)\n\t\t\tunit = math.abs(unit)\n\t\t\tunit -= 1\n\t\t}\n\t\t\n\t\tint c = math.pow(base, pow)\n\t\tw += unit * c\n\n\t\tpow++\n\t\tif (bits > 0){\n\t\t\tpositioned(~1 ~ ~){\n\t\t\t\tread()\t\n\t\t\t}\n\t\t}\n\t}\n\tread()\n\treturn(w*sign)\n}","index":0},{"name":"floatvalue","content":"package list\n\ndef writeFloat(float value, DataFormat f = Base16){\n\tint v \n\tv #= value\n\twriteInt(v, f)\n}\n\ndef readFloat(DataFormat f = Base16):float{\n\tfloat v \n\tv #= readInt(f)\n\treturn(v)\n}\n","index":0},{"name":"address","content":"package list\n\ndef getAddress(int x,int z, int index):int,int,int{\n\tint d = (index % 2)*8\n\t\n\tindex /= 2\n\t\n\tint e = index % 16\n\tindex /= 16\n\t\n\tint f = index % 256\n\tindex /= 256\n\t\n\tint g = index * 16\n\tint j = x + d + g\n\tint k = f\n\tint l = z + e\n\n\treturn(x + d + g, f, z + e)\n}\nint iRes\ndef iwrite(){\n\tlist.writeint(iRes)\n}\ndef iread(){\n\tiRes = list.readInt()\n}\n\nfloat fRes\nbool t = false\ndef fWrite(){\n\tif (!t){\n\t\t/tp @s ~ ~ ~\n\t\tt = true\n\t}\n\tlist.writeFloat(fRes)\n}\ndef fRead(){\n\t\tfRes = list.readFloat()\n}","index":0},{"name":"intlist","content":"package list\n\nstruct intList{\n\tint x, z\n\tint size\n\t\n\tdef __init__(int x, int z){\n\t\tthis.x = x\n\t\tthis.z = z\n\t\tsize = 0\n\t}\n\n\n\tdef get(int index):int{\n\t\tif (index >= size){\n\t\t\texception.invalidargument()\n\t\t}\n\t\tint a, b, c\n\t\ta, b, c = list.getAddress(x, z, index)\n\n\t\ttools.locatedAt(a, b, c, list.iread)\n\t\treturn(list.iRes)\n\t}\n\n\tdef set(int index, int value){\n\t\tif (index >= size){\n\t\t\texception.invalidargument()\n\t\t}\n\t\tint a, b, c\n\t\ta, b, c = list.getAddress(x,z,index)\n\t\tlist.iRes = value\n\t\ttools.locatedAt(a, b, c, list.iwrite)\n\t}\n\n\tdef add(int value){\n\t\tint index = size\n\t\tsize ++\t\n\t\tset(index, value)\n\t}\n}","index":0},{"name":"floatlist","content":"package list\n\nstruct floatList{\n\tint x, z\n\tint size\n\t\n\tdef __init__(int x, int z){\n\t\tthis.x = x\n\t\tthis.z = z\n\t\tsize = 0\n\t}\n\n\tdef get(int index):float{\n\t\tif (index >= size){\n\t\t\texception.invalidargument()\n\t\t}\n\t\tint a, b, c\n\t\ta, b, c = list.getAddress(x, z, index)\n\n\t\ttools.locatedAt(a, b, c, list.fread)\n\t\treturn(list.fRes)\n\t}\n\n\tdef set(int index, float value){\n\t\tif (index >= size){\n\t\t\texception.invalidargument()\n\t\t}\n\t\tint a, b, c\n\t\ta, b, c = list.getAddress(x, z, index)\n\t\tlist.fRes = value\n\t\ttools.locatedAt(a, b, c, list.fwrite)\n\t}\n\n\tdef add(float value){\n\t\tint index = size\n\t\tsize ++\t\n\t\tset(index, value)\n\t}\n}\n","index":0}],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"version":{"major":1,"minor":0,"patch":0,"build":29}}