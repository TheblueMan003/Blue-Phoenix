{"projectName":"room","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":"Made With BluePhoenix","files":[{"name":"import","content":"import math\nimport tools.tick_manager","index":0},{"name":"room_ticking","content":"package room\n\nint x, y, z\n\n[startfile]\ndef ticking room_detection_init(){\n    @room_init()\n}\n[endfile]\ndef ticking room_detection_end(){\n    @room_end()\n}\n\ndef @playertick(){\n    x = @s.x\n    y = @s.y\n    z = @s.z\n    @room_ticking()\n}","index":0},{"name":"room","content":"package room\n\nenum room_color = white, red, orange, yellow, green, aqua, blue, purple\n\nstruct room{\n    int sx, sy, sz, ex, ey, ez\n    function eventEnter, eventStay, eventExit, eventActivate, eventDisactivate\n    bool hasEnterEvent, hasStayEvent, hasExitEvent, hasActivateEvent, hasDisactivateEvent\n    room_color color\n    BOOL IN\n    bool display, hasDisplay, count\n    int nbPlayer\n    \n    def __init__(int sx, int sy, int sz, int ex, int ey, int ez, \n        function onStay = null, function onEnter = null,\n        function onExit = null, function onActivate = null, function onDisactivate = null){\n        this.sx, this.ex = math.sorted(sx, ex)\n        this.sy, this.ey = math.sorted(sy, ey)\n        this.sz, this.ez = math.sorted(sz, ez)\n        this.ex += 1\n        this.ey += 1\n        this.ez += 1\n        \n        this.onEnter(onEnter)\n        this.onStay(onStay)\n        this.onExit(onExit)\n        this.onActivate(onActivate)\n        this.onDisactivate(onDisactivate)\n        \n        count = true\n        display = true\n        color = yellow\n    }\n    def setBound(int sx, int sy, int sz, int ex, int ey, int ez){\n        this.sx, this.ex = math.sorted(sx, ex)\n        this.sy, this.ey = math.sorted(sy, ey)\n        this.sz, this.ez = math.sorted(sz, ez)\n        \n        this.ex += 1\n        this.ey += 1\n        this.ez += 1\n    }\n    def setColor(room_color c){\n        color = c\n    }\n    def onEnter(function event){\n        eventEnter = event\n        if (event !=null){\n            hasEnterEvent = true\n        }\n    }\n    def onStay(function event){\n        eventStay = event\n        if (event !=null){\n            hasStayEvent = true\n        }\n    }\n    def onActivate(function event){\n        eventActivate = event\n        if (event !=null){\n            hasActivateEvent = true\n        }\n    }\n    def onDisactivate(function event){\n        eventDisactivate= event\n        if (event !=null){\n            hasDisactivateEvent = true\n        }\n    }\n    def onExit(function event){\n        eventExit = event\n        if (event !=null){\n            hasExitEvent = true\n        }\n    }\n    \n    def particule(){\n        switch(color){\n            red -> /particle minecraft:dust 1 0 0 1 ~ ~ ~ 0 0 0 0 1\n            orange -> /particle minecraft:dust 1 0.5 0 1 ~ ~ ~ 0 0 0 0 1\n            yellow -> /particle minecraft:dust 1 1 0 1 ~ ~ ~ 0 0 0 0 1\n            green -> /particle minecraft:dust 0 1 0 1 ~ ~ ~ 0 0 0 0 1\n            aqua -> /particle minecraft:dust 0 1 1 1 ~ ~ ~ 0 0 0 0 1\n            blue -> /particle minecraft:dust 0 0 1 1 ~ ~ ~ 0 0 0 0 1\n            purple -> /particle minecraft:dust 1 0 1 1 ~ ~ ~ 0 0 0 0 1\n            white -> /particle minecraft:dust 1 1 1 1 ~ ~ ~ 0 0 0 0 1\n        }\n    }\n    \n    def @room_show show(){\n        /summon marker ~ 0 ~ {Invisible:1,Tags:[\"trg_show\"]}\n        with(@e[tag=trg_show]){\n            for(int x = sx;x <= ex;x+=5){\n                @s.x = x\n                @s.y = sy\n                @s.z = sz\n                at(@s){\n                    particule()\n                }\n                @s.y = ey\n                at(@s){\n                    particule()\n                }\n                @s.y = sy\n                @s.z = ez\n                at(@s){\n                    particule()\n                }\n                @s.y = ey\n                at(@s){\n                    particule()\n                }\n            }\n            for(int y = sy;y <= ey;y+=5){\n                @s.y = y\n                @s.x = sx\n                @s.z = sz\n                at(@s){\n                    particule()\n                }\n                @s.x = ex\n                at(@s){\n                    particule()\n                }\n                @s.x = sx\n                @s.z = ez\n                at(@s){\n                    particule()\n                }\n                @s.x = ex\n                at(@s){\n                    particule()\n                }\n            }\n            for(int z = sz;z <= ez;z+=5){\n                @s.z = z\n                @s.y = sy\n                @s.x = sx\n                at(@s){\n                    particule()\n                }\n                @s.y = ey\n                at(@s){\n                    particule()\n                }\n                @s.y = sy\n                @s.x = ex\n                at(@s){\n                    particule()\n                }\n                @s.y = ey\n                at(@s){\n                    particule()\n                }\n            }\n            kill(@s)\n        }\n    }\n    \n    def @room_init main_init(){\n        hasDisplay = false\n        if (count){\n            nbPlayer = 0\n        }\n    }\n    def @room_end main_end(){\n        if (count){\n            count = false\n        }\n    }\n    def @room_ticking main(){\n        if (x >= sx && x < ex && y >= sy && y < ey && z >= sz && z < ez){\n            if (count){\n                nbPlayer++\n            }\n            if (!IN){\n                if (hasEnterEvent){\n                    eventEnter()\n                }\n                if (nbPlayer == 0 && hasActivateEvent){\n                    eventActivate()\n                }\n                if(!count){\n                    nbPlayer++\n                }\n                IN = true\n            }\n            if (IN){\n                if (hasStayEvent){\n                    eventStay()\n                }\n                if (display && !hasDisplay && @s[gamemode=creative]){\n                    show()\n                    hasDisplay = true\n                }\n            }\n        }\n        else if (IN){\n            IN = false\n            if (hasExitEvent){\n                eventExit()\n            }\n            if (!count){\n                nbPlayer--\n                if (nbPlayer == 0 && hasDisactivateEvent){\n                    eventDisactivate()\n                }\n                if (nbPlayer < 0){\n                    nbPlayer = 0\n                }\n            }\n        }\n    }\n}","index":0},{"name":"lazy_room","content":"package room\n\nstatic abstract class area{\n    int sx, sy, sz, ex, ey, ez\n    room_color color\n    BOOL IN\n    bool display, hasDisplay, count\n    int nbPlayer\n    \n    def init(int sx, int sy, int sz, int ex, int ey, int ez){\n        this.sx, this.ex = math.sorted(sx, ex)\n        this.sy, this.ey = math.sorted(sy, ey)\n        this.sz, this.ez = math.sorted(sz, ez)\n        this.ex += 1\n        this.ey += 1\n        this.ez += 1\n        \n        count = true\n        display = true\n        color = yellow\n    }\n    def setBound(int sx, int sy, int sz, int ex, int ey, int ez){\n        this.sx, this.ex = math.sorted(sx, ex)\n        this.sy, this.ey = math.sorted(sy, ey)\n        this.sz, this.ez = math.sorted(sz, ez)\n        \n        this.ex += 1\n        this.ey += 1\n        this.ez += 1\n    }\n    def setColor(room_color c){\n        color = c\n    }\n    def abstract onEnter()\n    def abstract onStay()\n    def abstract onActivate()\n    def abstract onDisactivate()\n    def abstract onExit()\n    def abstract onInit()\n    def loading reload(){\n        onInit()\n    }\n    \n    def particule(){\n        switch(color){\n            red -> /particle minecraft:dust 1 0 0 1 ~ ~ ~ 0 0 0 0 1\n            orange -> /particle minecraft:dust 1 0.5 0 1 ~ ~ ~ 0 0 0 0 1\n            yellow -> /particle minecraft:dust 1 1 0 1 ~ ~ ~ 0 0 0 0 1\n            green -> /particle minecraft:dust 0 1 0 1 ~ ~ ~ 0 0 0 0 1\n            aqua -> /particle minecraft:dust 0 1 1 1 ~ ~ ~ 0 0 0 0 1\n            blue -> /particle minecraft:dust 0 0 1 1 ~ ~ ~ 0 0 0 0 1\n            purple -> /particle minecraft:dust 1 0 1 1 ~ ~ ~ 0 0 0 0 1\n            white -> /particle minecraft:dust 1 1 1 1 ~ ~ ~ 0 0 0 0 1\n        }\n    }\n    \n    def @room_show show(){\n        /summon marker ~ 0 ~ {Invisible:1,Tags:[\"trg_show\"]}\n        with(@e[tag=trg_show]){\n            for(int x = sx;x <= ex;x+=5){\n                @s.x = x\n                @s.y = sy\n                @s.z = sz\n                at(@s){\n                    particule()\n                }\n                @s.y = ey\n                at(@s){\n                    particule()\n                }\n                @s.y = sy\n                @s.z = ez\n                at(@s){\n                    particule()\n                }\n                @s.y = ey\n                at(@s){\n                    particule()\n                }\n            }\n            for(int y = sy;y <= ey;y+=5){\n                @s.y = y\n                @s.x = sx\n                @s.z = sz\n                at(@s){\n                    particule()\n                }\n                @s.x = ex\n                at(@s){\n                    particule()\n                }\n                @s.x = sx\n                @s.z = ez\n                at(@s){\n                    particule()\n                }\n                @s.x = ex\n                at(@s){\n                    particule()\n                }\n            }\n            for(int z = sz;z <= ez;z+=5){\n                @s.z = z\n                @s.y = sy\n                @s.x = sx\n                at(@s){\n                    particule()\n                }\n                @s.y = ey\n                at(@s){\n                    particule()\n                }\n                @s.y = sy\n                @s.x = ex\n                at(@s){\n                    particule()\n                }\n                @s.y = ey\n                at(@s){\n                    particule()\n                }\n            }\n            kill(@s)\n        }\n    }\n    \n    def @room_init main_init(){\n        hasDisplay = false\n        if (count){\n            nbPlayer = 0\n        }\n    }\n    def @room_end main_end(){\n        if (count){\n            count = false\n        }\n    }\n    def @room_ticking main(){\n        if (x >= sx && x < ex && y >= sy && y < ey && z >= sz && z < ez){\n            if (count){\n                nbPlayer++\n            }\n            if (!IN){\n                onEnter()\n                if (nbPlayer == 0){\n                    onActivate()\n                }\n                if(!count){\n                    nbPlayer++\n                }\n                IN = true\n            }\n            if (IN){\n                onStay()\n                if (display && !hasDisplay && @s[gamemode=creative]){\n                    show()\n                    hasDisplay = true\n                }\n            }\n        }\n        else if (IN){\n            IN = false\n            onExit()\n            if (!count){\n                nbPlayer--\n                if (nbPlayer == 0){\n                    onDisactivate()\n                }\n                if (nbPlayer < 0){\n                    nbPlayer = 0\n                }\n            }\n        }\n    }\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":49},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"randomLambdaID":false,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.16.5","ExportAsZip":false,"packformat":6,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"opti_FileCleanUp":true,"advanced_debug":false,"isLibrary":false}}