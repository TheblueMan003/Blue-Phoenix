{"projectName":"room","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":false,"isLibrary":false,"description":"Made With BluePhoenix","files":[{"name":"import","content":"import math","index":0},{"name":"room_ticking","content":"package room\r\n\r\nint x, y, z\r\ndef ticking room_main(){\r\n    @room_init()\r\n    with(@a,true){\r\n        x = @s.x\r\n        y = @s.y\r\n        z = @s.z\r\n        @room_ticking()\r\n    }\r\n    @room_end()\r\n}","index":0},{"name":"room","content":"package room\r\n\r\nenum room_color = white, red, orange, yellow, green, aqua, blue, purple\r\n\r\nstruct room{\r\n    int sx, sy, sz, ex, ey, ez\r\n    function eventEnter, eventStay, eventExit, eventActivate, eventDisactivate\r\n    bool hasEnterEvent, hasStayEvent, hasExitEvent, hasActivateEvent, hasDisactivateEvent\r\n    room_color color\r\n    BOOL IN\r\n    bool display, hasDisplay, count\r\n    int nbPlayer\r\n    \r\n    def __init__(int sx, int sy, int sz, int ex, int ey, int ez, \r\n        function onStay = null, function onEnter = null,\r\n        function onExit = null, function onActivate = null, function onDisactivate = null){\r\n        this.sx, this.ex = math.sorted(sx, ex)\r\n        this.sy, this.ey = math.sorted(sy, ey)\r\n        this.sz, this.ez = math.sorted(sz, ez)\r\n        this.ex += 1\r\n        this.ey += 1\r\n        this.ez += 1\r\n        \r\n        this.onEnter(onEnter)\r\n        this.onStay(onStay)\r\n        this.onExit(onExit)\r\n        this.onActivate(onActivate)\r\n        this.onDisactivate(onDisactivate)\r\n        \r\n        count = true\r\n        display = true\r\n        color = yellow\r\n    }\r\n    def setBound(int sx, int sy, int sz, int ex, int ey, int ez){\r\n        this.sx, this.ex = math.sorted(sx, ex)\r\n        this.sy, this.ey = math.sorted(sy, ey)\r\n        this.sz, this.ez = math.sorted(sz, ez)\r\n    }\r\n    def setColor(room_color c){\r\n        color = c\r\n    }\r\n    def onEnter(function event){\r\n        eventEnter = event\r\n        if (event !=null){\r\n            hasEnterEvent = true\r\n        }\r\n    }\r\n    def onStay(function event){\r\n        eventStay = event\r\n        if (event !=null){\r\n            hasStayEvent = true\r\n        }\r\n    }\r\n    def onActivate(function event){\r\n        eventActivate = event\r\n        if (event !=null){\r\n            hasActivateEvent = true\r\n        }\r\n    }\r\n    def onDisactivate(function event){\r\n        eventDisactivate= event\r\n        if (event !=null){\r\n            hasDisactivateEvent = true\r\n        }\r\n    }\r\n    def onExit(function event){\r\n        eventExit = event\r\n        if (event !=null){\r\n            hasExitEvent = true\r\n        }\r\n    }\r\n    \r\n    def particule(){\r\n        switch(color){\r\n            red -> /particle minecraft:dust 1 0 0 1 ~ ~ ~ 0 0 0 0 1\r\n            orange -> /particle minecraft:dust 1 0.5 0 1 ~ ~ ~ 0 0 0 0 1\r\n            yellow -> /particle minecraft:dust 1 1 0 1 ~ ~ ~ 0 0 0 0 1\r\n            green -> /particle minecraft:dust 0 1 0 1 ~ ~ ~ 0 0 0 0 1\r\n            aqua -> /particle minecraft:dust 0 1 1 1 ~ ~ ~ 0 0 0 0 1\r\n            blue -> /particle minecraft:dust 0 0 1 1 ~ ~ ~ 0 0 0 0 1\r\n            purple -> /particle minecraft:dust 1 0 1 1 ~ ~ ~ 0 0 0 0 1\r\n            white -> /particle minecraft:dust 1 1 1 1 ~ ~ ~ 0 0 0 0 1\r\n        }\r\n    }\r\n    \r\n    def @room_show show(){\r\n        /summon armor_stand ~ 0 ~ {Invisible:1,Tags:[\"trg_show\"]}\r\n        with(@e[tag=trg_show]){\r\n            for(int x = sx;x <= ex;x+=5){\r\n                @s.x = x\r\n                @s.y = sy\r\n                @s.z = sz\r\n                at(@s){\r\n                    particule()\r\n                }\r\n                @s.y = ey\r\n                @s.z = sz\r\n                at(@s){\r\n                    particule()\r\n                }\r\n                @s.y = sy\r\n                @s.z = ez\r\n                at(@s){\r\n                    particule()\r\n                }\r\n                @s.y = ey\r\n                @s.z = ez\r\n                at(@s){\r\n                    particule()\r\n                }\r\n            }\r\n            for(int y = sy;y <= ey;y+=5){\r\n                @s.y = y\r\n                @s.x = sx\r\n                @s.z = sz\r\n                at(@s){\r\n                    particule()\r\n                }\r\n                @s.x = ex\r\n                @s.z = sz\r\n                at(@s){\r\n                    particule()\r\n                }\r\n                @s.x = sx\r\n                @s.z = ez\r\n                at(@s){\r\n                    particule()\r\n                }\r\n                @s.x = ex\r\n                @s.z = ez\r\n                at(@s){\r\n                    particule()\r\n                }\r\n            }\r\n            for(int z = sz;z <= ez;z+=5){\r\n                @s.z = z\r\n                @s.y = sy\r\n                @s.x = sx\r\n                at(@s){\r\n                    particule()\r\n                }\r\n                @s.y = ey\r\n                @s.x = sx\r\n                at(@s){\r\n                    particule()\r\n                }\r\n                @s.y = sy\r\n                @s.x = ex\r\n                at(@s){\r\n                    particule()\r\n                }\r\n                @s.y = ey\r\n                @s.x = ex\r\n                at(@s){\r\n                    particule()\r\n                }\r\n            }\r\n            kill(@s)\r\n        }\r\n    }\r\n    \r\n    def @room_init main_init(){\r\n        hasDisplay = false\r\n        if (count){\r\n            nbPlayer = 0\r\n        }\r\n    }\r\n    def @room_end main_end(){\r\n        if (count){\r\n            count = false\r\n        }\r\n    }\r\n    def @room_ticking main(){\r\n        if (x >= sx && x < ex && y >= sy && y < ey && z >= sz && z < ez){\r\n            if (count){\r\n                nbPlayer++\r\n            }\r\n            if (!IN){\r\n                if (hasEnterEvent){\r\n                    eventEnter()\r\n                }\r\n                if (nbPlayer == 0 && hasActivateEvent){\r\n                    eventActivate()\r\n                }\r\n                if(!count){\r\n                    nbPlayer++\r\n                }\r\n                IN = true\r\n            }\r\n            if (IN){\r\n                if (hasStayEvent){\r\n                    eventStay()\r\n                }\r\n                if (display && !hasDisplay && @a[gamemode=creative]){\r\n                    show()\r\n                    hasDisplay = true\r\n                }\r\n            }\r\n        }\r\n        else if (IN){\r\n            IN = false\r\n            if (hasExitEvent){\r\n                eventExit()\r\n            }\r\n            if (!count){\r\n                nbPlayer--\r\n                if (nbPlayer == 0 && hasDisactivateEvent){\r\n                    eventDisactivate()\r\n                }\r\n                if (nbPlayer < 0){\r\n                    nbPlayer = 0\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","index":0},{"name":"lazy_room","content":"package room\r\n\r\nstruct lazy_room{\r\n    int sx, sy, sz, ex, ey, ez\r\n    function eventEnter, eventStay, eventExit, eventActivate, eventDisactivate\r\n    bool hasEnterEvent, hasStayEvent, hasExitEvent, hasActivateEvent, hasDisactivateEvent\r\n    \r\n    BOOL IN\r\n    bool count\r\n    int nbPlayer\r\n    \r\n    def __init__(int sx, int sy, int sz, int ex, int ey, int ez, \r\n        function onStay = null, function onEnter = null,\r\n        function onExit = null, function onActivate = null, function onDisactivate = null){\r\n        this.sx, this.ex = math.sorted(sx, ex)\r\n        this.sy, this.ey = math.sorted(sy, ey)\r\n        this.sz, this.ez = math.sorted(sz, ez)\r\n        this.ex += 1\r\n        this.ey += 1\r\n        this.ez += 1\r\n        \r\n        this.onEnter(onEnter)\r\n        this.onStay(onStay)\r\n        this.onExit(onExit)\r\n        this.onActivate(onActivate)\r\n        this.onDisactivate(onDisactivate)\r\n        \r\n        count = true\r\n        color = yellow\r\n    }\r\n    def setBound(int sx, int sy, int sz, int ex, int ey, int ez){\r\n        this.sx, this.ex = math.sorted(sx, ex)\r\n        this.sy, this.ey = math.sorted(sy, ey)\r\n        this.sz, this.ez = math.sorted(sz, ez)\r\n    }\r\n    def setColor(room_color c){\r\n        color = c\r\n    }\r\n    def onEnter(function event){\r\n        eventEnter = event\r\n        if (event !=null){\r\n            hasEnterEvent = true\r\n        }\r\n    }\r\n    def onStay(function event){\r\n        eventStay = event\r\n        if (event !=null){\r\n            hasStayEvent = true\r\n        }\r\n    }\r\n    def onActivate(function event){\r\n        eventActivate = event\r\n        if (event !=null){\r\n            hasActivateEvent = true\r\n        }\r\n    }\r\n    def onDisactivate(function event){\r\n        eventDisactivate= event\r\n        if (event !=null){\r\n            hasDisactivateEvent = true\r\n        }\r\n    }\r\n    def onExit(function event){\r\n        eventExit = event\r\n        if (event !=null){\r\n            hasExitEvent = true\r\n        }\r\n    }\r\n    \r\n    def @room_init main_init(){\r\n        hasDisplay = false\r\n        if (count){\r\n            nbPlayer = 0\r\n        }\r\n    }\r\n    def @room_end main_end(){\r\n        if (count){\r\n            count = false\r\n        }\r\n    }\r\n    def @room_ticking main(){\r\n        if (x >= sx && x < ex && y >= sy && y < ey && z >= sz && z < ez){\r\n            if (count){\r\n                nbPlayer++\r\n            }\r\n            if (!IN){\r\n                if (hasEnterEvent){\r\n                    eventEnter()\r\n                }\r\n                if (nbPlayer == 0 && hasActivateEvent){\r\n                    eventActivate()\r\n                }\r\n                if(!count){\r\n                    nbPlayer++\r\n                }\r\n                IN = true\r\n            }\r\n            if (IN){\r\n                if (hasStayEvent){\r\n                    eventStay()\r\n                }\r\n            }\r\n        }\r\n        else if (IN){\r\n            IN = false\r\n            if (hasExitEvent){\r\n                eventExit()\r\n            }\r\n            if (!count){\r\n                nbPlayer--\r\n                if (nbPlayer == 0 && hasDisactivateEvent){\r\n                    eventDisactivate()\r\n                }\r\n                if (nbPlayer < 0){\r\n                    nbPlayer = 0\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":39},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_16_5/"],"MCVersion":"1.16.5","ExportAsZip":false,"packformat":6,"CompilerCoreName":"java","isLibrary":false}}