{"projectName":"vector","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":"Made With BluePhoenix","files":[{"name":"import","content":"import standard.exception\r\nimport math","index":0},{"name":"vector3","content":"package vector\n\nstruct vector3{\n\tfloat x\n\tfloat y\n\tfloat z\n\t\n\tdef lazy __init__(float x, float y,float z){\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.z = z\n\t}\n\n\tdef lazy __set__(float x, float y, float z){\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.z = z\t\n\t}\n\n\tdef lazy __set__(float other){\n\t\tthis.x = other\n\t\tthis.y = other\n\t\tthis.z = other\n\t}\n\t\n\tdef lazy __add__(vector3 other){\n\t\tthis.x += other.x\n\t\tthis.y += other.y\n\t\tthis.z += other.z\n\t}\n\n\tdef lazy __add__(float x, float y, float z){\n\t\tthis.x += x\n\t\tthis.y += y\n\t\tthis.z += z\n\t}\n\t\t\n\tdef lazy __sub__(vector3 other){\n\t\tthis.x -= other.x\n\t\tthis.y -= other.y\n\t\tthis.z -= other.z\n\t}\n\n\tdef lazy __sub__(float x, float y, float z){\n\t\tthis.x -= x\n\t\tthis.y -= y\n\t\tthis.z -= z\n\t}\n\n\tdef magnitude():float{\n\t\tfloat tmp1 = math.pow(this.x, 2)\n\t\tfloat tmp2 = math.pow(this.y, 2)\n\t\tfloat tmp3 = math.pow(this.z, 2)\n\t\ttmp1 = tmp1+ tmp2 + tmp3\n\t\ttmp1 = math.sqrt(tmp1)\n\t\treturn(tmp1)\n\t}\n\n\tdef normalize(){\n\t\tfloat mag = magnitude()\n\t\tx /= mag\n\t\ty /= mag\n\t\tz /= mag\n\t}\n\t\n\tdef scalarProd(vector3 other):float{\n\t\tfloat output = 0\n\t\toutput += this.x * this.x\n\t\toutput += this.y * this.y\n\t\toutput += this.z * this.z\n\t\treturn(output)\n\t}\n\t\n\tdef lazy __mult__(float a){\n\t\tthis.x *= a\n\t\tthis.y *= a\n\t\tthis.z *= a\n\t}\n\n\tdef lazy __mult__(vector3 other){\n\t\tthis.x *= other.x\n\t\tthis.y *= other.y\n\t\tthis.z *= other.z\n\t}\n\n\tdef lazy __mult__(float x, float y, float z){\n\t\tthis.x *= x\n\t\tthis.y *= y\n\t\tthis.z *= z\n\t}\n\t\n\tdef lazy __div__(float a){\n\t\tthis.x /= a\n\t\tthis.y /= a\n\t\tthis.z /= a\n\t}\n\n\tdef lazy __div__(vector3 other){\n\t\tthis.x /= other.x\n\t\tthis.y /= other.y\n\t\tthis.z /= other.z\n\t}\n\n\tdef lazy __div__(float x, float y, float z){\n\t\tthis.x /= x\n\t\tthis.y /= y\n\t\tthis.z /= z\n\t}\n}","index":0},{"name":"vector2","content":"package vector\n\nstruct vector2{\n\tfloat x\n\tfloat y\n\n\tdef lazy __init__(float x, float y){\n\t\tthis.x = x\n\t\tthis.y = y\n\t}\n\n\tdef lazy __set__(float x, float y){\n\t\tthis.x = x\n\t\tthis.y = y\n\t}\n\n\tdef __set__(vector2 other){\n\t\tthis.x = other.x\n\t\tthis.y = other.y\n\t}\n\n\tdef lazy __set__(float other){\n\t\tthis.x = other\n\t\tthis.y = other\n\t}\n\n \tdef lazy __add__(vector2 other){\n\t\tthis.x += other.x\n\t\tthis.y += other.y\n\t}\n\n\tdef lazy __add__(float x, float y){\n\t\tthis.x += x\n\t\tthis.y += y\n\t}\n\t\n\tdef lazy __sub__(vector2 other){\n\t\tthis.x -= other.x\n\t\tthis.y -= other.y\n\t}\n\n\tdef lazy __sub__(float x, float y){\n\t\tthis.x -= x\n\t\tthis.y -= y\n\t}\n\t\n\tdef scalarProd(vector2 other):float{\n\t\tfloat output = 0\n\t\toutput += this.x * this.x\n\t\toutput += this.y * this.y\n\t\treturn(output)\n\t}\n\t\n\tdef lazy __mult__(float a){\n\t\tthis.x *= a\n\t\tthis.y *= a\n\t}\n\n\tdef lazy __mult__(vector2 other){\n\t\tthis.x *= other.x\n\t\tthis.y *= other.y\n\t}\n\n\tdef lazy __mult__(float x, float y){\n\t\tthis.x *= x\n\t\tthis.y *= y\n\t}\n\t\n\tdef lazy __div__(float a){\n\t\tthis.x /= a\n\t\tthis.y /= a\n\t}\n\n\tdef lazy __div__(vector2 other){\n\t\tthis.x /= other.x\n\t\tthis.y /= other.y\n\t}\n\n\tdef lazy __div__(float x, float y){\n\t\tthis.x /= x\n\t\tthis.y /= y\n\t}\n\n\tdef magnitude():float{\n\t\tfloat tmp1 = math.pow(this.x, 2)\n\t\tfloat tmp2 = math.pow(this.y, 2)\n\t\ttmp1 = tmp1+ tmp2\n\t\ttmp1 = math.sqrt(tmp1)\n\t\treturn(tmp1)\n\t}\n\n\tdef normalize(){\n\t\tfloat mag = magnitude()\n\t\tx /= mag\n\t\ty /= mag\n\t}\n}","index":0},{"name":"intvector3","content":"package vector\n\nstruct intvector3{\n\tint x\n\tint y\n\tint z\n\n\tdef lazy __init__(int x, int y, int z){\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.z = z\n\t}\n\n\tdef lazy __set__(int x, int y, int z){\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.z = z\t\n\t}\n\n\tdef __set__(intvector3 other){\n\t\tthis.x = other.x\n\t\tthis.y = other.y\n\t\tthis.z = other.z\n\t}\n\n\tdef lazy __set__(int other){\n\t\tthis.x = other\n\t\tthis.y = other\n\t\tthis.z = other\n\t}\n\n\tdef lazy __add__(intvector3 other){\n\t\tthis.x += other.x\n\t\tthis.y += other.y\n\t\tthis.z += other.z\n\t}\n\n\tdef lazy __add__(int x, int y, int z){\n\t\tthis.x += x\n\t\tthis.y += y\n\t\tthis.z += z\n\t}\n\t\n\tdef lazy __sub__(intvector3 other){\n\t\tthis.x -= other.x\n\t\tthis.y -= other.y\n\t\tthis.z -= other.z\n\t}\n\n\tdef lazy __sub__(int x, int y, int z){\n\t\tthis.x -= x\n\t\tthis.y -= y\n\t\tthis.z -= z\n\t}\n\t\n\tdef scalarProd(intvector3 other):int{\n\t\tint output = 0\n\t\toutput += this.x * this.x\n\t\toutput += this.y * this.y\n\t\toutput += this.z * this.z\n\t\treturn(output)\n\t}\n\t\n\tdef lazy __mult__(int a){\n\t\tthis.x *= a\n\t\tthis.y *= a\n\t\tthis.z *= a\n\t}\n\n\tdef lazy __mult__(intvector3 other){\n\t\tthis.x *= other.x\n\t\tthis.y *= other.y\n\t\tthis.z *= other.z\n\t}\n\n\tdef lazy __mult__(int x, int y, int z){\n\t\tthis.x *= x\n\t\tthis.y *= y\n\t\tthis.z *= z\n\t}\n\t\n\tdef lazy __div__(int a){\n\t\tthis.x /= a\n\t\tthis.y /= a\n\t\tthis.z /= a\n\t}\n\n\tdef lazy __div__(intvector3 other){\n\t\tthis.x /= other.x\n\t\tthis.y /= other.y\n\t\tthis.z /= other.z\n\t}\n\n\tdef lazy __div__(int x, int y, int z){\n\t\tthis.x /= x\n\t\tthis.y /= y\n\t\tthis.z /= z\n\t}\n\n\tdef magnitude():float{\n\t\tfloat tmp1 = math.pow(this.x, 2)\n\t\tfloat tmp2 = math.pow(this.y, 2)\n\t\tfloat tmp3 = math.pow(this.z, 2)\n\t\ttmp1 = tmp1+ tmp2 + tmp3\n\t\ttmp1 = math.sqrt(tmp1)\n\t\treturn(tmp1)\n\t}\n}","index":0},{"name":"intvector2","content":"package vector\n\nstruct intvector2{\n\tint x\n\tint y\n\n\tdef lazy __init__(int x, int y){\n\t\tthis.x = x\n\t\tthis.y = y\n\t}\n\n\tdef lazy __set__(int x, int y){\n\t\tthis.x = x\n\t\tthis.y = y\n\t}\n\n\tdef __set__(intvector2 other){\n\t\tthis.x = other.x\n\t\tthis.y = other.y\n\t}\n\n\tdef lazy __set__(int other){\n\t\tthis.x = other\n\t\tthis.y = other\n\t}\n\n\n\n\tdef lazy __add__(intvector2 other){\n\t\tthis.x += other.x\n\t\tthis.y += other.y\n\t}\n\n\tdef lazy __add__(int x, int y){\n\t\tthis.x += x\n\t\tthis.y += y\n\t}\n\t\n\tdef lazy __sub__(intvector2 other){\n\t\tthis.x -= other.x\n\t\tthis.y -= other.y\n\t}\n\n\tdef lazy __sub__(int x, int y){\n\t\tthis.x -= x\n\t\tthis.y -= y\n\t}\n\t\n\tdef scalarProd(intvector2 other):int{\n\t\tint output = 0\n\t\toutput += this.x * this.x\n\t\toutput += this.y * this.y\n\t\treturn(output)\n\t}\n\t\n\tdef lazy __mult__(int a){\n\t\tthis.x *= a\n\t\tthis.y *= a\n\t}\n\n\tdef lazy __mult__(intvector2 other){\n\t\tthis.x *= other.x\n\t\tthis.y *= other.y\n\t}\n\n\tdef lazy __mult__(int x, int y){\n\t\tthis.x *= x\n\t\tthis.y *= y\n\t}\n\t\n\tdef lazy __div__(int a){\n\t\tthis.x /= a\n\t\tthis.y /= a\n\t}\n\n\tdef lazy __div__(intvector2 other){\n\t\tthis.x /= other.x\n\t\tthis.y /= other.y\n\t}\n\n\tdef lazy __div__(int x, int y){\n\t\tthis.x /= x\n\t\tthis.y /= y\n\t}\n\n\tdef magnitude():float{\n\t\tfloat tmp1 = math.pow(this.x, 2)\n\t\tfloat tmp2 = math.pow(this.y, 2)\n\t\ttmp1 = tmp1+ tmp2\n\t\ttmp1 = math.sqrt(tmp1)\n\t\treturn(tmp1)\n\t}\n}\n","index":0},{"name":"converter","content":"package vector\n\n\ndef lazy vector3ToIntVector3(vector3 vec):intvector3{\n\treturn(intvector3(vec.x, vec.y, vec.z))\n}\n\ndef lazy vector3ToVector2(vector3 vec, int axis = 2):vector2{\n\texception.intArgCheck(axis, 0, 3)\n\tswitch(axis){\n\t\t0 -> return(vector2(vec.y, vec.z))\n\t\t1 -> return(vector2(vec.x, vec.z))\n\t\t2 -> return(vector2(vec.x, vec.y))\n\t}\n}\n\ndef lazy vector2ToVector3(vector2 vec, int axis = 2):vector3{\n\texception.intArgCheck(axis, 0, 3)\n\tswitch(axis){\n\t\t0 -> return(vector3(0, vec.x, vec.y))\n\t\t1 -> return(vector3(vec.x, 0 , vec.y))\n\t\t2 -> return(vector3(vec.x, vec.y, 0))\n\t}\n}\n\ndef lazy intVector3ToIntVector2(intvector3 vec, int axis = 2):intvector2{\n\texception.intArgCheck(axis, 0, 3)\n\tswitch(axis){\n\t\t0 -> return(intvector2(vec.y, vec.z))\n\t\t1 -> return(intvector2(vec.x, vec.z))\n\t\t2 -> return(intvector2(vec.x, vec.y))\n\t}\n}\n\ndef lazy intVector2ToIntVector3(intvector2 vec, int axis = 2):intvector3{\n\texception.intArgCheck(axis, 0, 3)\n\tswitch(axis){\n\t\t0 -> return(intvector3(0, vec.x, vec.y))\n\t\t1 -> return(intvector3(vec.x, 0, vec.y))\n\t\t2 -> return(intvector3(vec.x, vec.y, 0))\n\t}\n}\n","index":0},{"name":"generator","content":"package vector3\n\n\"\"\"\nGive Vector(0,0,0)\n\"\"\"\ndef lazy zeros():vector3{\n\treturn(vector3(0,0,0))\n}\n\n\"\"\"\nGive Vector(1,1,1)\n\"\"\"\ndef lazy ones():vector3{\n\treturn(vector3(1,1,1))\n}\n\npackage vector\n\"\"\"\nReturn Position of Current Entity as vector3\n\"\"\"\ndef lazy vector3FromPos():vector3{\n\treturn(vector3(@s.x, @s.y, @s.z))\n}\n\n\"\"\"\nReturn Position of Current Entity as vector3\n\"\"\"\ndef lazy vector3FromPos(entity $e):vector3{\n\treturn(vector3($e.x, $e.y, $e.z))\n}\n\n\"\"\"\nReturn Motion of Current Entity as vector3\n\"\"\"\ndef lazy vector3FromMotion():vector3{\n\treturn(vector3(@s.motion_x, @s.motion_y, @s.motion_z))\n}\n\n\"\"\"\nReturn Motion of Current Entity as vector3\n\"\"\"\ndef lazy vector3FromMotion(entity $e):vector3{\n\treturn(vector3($e.motion_x, $e.motion_y, $e.motion_z))\n}\n\n\"\"\"\nReturn Position of Current Entity as intvector3\n\"\"\"\ndef lazy intvector3FromPos():intvector3{\n\treturn(intvector3(@s.x, @s.y, @s.z))\n}\n\n\"\"\"\nReturn Position of Current Entity as intvector3\n\"\"\"\ndef lazy intvector3FromPos(entity $e):intvector3{\n\treturn(intvector3($e.x, $e.y, $e.z))\n}\n\n\"\"\"\nReturn Motion of Current Entity as intvector3\n\"\"\"\ndef lazy intvector3FromMotion():vector3{\n\treturn(intvector3(@s.motion_x, @s.motion_y, @s.motion_z))\n}\n\n\"\"\"\nReturn Motion of Current Entity as intvector3\n\"\"\"\ndef lazy intvector3FromMotion(entity $e):vector3{\n\treturn(intvector3($e.motion_x, $e.motion_y, $e.motion_z))\n}\n\n\"\"\"\nReturn Position of Current Entity as vector2\n\"\"\"\ndef lazy vector2FromPos(int axis = 2):vector2{\n\treturn(vector3ToVector2(vector3(@s.x, @s.y, @s.z), axis))\n}\n\n\n\"\"\"\nReturn Position of Current Entity as vector2\n\"\"\"\ndef lazy vector2FromPos(entity $e,int axis = 2):vector2{\n\treturn(vector3ToVector2(vector3($e.x, $e.y, $e.z), axis))\n}\n\n\"\"\"\nReturn Position of Current Entity as intvector2\n\"\"\"\ndef lazy intvector2FromPos(int axis = 2):intvector2{\n\treturn(intVector3ToIntVector2(intvector3(@s.x, @s.y, @s.z), axis))\n}\n\n\"\"\"\nReturn Position of Current Entity as intvector2\n\"\"\"\ndef lazy intvector2FromPos(entity $e,int axis = 2):intvector2{\n\treturn(intVector3ToIntVector2(intvector3($e.x, $e.y, $e.z), axis))\n}\n\n\"\"\"\nReturn Motion of Current Entity as vector2\n\"\"\"\ndef lazy vector2FromMotion(int axis = 2):vector2{\n\treturn(vector3ToVector2(vector3(@s.motion_x, @s.motion_y, @s.motion_z), axis))\n}\n\n\"\"\"\nReturn Motion of Current Entity as vector2\n\"\"\"\ndef lazy vector2FromMotion(entity $e,int axis = 2):vector2{\n\treturn(vector3ToVector2(vector3($e.motion_x, $e.motion_y, $e.motion_z), axis))\n}\n\n\"\"\"\nReturn Motion of Current Entity as intvector2\n\"\"\"\ndef lazy intvector2FromMotion(int axis = 2):intvector2{\n\treturn(intVector3ToIntVector2(intvector3(@s.motion_x, @s.motion_y, @s.motion_z), axis))\n}\n\n\"\"\"\nReturn Motion of Current Entity as intvector2\n\"\"\"\ndef lazy intvector2FromMotion(entity $e,int axis = 2):intvector2{\n\treturn(intVector3ToIntVector2(intvector3($e.motion_x, $e.motion_y, $e.motion_z), axis))\n}\n\n\"\"\"\nReturn Position as a tripple\n\"\"\"\ndef lazy position():float,float,float{\n\treturn(@s.x,@s.y,@s.z)\n}\n\n\"\"\"\nReturn Position as a tripple\n\"\"\"\ndef lazy position(entity $e):float,float,float{\n\treturn($e.x,$e.y,$e.z)\n}\n\n\"\"\"\nReturn Position as a tripple of int\n\"\"\"\ndef lazy intPosition():int,int,int{\n\treturn(@s.x,@s.y,@s.z)\n}\n\n\"\"\"\nReturn Position as a tripple of int\n\"\"\"\ndef lazy intPosition(entity $e):int,int,int{\n\treturn($e.x,$e.y,$e.z)\n}\n\n\"\"\"\nReturn Motion as a tripple\n\"\"\"\ndef lazy motion():float,float,float{\n\treturn(@s.motion_x,@s.motion_y,@s.motion_z)\n}\n\n\n\"\"\"\nReturn Motion as a tripple\n\"\"\"\ndef lazy motion(entity $e):float,float,float{\n\treturn($e.motion_x,$e.motion_y,$e.motion_z)\n}\n\n\"\"\"\nReturn Motion as a tripple of int\n\"\"\"\ndef lazy intMotion():int,int,int{\n\treturn(@s.motion_x,@s.motion_y,@s.motion_z)\n}\n\n\"\"\"\nReturn Motion as a tripple of int\n\"\"\"\ndef lazy intMotion(entity $e):int,int,int{\n\treturn($e.motion_x,$e.motion_y,$e.motion_z)\n}","index":0},{"name":"generator2","content":"package vector\n\n\"\"\"\nGive tripplet from self to entity\n\"\"\"\ndef lazy fromSelfTo(int $entity):float,float,float{\n\tfloat x,y,z = $entity.x, $entity.y, $entity.z\n\tfloat dx,dy,dz = @s.x, @s.y, @s.z\n\tx,y,z -= dx,dy,dz\n\treturn(x,y,z)\n}\n\n\"\"\"\nGive tripplet from self to entity\n\"\"\"\ndef lazy fromEntityToSelf(int $entity):float,float,float{\n\tfloat x,y,z = @s.x, @s.y, @s.z\n\tfloat dx,dy,dz = $entity.x, $entity.y, $entity.z\n\tx,y,z -= dx,dy,dz\n\treturn(x,y,z)\n}\n\n\"\"\"\nGive vector3 from self to entity\n\"\"\"\ndef lazy vector3FromSelfTo(int $entity):vector3{\n\tfloat x,y,z = $entity.x, $entity.y, $entity.z\n\tfloat dx,dy,dz = @s.x, @s.y, @s.z\n\tx,y,z -= dx,dy,dz\n\treturn(vector3(x,y,z))\n}\n\n\"\"\"\nGive vector3 from self to entity\n\"\"\"\ndef lazy vector3FromEntityToSelf(int $entity):vector3{\n\tfloat x,y,z = @s.x, @s.y, @s.z\n\tfloat dx,dy,dz = $entity.x, $entity.y, $entity.z\n\tx,y,z -= dx,dy,dz\n\treturn(vector3(x,y,z))\n}","index":0},{"name":"overload","content":"package .\n\ndef lazy positioned(vector3 pos,function $func){\n\tpositioned(pos.x, pos.y, pos.z,$func)\n}\n\ndef lazy positioned(intvector3 pos,function $func){\n\tpositioned(pos.x, pos.y, pos.z,$func)\n}\n\ndef lazy at(vector3 pos,function $func){\n\tat(pos.x, pos.y, pos.z,$func)\n}\n\ndef lazy at(intvector3 pos,function $func){\n\tat(pos.x, pos.y, pos.z,$func)\n}","index":0},{"name":"setter","content":"package vector\n\n\"\"\"\nSet Position as a tripple\n\"\"\"\ndef lazy setPosition(float $mx, float $my, float $mz){\n\t@s.x,@s.y,@s.z = $mx, $my, $mz\n}\n\n\"\"\"\nSet Position as a tripple\n\"\"\"\ndef lazy setPosition(entity $e, float $mx, float $my, float $mz){\n\t$e.x,$e.y,$e.z = $mx, $my, $mz\n}\n\n\"\"\"\nSet Position as a vector\n\"\"\"\ndef lazy setPosition(int $v){\n\t@s.x,@s.y,@s.z = $v.x, $v.y, $v.z\n}\n\n\"\"\"\nSet Position as a vector\n\"\"\"\ndef lazy setPosition(entity $e, int $v){\n\t$e.x,$e.y,$e.z = $v.x, $v.y, $v.z\n}\n\n\n\"\"\"\nSet Motion as a tripple\n\"\"\"\ndef lazy setMotion(float $mx, float $my, float $mz){\n\t@s.motion_x,@s.motion_y,@s.motion_z = $mx, $my, $mz\n}\n\n\"\"\"\nSet Motion as a tripple\n\"\"\"\ndef lazy setMotion(entity $e, float $mx, float $my, float $mz){\n\t$e.motion_x,$e.motion_y,$e.motion_z = $mx, $my, $mz\n}\n\n\"\"\"\nSet Motion as a vector\n\"\"\"\ndef lazy setMotion(int $v){\n\t@s.motion_x,@s.motion_y,@s.motion_z = $v.x, $v.y, $v.z\n}\n\n\"\"\"\nSet Motion as a vector\n\"\"\"\ndef lazy setMotion(entity $e, int $v){\n\t$e.motion_x,$e.motion_y,$e.motion_z = $v.x, $v.y, $v.z\n}\n\n\n\n\"\"\"\nSet Rotation as a tripple\n\"\"\"\ndef lazy setRotation(float $mx, float $my){\n\t@s.rot_x,@s.rot_y = $mx, $my\n}\n\n\"\"\"\nSet Rotation as a tripple\n\"\"\"\ndef lazy setRotation(entity $e, float $mx, float $my){\n\t$e.rot_x,$e.rot_y = $mx, $my\n}\n\n\"\"\"\nSet Rotation as a vector\n\"\"\"\ndef lazy setRotation(int $v){\n\t@s.rot_x,@s.rot_y = $v.x, $v.y\n}","index":0},{"name":"getter","content":"package vector3\n\n\"\"\"\nReturn Position as a tripple\n\"\"\"\ndef lazy position():vector3{\n\treturn(vector3(@s.x,@s.y,@s.z))\n}\n\n\"\"\"\nReturn Position as a tripple\n\"\"\"\ndef lazy position(entity $e):vector3{\n\treturn(vector3($e.x,$e.y,$e.z))\n}\n\n\"\"\"\nReturn Motion as a tripple\n\"\"\"\ndef lazy motion():vector3{\n\treturn vector3(@s.motion_x,@s.motion_y,@s.motion_z)\n}\n\n\n\"\"\"\nReturn Motion as a tripple\n\"\"\"\ndef lazy motion(entity $e){\n\treturn vector3($e.motion_x,$e.motion_y,$e.motion_z)\n}","index":0},{"name":"getter2","content":"package intvector3\n\n\n\"\"\"\nReturn Position as a tripple of int\n\"\"\"\ndef lazy position():intvector3{\n\treturn intvector3(@s.x,@s.y,@s.z)\n}\n\n\"\"\"\nReturn Position as a tripple of int\n\"\"\"\ndef lazy position(entity $e){\n\treturn intvector3($e.x,$e.y,$e.z)\n}\n\n\n\"\"\"\nReturn Motion as a tripple of int\n\"\"\"\ndef lazy motion():intvector3{\n\treturn intvector3(@s.motion_x,@s.motion_y,@s.motion_z)\n}\n\n\"\"\"\nReturn Motion as a tripple of int\n\"\"\"\ndef lazy motion(entity $e):intvector3{\n\treturn intvector3($e.motion_x,$e.motion_y,$e.motion_z)\n}","index":0},{"name":"getter3","content":"package vector2\n\n\"\"\"\nReturn Position as a tripple\n\"\"\"\ndef lazy rotation():vector2{\n\treturn(vector2(@s.rot_x,@s.rot_y))\n}\n\n\"\"\"\nReturn Position as a tripple\n\"\"\"\ndef lazy rotation(entity $e):vector2{\n\treturn(vector2($e.x,$e.y))\n}\npackage intvector2\n\"\"\"\nReturn Position as a tripple\n\"\"\"\ndef lazy intRotation():vector2{\n\treturn(vector2(@s.rot_x,@s.rot_y))\n}\n\n\"\"\"\nReturn Position as a tripple\n\"\"\"\ndef lazy rotation(entity $e):vector2{\n\treturn(vector2($e.x,$e.y))\n}\n\npackage vector\n\"\"\"\nReturn Position as a tripple\n\"\"\"\ndef lazy rotation():int,int{\n\treturn(@s.rot_x,@s.rot_y)\n}\n\n\"\"\"\nReturn Position as a tripple\n\"\"\"\ndef lazy rotation(entity $e):int,int{\n\treturn($e.x,$e.y)\n}","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":[]},"tick":{"values":[]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":22},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.17","ExportAsZip":false,"packformat":6,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"isLibrary":false}}