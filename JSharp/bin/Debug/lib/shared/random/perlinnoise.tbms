{"projectName":"perlinnoise","datapackDirectory":null,"resourcesPackDirectory":null,"offuscate":true,"isLibrary":true,"description":"","files":[{"name":"import","content":"import standard.java\nimport standard.entity_id\nimport standard.object\nimport random.lcg","index":0},{"name":"perlinnoise","content":"package perlinnoise\n\nstruct perlinnoise{\n    random.lcg lcg\n    float[256] base\n    def __init__(int seed){\n        lcg = random.lcg(seed)\n        generate()\n    }\n    def generate(){\n        forgenerate($i,0,255){\n            float k = lcg.nextfloat() % 1.0\n            base[$i] = k\n        }\n    }\n    float lerp(float a0, float a1, float w){\n        w = w*w*(3-2*w)\n        float value = (1.0 - w)*a0 + w*a1\n        return value\n    }\n    float getPointF(int x, int y){\n        int index = (x+y*16)\n        return base[index]\n    }\n    float getPoint(float x, float y){\n        float x0 = math.floor(x)\n        float x1 = (x0 + 1)%16\n        float y0 = math.floor(y)\n        float y1 = (y0 + 1)%16\n \n        float sx = x - x0\n        float sy = y - y0\n        \n        float n0 = getPointF(x0,y0)\n        float n1 = getPointF(x1,y0)\n        float ix0 = lerp(n0, n1, sx)\n        float n0 = getPointF(x0,y1)\n        float n1 = getPointF(x1,y1)\n        float ix1 = lerp(n0, n1, sx)\n        float value = lerp(ix0, ix1, sy)\n        return value\n    }\n}\nstruct octavedperlinenoise{\n    perlinnoise octave1\n    perlinnoise octave2\n    perlinnoise octave3\n    float scalex1,scaley1,mult1,shift1\n    float scalex2,scaley2,mult2,shift2\n    float scalex3,scaley3,mult3,shift3\n    \n    def __init__(int seed){\n        octave1 = perlinnoise(seed)\n        octave2 = perlinnoise(seed)\n        octave3 = perlinnoise(seed)\n        scalex1,scaley1,mult1,shift1 = 7,7,0.2,0\n        scalex2,scaley2,mult2,shift2 = 16,16,0.4,4\n        scalex3,scaley3,mult3,shift3 = 33,33,0.8,8\n    }\n    float getPoint(float x, float y){\n        x /= 1000\n        y /= 1000\n        float p1 = octave1.getPoint((shift1+x*scalex1)%16, (shift1+y*scaley1)%16)*mult1\n        float p2 = octave2.getPoint((shift2+x*scalex2)%16, (shift2+y*scaley2)%16)*mult2\n        float p3 = octave3.getPoint((shift3+x*scalex3)%16, (shift3+y*scaley3)%16)*mult3\n        float value = (p1+p2+p3) - 0.5\n        return value\n    }\n}\n","index":0}],"resources":[],"TagsList":{"blocks":{},"functions":{}},"mcTagsList":{"blocks":{},"functions":{"load":{"values":["load"]},"tick":{"values":["main"]}}},"compileOrder":[],"version":{"major":1,"minor":0,"patch":0,"build":0},"compilationSetting":{"TreeMaxSize":20,"FloatPrecision":1000,"removeUselessFile":true,"offuscate":true,"scoreboardValue":"tbms.value","scoreboardConst":"tbms.const","scoreboardTmp":"tbms.tmp","tagsFolder":true,"forcedOffuscation":{},"libraryFolder":["./lib/1_17/","./lib/1_16_5/","./lib/shared/"],"MCVersion":"1.16.5","ExportAsZip":false,"packformat":7,"rppackformat":7,"CompilerCoreName":"java","Authors":"","generateMAPSFile":true,"generateREADMEFile":true,"opti_FunctionTagsReplace":true,"opti_ExportComment":false,"opti_ShowException":true,"opti_ShowDebug":true,"advanced_debug":false,"isLibrary":false}}